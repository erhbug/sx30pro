C51 COMPILER V7.50   KEYBOARD                                                              09/27/2022 18:11:36 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN keyboard.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE customer\keyboard.c BROWSE DEBUG OBJECTEXTEND PRINT(.\keyboard.lst) OBJECT(
                    -keyboard.obj)

line level    source

   1          //*************************************************************************//
   2          //* Name                                :   display_cal.c
   3          //* Vision                              :       V-Nov07_12
   4          //* Project                             :   All project
   5          //* Function                    :   Solidic 电子称 显存计算文件
   6          //* $Author                             :   superc
   7          //*
   8          //* Copyright 2012 by solidic
   9          //*
  10          //* Recode:
  11          //*                                             1: 2012-11-07  First Creat By Superc
  12          //*
  13          //*
  14          //*
  15          //*************************************************************************//
  16          #include <REG52.H>
  17          #include <math.h>
  18          //**************************************************************************
  19          // -- 全部头文件 集中管理 ---- ，版本修改文件名会变动 ---  必须修改 这个文件
  20          //**************************************************************************
  21          //#include "./_solidic/head_file_version.h"
  22          #include "./customer/keyboard.h"
  23          #include "./_scale/dvr_def.h"
  24          
  25          
  26          unsigned char xdata Key;
  27          unsigned char xdata LastKey;
  28          unsigned char xdata KeyState=0;
  29          
  30          strTimers xdata strTimer;
  31          
  32          
  33          #define KEY_D0_ON                       P2 |= 0x02 
  34          #define KEY_D0_OFF                      P2 &= 0xFD 
  35          
  36          
  37          void key_scan(void) {
  38   1        unsigned char xdata k = 0;
  39   1        Key = 0;
  40   1      
  41   1        for (k = 0; k < 5; k++) {
  42   2          KEY_D0 = 1;
  43   2          KEY_D1 = 1;
  44   2          KEY_D2 = 1;
  45   2          KEY_D3 = 1;
  46   2          KEY_D4 = 1;
  47   2          if (k == 0) KEY_D0 = 0;
  48   2          if (k == 1) KEY_D1 = 0;
  49   2          if (k == 2) KEY_D2 = 0;
  50   2          if (k == 3) KEY_D3 = 0;
  51   2          if (k == 4) KEY_D4 = 0;
  52   2          delay_ms(1);
  53   2          if (KEY_K0 != 1) Key = 1 + (k * 4);
  54   2          if (KEY_K1 != 1) Key = 2 + (k * 4);
C51 COMPILER V7.50   KEYBOARD                                                              09/27/2022 18:11:36 PAGE 2   

  55   2          if (KEY_K2 != 1) Key = 3 + (k * 4);
  56   2          if (KEY_K3 != 1) Key = 4 + (k * 4);
  57   2        }
  58   1      
  59   1        if (LastKey == 0 && Key != 0) {
  60   2          KeyState = PRESS; //se presiono
  61   2        } else if (LastKey == Key && Key != 0) {
  62   2          KeyState = PRESSED; //se mantiene presionado
  63   2        } else if (LastKey != 0 && Key == 0) {
  64   2          KeyState = RELEASE; //se solto
  65   2        } else if (LastKey == 0 && Key == 0) {
  66   2          KeyState = 0; //no se ha presionado una tecla
  67   2        }
  68   1        LastKey = Key;
  69   1        if(Key!=0&&KeyState == PRESS)vBeep_Key();
  70   1        IWDG_KEY_REFRESH;
  71   1      }
  72          
  73          
  74          void vBeep_Key(void){
  75   1      
  76   1              /*enum digi_key Value_Key_Press;
  77   1              
  78   1              if(srFlagScale.bCalidadTest == 2){
  79   1                      if(stScaleParam.cBacklight){OnBackLight;}
  80   1              }*/
  81   1              
  82   1      //      if(!strTimer.cFLag_TimerA_On){
  83   1      //              strTimer.cFLag_TimerA_End = 0;
  84   1                      Beep_On_Key;
  85   1      //      }
  86   1      
  87   1      
  88   1              /*while(strTimer.cFLag_TimerA_End == 0){
  89   1                      //IWDG->KR = IWDG_KEY_REFRESH;
  90   1              }*/
  91   1              
  92   1              /*do{
  93   1                      Value_Key_Press = vActionKey();         
  94   1              }while(Value_Key_Press != KEY_NULL);
  95   1              
  96   1              if(srFlagScale.bCalidadTest == 2){
  97   1                      //OffBackLight;
  98   1              }
  99   1              
 100   1              KeyPressed = FALSE;*/
 101   1      }
 102          
 103          void vScan_Key(void){
 104   1      }
 105          
 106          enum digi_key vActionKey(void){
 107   1              
 108   1      /*      vReadKey();
 109   1              
 110   1              if(KeyPressed == TRUE){
 111   1                      KeyPressed = FALSE;
 112   1                      
 113   1              if(srFlagScale.bBateriaLow == 0){
 114   1              if(stScaleParam.cBacklight){OnBackLight;}
 115   1                      strTimer.cFLag_TimerJ_Start = 1;
 116   1                      srFlagScale.bBacklight_On = 1;
C51 COMPILER V7.50   KEYBOARD                                                              09/27/2022 18:11:36 PAGE 3   

 117   1              }       
 118   1              
 119   1                      return eKeyTouch;
 120   1              }else{
 121   1                      return KEY_NULL;
 122   1              }*/
 123   1              return 0;
 124   1      }
 125          
 126          void vSound_Saved_Param(void){
 127   1              unsigned char xdata  i = 0;
 128   1              
 129   1              for(i=0; i<3; i++){vBeep_Key();delay_ms(250);}
 130   1      }
 131          
 132          void delay_ms(unsigned int num)
 133          {       
 134   1              unsigned int xdata i,j;
 135   1              for(i= 0;i<num;i++){    //(SDI5219) ??1ms
 136   2              IWDG_KEY_REFRESH; 
 137   2                      for(j=0;j<200;j++)
 138   2                              ;
 139   2          } 
 140   1      
 141   1      }
 142          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    364    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
