C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE DVR_LCD_SDI1621
OBJECT MODULE PLACED IN dvr_lcd_SDI1621.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE _display\dvr_lcd_SDI1621.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\dvr_lcd_
                    -SDI1621.lst) OBJECT(dvr_lcd_SDI1621.obj)

line level    source

   1          //Creado por Eriberto Romero Hernandez
   2          //Modificado en Sep 22 
   3          #include "./_display/dvr_lcd_SDI1621.h"
   4          
   5          #include <stdio.h>
   6          #include <string.h>
   7          
   8                  SOLIDIC Display;
   9          
  10                  void write_lcd(SOLIDIC Display);
  11                  void LCD_GLASS_Update(void);
  12          
  13          #if DISPLAY_20400047_EN > 0     
  14          const unsigned char cNumber_LCD[10] = { 
  15                          0x5F, //        01011111,       //0
  16                          0x50,   //      01010000,       //1
  17                          0x3D,   //      00111101,               //2
  18                          0x79,   //      01111001,       //3
  19                          0x72,   //      01110010,       //4
  20                          0x6B,   //      01101011,               //5
  21                          0x6F,   //      01101111,               //6
  22                          0x51,   //      01010001,               //7
  23                          0x7F,   //      01111111,               //8
  24                          0X73};//        01110011                //9
  25          
  26          const unsigned char cABC_LCD[28] = {
  27                          0x77,   //      01110111,       //A
  28                          0x6E,   //      01101110,       //b
  29                          0x0F,   //      00001111,       //C
  30                          0x7C,   //      01111100,       //d
  31                          0x2F,   //      00101111, //E
  32                          0x27,   //      00100111,       //F
  33                          0x6F,   //      01101111,       //G
  34                          0x76,   //      01110110,       //H
  35                          0x50,   //      01010000,       //I
  36                          0x5C,   //      01011100,       //J
  37                          0x36,   //      00110110,       //K
  38                          0x0E,   //      00001110,       //L
  39                          0x00,   //      00000000,       //M
  40                          0x64,   //      01100100,       //n
  41                          0x5F,   //      01011111,       //O
  42                          0x37,   //      00110111,       //P
  43                          0x73,   //      01110011,       //q
  44                          0x24,   //      00100100,       //r
  45                          0x6B,   //      01101011,       //S
  46                          0x2E,   //      00101110,       //T
  47                          0x5E,   //      01011110,       //U
  48                          0x4C,   //      01001100,       //V
  49                          0x00,   //      00000000,       //W
  50                          0x00,   //      00000000,       //X
  51                          0x72,   //      01110010,       //Y
  52                          0x3D,   //      00111101,       //Z
  53                          0x20};//        00100000        //-
  54          
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 2   

  55          #define S_ZERO      0
  56          #define P_PESO_3    1
  57          #define P_PESO_2    2
  58          #define P_PESO_1    3
  59          #define S_TARE      4           
  60          #define S_14        5
  61          #define S_34        6
  62          #define P_TOTAL_2   7
  63          #define P_TOTAL_1   8           
  64          #define S_24        9
  65          #define S_44        10
  66          #define S_Y         11
  67          #define P_PRECIO_3  12
  68          #define P_PRECIO_2  13
  69          #define P_PRECIO_1  14
  70          #define S_X         15
  71                          
  72                  
  73          #else
              const unsigned char cNumber_LCD[10] = { 
                              0x7D, //        01111101,       //0
                              0x60,   //      01100000,       //1
                              0x3E,   //      00111110,               //2
                              0x7A,   //      01111010,       //3
                              0x63,   //      01100011,       //4
                              0x5B,   //      01011011,               //5
                              0x5F,   //      01011111,               //6
                              0x70,   //      01110000,               //7
                              0x7F,   //      01111111,               //8
                              0x7B};  //      01111011                //9
              
              const unsigned char cABC_LCD[28] = {
                              0x77,   //      01110111,       //A
                              0x4F,   //      01001111,       //b
                              0x1D,   //      00011101,       //C
                              0x6E,   //      01101110,       //d
                              0x1F,   //      00011111, //E
                              0x17,   //      00010111,       //F
                              0x5F,   //      01011111,       //G
                              0x67,   //      01100111,       //H
                              0x60,   //      01100000,       //I
                              0x6C,   //      01101000,       //J
                              0x27,   //      01100111,       //K
                              0x0D,   //      00001101,       //L
                              0x00,   //      01000110,       //M
                              0x46,   //      01000110,       //n
                              0x7D,   //      01111101,       //O
                              0x37,   //      00110111,       //P
                              0x73,   //      01110011,       //q
                              0x06,   //      00000110,       //R
                              0x5B,   //      01011011,       //S
                              0x0F,   //      00001111,       //T
                              0x6D,   //      01101101,       //U
                              0x4C,   //      01001100,       //V
                              0x00,   //      01001100,       //W
                              0x00,   //      00001000,       //X
                              0x27,   //      00100111,       //Y
                              0x3E,   //      00111110,       //Z
                              0x02};//        00000010        //-
              
              
              
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 3   

              #define P_PESO_3    6
              #define P_PESO_2    7
              #define P_PESO_1    8
              #define P_PRECIO_2  1
              #define P_PRECIO_1  2
              #define P_TOTAL_2   9
              #define P_TOTAL_1   3           
              #define S_ZERO      12
              #define S_X         14
              #define S_Y         15  
                              
              #define S_KG        11
              #define S_LB        10          
              #define S_NET       13
              
              #endif
 133          
 134                  // funci¨®n de retardo 10us
 135          void delay_35u(void){   
 136   1              unsigned int j;
 137   1              for(j= 0;j<5;j++);
 138   1      }       
 139          
 140          //****************************************************
 141          // Controlador LCD 1621 bloque compilaci¨®n condicional ------ comenzar -------
 142          //****************************************************
 143          void lcd_unit_write(unsigned char d){
 144   1              unsigned char i;
 145   1              for(i=0;i<8;i++){
 146   2                      if( ( d & 0x80 ) == 0 ) LCD_DATA_OFF;
 147   2                      else LCD_DATA_ON;
 148   2                      LCD_WR_N_OFF;   
 149   2                      delay_35u();    
 150   2          LCD_WR_N_ON;                        
 151   2                      delay_35u();            
 152   2                      d <<= 1;                
 153   2              }
 154   1      }
 155          
 156          
 157          
 158          int iLCD_GLASS_Init(void){//int i,j,k;
 159   1      
 160   1      
 161   1              LCD_CS_N_ON;
 162   1              LCD_WR_N_ON;
 163   1              LCD_DATA_ON;
 164   1              delay_35u();
 165   1              delay_35u();    
 166   1              
 167   1              Display.mode=LCD_COMAND;
 168   1              
 169   1              Display.cmd=SYS_EN;
 170   1              write_lcd(Display);//Turn on system oscillator
 171   1              
 172   1              Display.cmd=LCD_ON;     
 173   1              write_lcd(Display);//Turn on LCD bias generator         
 174   1              
 175   1              Display.cmd=BIAS_4;     
 176   1              write_lcd(Display);//LCD 1/2 bias option
 177   1              
 178   1              Display.cmd=COM_4;      
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 4   

 179   1              write_lcd(Display);//LCD 1/3 bias option 
 180   1                      
 181   1              Display.mode=LCD_DATA;
 182   1              Display.addr=0;
 183   1              Display.counter=sizeof(Display.LCD_BUF);
 184   1              memset(Display.LCD_BUF, 0x00, sizeof(Display.LCD_BUF));
 185   1              write_lcd(Display);//Write data to the RAM 
 186   1              /*while(1){
 187   1                      memset(Display.LCD_BUF, 0x00, sizeof(Display.LCD_BUF));
 188   1                      Display.LCD_BUF[5]=1<<7;write_lcd(Display);
 189   1                      HAL_Delay(1000);
 190   1                      Display.LCD_BUF[9]=1<<7;write_lcd(Display);
 191   1                      HAL_Delay(1000);
 192   1                      Display.LCD_BUF[6]=1<<7;write_lcd(Display);
 193   1                      HAL_Delay(1000);
 194   1                      Display.LCD_BUF[10]=1<<7;write_lcd(Display);
 195   1                      HAL_Delay(1000);
 196   1                      
 197   1                      
 198   1              }*/
 199   1              /*while(1){
 200   1              LCD_GLASS_Symbols(9,0); //bateria 0/3
 201   1                                      LCD_GLASS_Symbols(8,0);
 202   1                                      LCD_GLASS_Symbols(7,0);
 203   1                                      LCD_GLASS_Symbols(10,1);
 204   1                      for(i=0;i<1000;i++){
 205   1                      IWDG->KR =  IWDG_KEY_REFRESH; 
 206   1                              HAL_Delay(1);
 207   1                      }
 208   1                      
 209   1                      LCD_GLASS_Symbols(9,0); //bateria 0/3
 210   1                                      LCD_GLASS_Symbols(8,0);
 211   1                                      LCD_GLASS_Symbols(7,1);
 212   1                                      LCD_GLASS_Symbols(10,1);
 213   1                      for(i=0;i<1000;i++){
 214   1                      IWDG->KR =  IWDG_KEY_REFRESH; 
 215   1                              HAL_Delay(1);
 216   1                      }
 217   1                      
 218   1                      LCD_GLASS_Symbols(9,0); //bateria 0/3
 219   1                                      LCD_GLASS_Symbols(8,1);
 220   1                                      LCD_GLASS_Symbols(7,1);
 221   1                                      LCD_GLASS_Symbols(10,1);
 222   1                      for(i=0;i<1000;i++){
 223   1                      IWDG->KR =  IWDG_KEY_REFRESH; 
 224   1                              HAL_Delay(1);
 225   1                      }
 226   1                      
 227   1                      LCD_GLASS_Symbols(9,1); //bateria 0/3
 228   1                                      LCD_GLASS_Symbols(8,1);
 229   1                                      LCD_GLASS_Symbols(7,1);
 230   1                                      LCD_GLASS_Symbols(10,1);
 231   1                      for(i=0;i<1000;i++){
 232   1                      IWDG->KR =  IWDG_KEY_REFRESH; 
 233   1                              HAL_Delay(1);
 234   1                      }
 235   1              }*/
 236   1              
 237   1              return 0;
 238   1      }
 239          
 240          
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 5   

 241          
 242          // funci¨®n de escritura LCD
 243          // modo:
 244          // 0: Entrada de comando
 245          // 1: actualizar todas las ¨¢reas
 246          // cmd: comando de codificaci¨®n
 247          // ---- Nota: Mostrar la funci¨®n de la tecla de interrupci¨®n ET0 en la funci¨®n - (Cuando el programa no
             - necesita abrir la interrupci¨®n T0, preste especial atenci¨®n para evitar que la funci¨®n de pantalla abra accidentalme
             -nte la interrupci¨®n T0)
 248          
 249          void write_lcd(SOLIDIC Display){//char mode,unsigned char cmd,unsigned char addr,unsigned char counter)
 250   1              unsigned char i=0;      
 251   1              
 252   1              //HAL_NVIC_DisableIRQ(TIM14_IRQn);
 253   1              
 254   1      /*      if(strTimer.cFLag_TimerF_On ==  1 && eAccionScale != scalePreOnDc){//contador autoapagado 15m
 255   1                      if(strTimer.iTimerF > 36){
 256   1                              strTimer.iTimerF-=35;
 257   1                      }
 258   1              }
 259   1              
 260   1              if(strTimer.cFLag_TimerI_On && srFlagScale.bSourceVoltage == SOURCE_BATTERY){ //contador apagado backlite
             - 15seg
 261   1                      if(strTimer.iTimerI > 36){
 262   1                              strTimer.iTimerI-=35;                   
 263   1                      }
 264   1              }*/
 265   1              
 266   1              LCD_CS_N_ON;
 267   1              LCD_WR_N_ON;
 268   1              LCD_DATA_ON;    
 269   1              delay_35u();            
 270   1              LCD_CS_N_OFF;// LCD_DATA_ON;
 271   1              delay_35u();
 272   1              LCD_WR_N_OFF;
 273   1              delay_35u();
 274   1              LCD_WR_N_ON;
 275   1              delay_35u();
 276   1              LCD_DATA_OFF;
 277   1              LCD_WR_N_OFF;
 278   1              delay_35u();
 279   1              LCD_WR_N_ON;
 280   1              delay_35u();
 281   1              if(Display.mode==0)
 282   1                      LCD_DATA_OFF;
 283   1              else 
 284   1                      LCD_DATA_ON;
 285   1              LCD_WR_N_OFF;
 286   1              delay_35u();
 287   1              LCD_WR_N_ON;
 288   1              delay_35u();
 289   1      
 290   1              if(Display.mode == 0){
 291   2                      lcd_unit_write(Display.cmd);            
 292   2                      LCD_WR_N_OFF;
 293   2                      delay_35u();
 294   2                      LCD_WR_N_ON;
 295   2                      delay_35u();
 296   2              }
 297   1              else 
 298   1              {               
 299   2                      Display.addr = 0;
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 6   

 300   2                      for(i=0;i<6;i++){       // Êý¾ÝÐ´ÈëÃüÁî,·¢ËÍÊ×µØÖ·  Comando de escritura de datos, enviar la primera direcci¨®
             -n
 301   3                              LCD_WR_N_OFF;                   
 302   3                              if( (Display.addr & 0x80) == 0 ) 
 303   3                                      LCD_DATA_OFF;
 304   3                        else 
 305   3                                      LCD_DATA_ON;
 306   3                              delay_35u();
 307   3                              LCD_WR_N_ON;
 308   3                              delay_35u();
 309   3                              Display.addr <<= 1;
 310   3                      }               
 311   2                      for(i=0;i<16;i++)       // Êý¾ÝÐ´ÈëÃüÁî,·¢ËÍÊý¾Ý  Comando de escritura de datos, enviar datos
 312   2                              lcd_unit_write(Display.LCD_BUF[15 - i]);                
 313   2              }
 314   1              LCD_CS_N_ON;
 315   1              LCD_DATA_ON;
 316   1              LCD_WR_N_ON;    
 317   1              delay_35u();
 318   1              
 319   1              //HAL_GPIO_WritePin(GPIOC, TARA_IN_Pin, GPIO_PIN_RESET);
 320   1              
 321   1              //HAL_NVIC_EnableIRQ(TIM14_IRQn);       
 322   1      }
 323          
 324          int iLCD_GLASS_DeInit(void){    
 325   1              Display.mode=LCD_DATA;
 326   1              Display.addr=0;
 327   1              Display.counter=sizeof(Display.LCD_BUF);        
 328   1              
 329   1              memset(Display.LCD_BUF, 0x00, sizeof(Display.LCD_BUF));//InitLCDBuf(0);
 330   1              write_lcd(Display);//Write data to the RAM
 331   1              
 332   1              Display.mode=LCD_COMAND;
 333   1              
 334   1              Display.cmd=LCD_OFF;    
 335   1              write_lcd(Display);//Turn off LCD bias generator        
 336   1              
 337   1              Display.cmd=SYS_DIS;
 338   1              write_lcd(Display);//Turn off system oscillator
 339   1              
 340   1              return 1;
 341   1      }
 342          
 343          /*
 344          */
 345          int iLCD_GLASS_Clear(void){     
 346   1              Display.mode=LCD_DATA;
 347   1              Display.addr=0;
 348   1              Display.counter=sizeof(Display.LCD_BUF);        
 349   1              memset(Display.LCD_BUF, 0x00, sizeof(Display.LCD_BUF));//InitLCDBuf(0);
 350   1              write_lcd(Display);//Write data to the RAM
 351   1              return 1;
 352   1      }
 353          
 354          /*
 355          */
 356          int iLCD_GLASS_All_On(void){
 357   1              Display.mode=LCD_DATA;
 358   1              Display.addr=0;
 359   1              Display.counter=sizeof(Display.LCD_BUF);        
 360   1              memset(Display.LCD_BUF, 0xFF, sizeof(Display.LCD_BUF));
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 7   

 361   1              write_lcd(Display);     
 362   1              return 1;
 363   1      }
 364          
 365          
 366          
 367          void LCD_SET_Char(unsigned char cCaracter, unsigned char cPosition_On_LCD, 
 368                  char cPosition_Text){
 369   1                      char i=0;
 370   1                      #if DISPLAY_20400047_EN > 0                     
 371   1                      if(cPosition_On_LCD==LCD_PESO)i=0;
 372   1                      if(cPosition_On_LCD==LCD_PRECIO)i=11;
 373   1                      if(cPosition_On_LCD==LCD_TOTAL) i=5;            
 374   1                      #else
                                if(cPosition_On_LCD==LCD_PESO)i=5;
                                if(cPosition_On_LCD==LCD_PRECIO)i=0;
                                if(cPosition_On_LCD==LCD_TOTAL) i=10;         
                              #endif
 379   1                      i+=(5-cPosition_Text);
 380   1                      Display.LCD_BUF[i]&=0x80;       
 381   1                Display.LCD_BUF[i]|=cCaracter;
 382   1              
 383   1      }
 384          
 385          
 386          void LCD_GLASS_Dot(unsigned char iNumber_Dot, unsigned char cPosition_On_LCD, unsigned char cFLag_On){
 387   1              
 388   1              switch(cPosition_On_LCD){
 389   2                      case LCD_PESO:
 390   2                              if(iNumber_Dot == 3){                         
 391   3                                      if(cFLag_On == 1)
 392   3                                        Display.LCD_BUF[P_PESO_3]|=0x80;
 393   3                          else
 394   3                                        Display.LCD_BUF[P_PESO_3]&=0x7F;
 395   3                              }
 396   2                              if(iNumber_Dot == 2){
 397   3              if(cFLag_On == 1)
 398   3                                        Display.LCD_BUF[P_PESO_2]|=0x80;
 399   3                          else
 400   3                                        Display.LCD_BUF[P_PESO_2]&=0x7F;
 401   3                      
 402   3                              }
 403   2                              if(iNumber_Dot == 1){
 404   3              if(cFLag_On == 1)
 405   3                                        Display.LCD_BUF[P_PESO_1]|=0x80;
 406   3                          else
 407   3                                        Display.LCD_BUF[P_PESO_1]&=0x7F;
 408   3                              }               
 409   2                              break;
 410   2                      case LCD_PRECIO:
 411   2                              #if DISPLAY_20400047_EN > 0     
 412   2                              if(iNumber_Dot == 3){
 413   3                if(cFLag_On == 1)
 414   3                                          Display.LCD_BUF[P_PRECIO_3]|=0x80;
 415   3                            else
 416   3                                          Display.LCD_BUF[P_PRECIO_3]&=0x7F;          
 417   3                                 }
 418   2                              #endif
 419   2                              if(iNumber_Dot == 2){
 420   3              if(cFLag_On == 1)
 421   3                                        Display.LCD_BUF[P_PRECIO_2]|=0x80;
 422   3                          else
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 8   

 423   3                                        Display.LCD_BUF[P_PRECIO_2]&=0x7F;            
 424   3                              }
 425   2                              if(iNumber_Dot == 1){
 426   3              if(cFLag_On == 1)
 427   3                                        Display.LCD_BUF[P_PRECIO_1]|=0x80;
 428   3                          else
 429   3                                        Display.LCD_BUF[P_PRECIO_1]&=0x7F;
 430   3                              }                       
 431   2                              break;
 432   2                              
 433   2                      case LCD_TOTAL:
 434   2                              if(iNumber_Dot == 2){
 435   3              if(cFLag_On == 1)
 436   3                                        Display.LCD_BUF[P_TOTAL_2]|=0x80;
 437   3                          else
 438   3                                        Display.LCD_BUF[P_TOTAL_2]&=0x7F;             
 439   3                              }
 440   2                              if(iNumber_Dot == 1){
 441   3              if(cFLag_On == 1)
 442   3                                        Display.LCD_BUF[P_TOTAL_1]|=0x80;
 443   3                          else
 444   3                                        Display.LCD_BUF[P_TOTAL_1]&=0x7F;
 445   3                              }
 446   2                      break;
 447   2              }
 448   1              
 449   1              LCD_GLASS_Update();
 450   1      }
 451          
 452          
 453          void LCD_GLASS_Symbols(unsigned char cSymbol, unsigned char cFlag_On){
 454   1              
 455   1              //if(cFlag_On!=0&&cFlag_On!=1)vSend_String_Usart(&huart1,"-------------ERROR------------\r\n");
 456   1      
 457   1              switch(cSymbol){        
 458   2                      #if DISPLAY_20400047_EN > 0     
 459   2                      
 460   2                      case 10:  //vSend_String_Usart(&huart1,"1/4 ");
 461   2                              if(cFlag_On == 1)
 462   2                                      Display.LCD_BUF[S_14]|=0x80;
 463   2                              else
 464   2                                      Display.LCD_BUF[S_14]&=0x7F;    
 465   2                              break;  
 466   2                              case 7: // vSend_String_Usart(&huart1,"2/4 ");
 467   2                                      if(cFlag_On == 1)
 468   2                                      Display.LCD_BUF[S_24]|=0x80;
 469   2                              else
 470   2                                      Display.LCD_BUF[S_24]&=0x7F;    
 471   2                              break;  
 472   2                              case 8:  //vSend_String_Usart(&huart1,"3/4");
 473   2                              if(cFlag_On == 1)
 474   2                                      Display.LCD_BUF[S_34]|=0x80;
 475   2                              else
 476   2                                      Display.LCD_BUF[S_34]&=0x7F;    
 477   2                              break;  
 478   2                              case 9:  //vSend_String_Usart(&huart1,"4/4");
 479   2                              if(cFlag_On == 1)
 480   2                                      Display.LCD_BUF[S_44]|=0x80;
 481   2                              else
 482   2                                      Display.LCD_BUF[S_44]&=0x7F;    
 483   2                              break;  
 484   2                              case SYMBOL_NET:  //vSend_String_Usart(&huart1,"SYMBOL_NET");
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 9   

 485   2                              if(cFlag_On == 1)
 486   2                                      Display.LCD_BUF[S_TARE]|=0x80;
 487   2                              else
 488   2                                      Display.LCD_BUF[S_TARE]&=0x7F;  
 489   2                              break;  
 490   2                      
 491   2          #else               
                              case SYMBOL_KG:                 //vSend_String_Usart(&huart1,"SYMBOL_KG");
                                      if(cFlag_On == 1)
                                              Display.LCD_BUF[S_KG]|=0x80;
                                      else
                                              Display.LCD_BUF[S_KG]&=0x7F;                    
                                      break;
                              case SYMBOL_LB:                 //vSend_String_Usart(&huart1,"SYMBOL_LB");
                                      if(cFlag_On == 1)
                                              Display.LCD_BUF[S_LB]|=0x80;
                                      else
                                              Display.LCD_BUF[S_LB]&=0x7F;
                                      break;  
                              case SYMBOL_NET:  //vSend_String_Usart(&huart1,"SYMBOL_NET");
                                      if(cFlag_On == 1)
                                              Display.LCD_BUF[S_NET]|=0x80;
                                      else
                                              Display.LCD_BUF[S_NET]&=0x7F;   
                                      break;          
                              #endif
 511   2                      
 512   2                              /*case SYMBOL_TARE:  vSend_String_Usart(&huart1,"SYMBOL_TARE\r\n");
 513   2                              if(cFlag_On == 1)
 514   2                                      Display.LCD_BUF[S_TARE]|=0x80;
 515   2                              else
 516   2                                      Display.LCD_BUF[S_TARE]&=0x7F;  
 517   2                              break;  */
 518   2                              
 519   2                              case SYMBOL_ZERO:  //vSend_String_Usart(&huart1,"SYMBOL_ZERO");
 520   2                              if(cFlag_On == 1)
 521   2                                      Display.LCD_BUF[S_ZERO]|=0x80;
 522   2                              else
 523   2                                      Display.LCD_BUF[S_ZERO]&=0x7F;  
 524   2                              break;          
 525   2                              
 526   2                              
 527   2                              
 528   2                              case SYMBOL_X:  //vSend_String_Usart(&huart1,"SYMBOL_X");
 529   2                              if(cFlag_On == 1)
 530   2                                      Display.LCD_BUF[S_X]|=0x80;
 531   2                              else
 532   2                                      Display.LCD_BUF[S_X]&=0x7F;     
 533   2                              break;  
 534   2                              
 535   2                              case SYMBOL_Y:  //vSend_String_Usart(&huart1,"SYMBOL_Y");
 536   2                              if(cFlag_On == 1)
 537   2                                      Display.LCD_BUF[S_Y]|=0x80;
 538   2                              else
 539   2                                      Display.LCD_BUF[S_Y]&=0x7F;     
 540   2                              break;          
 541   2                      
 542   2                                                              
 543   2                              
 544   2                      case SYMBOL_ALL:  //vSend_String_Usart(&huart1,"SYMBOL_ALL");   
 545   2                              if(cFlag_On==1){
 546   3                                #if DISPLAY_20400047_EN > 0   
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 10  

 547   3                      Display.LCD_BUF[S_14]|=0x80;
 548   3                      Display.LCD_BUF[S_24]|=0x80;
 549   3                      Display.LCD_BUF[S_34]|=0x80;
 550   3                      Display.LCD_BUF[S_44]|=0x80;    
 551   3                              #else
                              Display.LCD_BUF[S_LB]|=0x80;
                              Display.LCD_BUF[S_KG]|=0x80;            
                              Display.LCD_BUF[S_NET]|=0x80;   
                    #endif                                    
 556   3                      Display.LCD_BUF[S_ZERO]|=0x80;
 557   3                      Display.LCD_BUF[S_Y]|=0x80;
 558   3                      Display.LCD_BUF[S_X]|=0x80;     
 559   3                                      
 560   3                              }
 561   2                              else{
 562   3                                      #if DISPLAY_20400047_EN > 0     
 563   3                      Display.LCD_BUF[S_14]&=0x7F;
 564   3                      Display.LCD_BUF[S_24]&=0x7F;
 565   3                      Display.LCD_BUF[S_34]&=0x7F;
 566   3                      Display.LCD_BUF[S_44]&=0x7F;    
 567   3                              #else           
                        Display.LCD_BUF[S_LB]&=0x7F;
                              Display.LCD_BUF[S_KG]&=0x7F;            
                              Display.LCD_BUF[S_NET]&=0x7F;   
                    #endif                                    
 572   3                      Display.LCD_BUF[S_ZERO]&=0x7F;
 573   3                      Display.LCD_BUF[S_Y]&=0x7F;
 574   3                      Display.LCD_BUF[S_X]&=0x7F;     
 575   3                              }
 576   2                              
 577   2                                      
 578   2                      break;
 579   2      
 580   2              }
 581   1              
 582   1      /*      if(cSymbol==SYMBOL_TARE){
 583   1              if(cFlag_On == 1)
 584   1                              vSend_String_Usart(&huart1,"  on\r\n ");
 585   1                              else
 586   1                              vSend_String_Usart(&huart1,"  off\r\n ");
 587   1                      }*/
 588   1              
 589   1              Display.mode=LCD_DATA;
 590   1              Display.addr=0;
 591   1              Display.counter=sizeof(Display.LCD_BUF);        
 592   1              LCD_GLASS_Update();
 593   1      }
 594          
 595          /**
 596                  ******************************************************************************
 597            * Objetivo: Mostrar en LCD numero con formato float.
 598            * Parametros entrada: Numero, numero de decimales, posicion en la LCD, e
 599                  *               indicacion de punto flotante.
 600                  * Parametros Salida: Ninguno.
 601            * Prerequisitos: 
 602            ***
 603          */
 604          
 605          
 606          
 607          
 608          
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 11  

 609          
 610          
 611          
 612          
 613          
 614          
 615          
 616          
 617          
 618          
 619          void LCD_GLASS_Float(float fNumber_To_LCD, char iNumber_Decimal, char cPosition_On_LCD){
 620   1              
 621   1              char strText_LCD[8] = {0,0,0,0,0,0,0,0};
 622   1              
 623   1      
 624   1              switch(iNumber_Decimal){
 625   2                      case 0:
 626   2                              if(cPosition_On_LCD == LCD_TOTAL){
 627   3                                      sprintf(strText_LCD, "%6.0lf", fNumber_To_LCD);
 628   3                              }else{
 629   3                                      sprintf(strText_LCD, "%5.0lf", fNumber_To_LCD);
 630   3                              }
 631   2                              break;
 632   2                      
 633   2                      case 1:
 634   2                              if(cPosition_On_LCD == LCD_TOTAL){
 635   3                                      sprintf(strText_LCD, "%7.1lf", fNumber_To_LCD);
 636   3                              }else{
 637   3                                      sprintf(strText_LCD, "%6.1lf", fNumber_To_LCD);
 638   3                              }
 639   2                              break;
 640   2                      
 641   2                      case 2:
 642   2                              if(cPosition_On_LCD == LCD_TOTAL){
 643   3                                      sprintf(strText_LCD, "%7.2lf", fNumber_To_LCD); 
 644   3                              }else{
 645   3                                      sprintf(strText_LCD, "%6.2lf", fNumber_To_LCD);
 646   3                              }
 647   2                              break;
 648   2                      
 649   2                      case 3:
 650   2                              if(cPosition_On_LCD == LCD_TOTAL){
 651   3                                      sprintf(strText_LCD, "%7.3lf", fNumber_To_LCD);
 652   3                              }else{
 653   3                                      sprintf(strText_LCD, "%6.3lf", fNumber_To_LCD);
 654   3                              }
 655   2                              break;
 656   2              }
 657   1              
 658   1              LCD_GLASS_String(strText_LCD, cPosition_On_LCD);
 659   1      }
 660          
 661          
 662          
 663          
 664          
 665          
 666          
 667          
 668          
 669          
 670          
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 12  

 671          
 672          
 673                  
 674          /**
 675                  ******************************************************************************
 676            * Objetivo: Mostrar en LCD texto.
 677            * Parametros entrada: Texo y posicion en la LCD.
 678                  * Parametros Salida: Ninguno.
 679            * Prerequisitos: 
 680            ***
 681          */
 682          
 683          void LCD_GLASS_String(char *pCaracter, char cPosition_On_LCD){
 684   1              char iIndex_Text = 5;
 685   1              char iPosicion_Decimal = 0;
 686   1              //char txt[30];
 687   1              /*vSend_String_USB("\r\n");     
 688   1              if(cPosition_On_LCD==LCD_TOTAL)   vSend_String_USB("LCD_TOTAL=  ");
 689   1              if(cPosition_On_LCD==LCD_PRECIO)        vSend_String_USB("LCD_PRECIO= ");
 690   1              if(cPosition_On_LCD==LCD_PESO)    vSend_String_USB("LCD_PESO=   ");     
 691   1              vSend_String_USB(pCaracter);vSend_String_USB("\r\n");   */
 692   1              
 693   1              /*if(cPosition_On_LCD==LCD_TOTAL)         vSend_String_Usart(&huart1,"LCD_TOTAL=  ");
 694   1              if(cPosition_On_LCD==LCD_PRECIO)        vSend_String_Usart(&huart1,"LCD_PRECIO= ");
 695   1              if(cPosition_On_LCD==LCD_PESO)    vSend_String_Usart(&huart1,"LCD_PESO=   ");   
 696   1              vSend_String_Usart(&huart1,pCaracter);vSend_String_Usart(&huart1,"\r\n");       
 697   1              */
 698   1      
 699   1              if(cPosition_On_LCD==LCD_TOTAL) {Display.LCD_BUF[P_TOTAL_2]&=0x7F;Display.LCD_BUF[P_TOTAL_1]&=0x7F;}
 700   1        if(cPosition_On_LCD==LCD_PRECIO){
 701   2              #if DISPLAY_20400047_EN > 0     
 702   2                              Display.LCD_BUF[P_PRECIO_3]&=0x7F;
 703   2              #endif
 704   2              Display.LCD_BUF[P_PRECIO_2]&=0x7F;Display.LCD_BUF[P_PRECIO_1]&=0x7F;}
 705   1              if(cPosition_On_LCD==LCD_PESO)  {Display.LCD_BUF[P_PESO_3]&=0x7F;Display.LCD_BUF[P_PESO_2]&=0x7F;Display.L
             -CD_BUF[P_PESO_1]&=0x7F;}              
 706   1      
 707   1              while(*(pCaracter) != 0){
 708   2                      
 709   2                      if(*(pCaracter) >= '0' && *(pCaracter) <= '9'){                 
 710   3                              LCD_SET_Char(cNumber_LCD[*(pCaracter)-'0'], cPosition_On_LCD, iIndex_Text--);                   
 711   3                      }
 712   2                      
 713   2                      if(*(pCaracter) == '-'){
 714   3                              LCD_SET_Char(cABC_LCD[26], cPosition_On_LCD, iIndex_Text--);                    
 715   3                      }
 716   2                      
 717   2                      if(*(pCaracter) == ' '){
 718   3                              LCD_SET_Char(0x0, cPosition_On_LCD, iIndex_Text);
 719   3                              iIndex_Text--;                  
 720   3                      }
 721   2                      
 722   2                      if(*(pCaracter) >= 'A' && *(pCaracter) <= 'Z'){
 723   3                              LCD_SET_Char(cABC_LCD[*(pCaracter)-'A'], cPosition_On_LCD, iIndex_Text);
 724   3                              iIndex_Text--;                  
 725   3                      }
 726   2                      
 727   2                      if(*(pCaracter) == '.'){
 728   3                              
 729   3                              //sprintf(txt,"PosDec= %d \r\n\r\n",iPosicion_Decimal);                         
 730   3                                      //vSend_String_Usart(&huart1,txt);              
 731   3                                      
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 13  

 732   3                              if(cPosition_On_LCD == LCD_PRECIO){     
 733   4               #if DISPLAY_20400047_EN > 0    
 734   4                                      if(iPosicion_Decimal == 2)
 735   4                                              Display.LCD_BUF[P_PRECIO_3]|=0x80;      
 736   4                     #endif                           
 737   4                                      if(iPosicion_Decimal == 3)
 738   4                                              Display.LCD_BUF[P_PRECIO_2]|=0x80;                              
 739   4                                      if(iPosicion_Decimal == 4)
 740   4                                              Display.LCD_BUF[P_PRECIO_1]|=0x80;                                                      
 741   4                              }
 742   3                              if(cPosition_On_LCD == LCD_PESO){                               
 743   4                                      if(iPosicion_Decimal == 2)
 744   4                                              Display.LCD_BUF[P_PESO_3]|=0x80;
 745   4                                      if(iPosicion_Decimal == 3)
 746   4                                              Display.LCD_BUF[P_PESO_2]|=0x80;
 747   4                                      if(iPosicion_Decimal == 4)
 748   4                                              Display.LCD_BUF[P_PESO_1]|=0x80;                                                        
 749   4                              }
 750   3                              if(cPosition_On_LCD == LCD_TOTAL){
 751   4                               #if DISPLAY_20400047_EN > 0    
 752   4                                      if(iPosicion_Decimal == 4)                                      
 753   4                                              Display.LCD_BUF[P_TOTAL_1]|=0x80;//sprintf(txt,"LCD_BUF[9]= d%d",Display.LCD_BUF[9]);                           
 754   4                                      if(iPosicion_Decimal == 3)
 755   4                                              Display.LCD_BUF[P_TOTAL_2]|=0x80;//vSend_String_Usart(&huart1,"CC ");
 756   4                               #else
                                              if(iPosicion_Decimal == 4)                                      
                                                      Display.LCD_BUF[P_TOTAL_2]|=0x80;//sprintf(txt,"LCD_BUF[9]= d%d",Display.LCD_BUF[9]);                           
                                              if(iPosicion_Decimal == 5)
                                                      Display.LCD_BUF[P_TOTAL_1]|=0x80;//vSend_String_Usart(&huart1,"CC ");                           
                                       #endif
 762   4                              }                                               
 763   3                      }
 764   2                      iPosicion_Decimal++;
 765   2                      pCaracter++;
 766   2              }
 767   1              
 768   1              Display.mode=LCD_DATA;
 769   1              Display.addr=0;
 770   1              Display.counter=sizeof(Display.LCD_BUF);        
 771   1              LCD_GLASS_Update();
 772   1      }
 773          
 774          void LCD_GLASS_Update(void){
 775   1              //char txt[10];int i;
 776   1              Display.mode=LCD_DATA;  
 777   1              /*for(i=0;i<16;i++){
 778   1                sprintf(txt, "%02x, ", Display.LCD_BUF[i]);
 779   1                      vSend_String_Usart(&huart1,txt);                                
 780   1              }
 781   1              vSend_String_Usart(&huart1," \r\n");    
 782   1              vSend_String_Usart(&huart1," \r\n");    */
 783   1              
 784   1              write_lcd(Display);//Write data to the RAM                      
 785   1      }
 786          /*
 787          
 788                a7 a6 a5 a4 a3 a2 a1 a0
 789          20400021
 790                   / /////A4/////
 791                   /              /
 792                  A0             A5
 793                  /               /
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/19/2022 14:46:15 PAGE 14  

 794                  /               /
 795                    /////A1//////
 796                  /               /
 797                  /               /
 798                  A2             A6
 799                  /               /
 800                  /               /
 801                   /////A3///////
 802                                           
 803                                           DISPLAY PC-HS
 804                   / /////A0/////
 805                   /              /
 806                  A1             A4
 807                  /               /
 808                  /               /
 809                    /////A5//////
 810                  /               /
 811                  /               /
 812                  A2             A6
 813                  /               /
 814                  /               /
 815                   /////A3///////
 816                                           
 817          */
 818          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1581    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =     58      40
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
