C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE DVR_LCD_SDI1621
OBJECT MODULE PLACED IN dvr_lcd_SDI1621.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE _display\dvr_lcd_SDI1621.c BROWSE DEBUG OBJECTEXTEND PRINT(.\dvr_lcd_SDI162
                    -1.lst) OBJECT(dvr_lcd_SDI1621.obj)

line level    source

   1          //Creado por Eriberto Romero Hernandez
   2          //Modificado en Sep 22 
   3          
   4          #include "./_display/dvr_lcd_SDI1621.h"
   5          
   6          #include <stdio.h>
   7          #include <string.h>
   8          
   9                  volatile SOLIDIC Display;
  10                  void write_lcd(SOLIDIC Display);
  11                  void LCD_GLASS_Update(void);
  12          
  13          #if DISPLAY_20400047_EN > 0     
  14          
  15          #define LCD_char_0 0x5F //      01011111        //0
  16          #define LCD_char_1 0x50         //      01010000        //1
  17          #define LCD_char_2 0x3D         //      00111101 #define LCD_char_0 //2
  18          #define LCD_char_3 0x79         //      01111001        //3
  19          #define LCD_char_4 0x72         //      01110010        //4
  20          #define LCD_char_5 0x6B         //      01101011 #define LCD_char_0 //5
  21          #define LCD_char_6 0x6F         //      01101111 #define LCD_char_0 //6
  22          #define LCD_char_7 0x51         //      01010001 #define LCD_char_0 //7
  23          #define LCD_char_8 0x7F         //      01111111 #define LCD_char_0 //8
  24          #define LCD_char_9 0X73//       01110011#define LCD_char_0 //9
  25          
  26          #define LCD_char_A 0x77 //      01110111        //A
  27          #define LCD_char_B 0x6E //      01101110        //b
  28          #define LCD_char_C 0x0F //      00001111        //C
  29          #define LCD_char_D 0x7C //      01111100        //d
  30          #define LCD_char_E 0x2F //      00101111 //E
  31          #define LCD_char_F 0x27 //      00100111        //F
  32          #define LCD_char_G 0x6F //      01101111        //G
  33          #define LCD_char_H 0x76 //      01110110        //H
  34          #define LCD_char_I 0x50 //      01010000        //I
  35          #define LCD_char_J 0x5C //      01011100        //J
  36          #define LCD_char_K 0x36 //      00110110        //K
  37          #define LCD_char_L 0x0E //      00001110        //L
  38          #define LCD_char_M 0x00 //      00000000        //M
  39          #define LCD_char_N 0x64 //      01100100        //n
  40          #define LCD_char_O 0x5F //      01011111        //O
  41          #define LCD_char_P 0x37 //      00110111        //P
  42          #define LCD_char_Q 0x73 //      01110011        //q
  43          #define LCD_char_R 0x24 //      00100100        //r
  44          #define LCD_char_S 0x6B //      01101011        //S
  45          #define LCD_char_T 0x2E //      00101110        //T
  46          #define LCD_char_U 0x5E //      01011110        //U
  47          #define LCD_char_V 0x4C //      01001100        //V
  48          #define LCD_char_W 0x00 //      00000000        //W
  49          #define LCD_char_X 0x00 //      00000000        //X
  50          #define LCD_char_Y 0x72 //      01110010        //Y
  51          #define LCD_char_Z 0x3D //      00111101        //Z
  52          #define LCD_char_Guion 0x20 //  00100000        //-
  53          
  54          #define S_ZERO      0
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 2   

  55          #define P_PESO_3    1
  56          #define P_PESO_2    2
  57          #define P_PESO_1    3
  58          #define S_TARE      4           
  59          #define S_14        5
  60          #define S_34        6
  61          #define P_TOTAL_2   7
  62          #define P_TOTAL_1   8           
  63          #define S_24        9
  64          #define S_44        10
  65          #define S_Y         11
  66          #define P_PRECIO_3  12
  67          #define P_PRECIO_2  13
  68          #define P_PRECIO_1  14
  69          #define S_X         15
  70                          
  71                  
  72          #else
              /*const unsigned char xdata cNumber_LCD[] = { 
                              0x7D, //        01111101,       //0
                              0x60,   //      01100000,       //1
                              0x3E,   //      00111110,               //2
                              0x7A,   //      01111010,       //3
                              0x63,   //      01100011,       //4
                              0x5B,   //      01011011,               //5
                              0x5F,   //      01011111,               //6
                              0x70,   //      01110000,               //7
                              0x7F,   //      01111111,               //8
                              0x7B};  //      01111011                //9
              
              const unsigned char xdata cABC_LCD[] = {
                              0x77,   //      01110111,       //A
                              0x4F,   //      01001111,       //b
                              0x1D,   //      00011101,       //C
                              0x6E,   //      01101110,       //d
                              0x1F,   //      00011111, //E
                              0x17,   //      00010111,       //F
                              0x5F,   //      01011111,       //G
                              0x67,   //      01100111,       //H
                              0x60,   //      01100000,       //I
                              0x6C,   //      01101000,       //J
                              0x27,   //      01100111,       //K
                              0x0D,   //      00001101,       //L
                              0x00,   //      01000110,       //M
                              0x46,   //      01000110,       //n
                              0x7D,   //      01111101,       //O
                              0x37,   //      00110111,       //P
                              0x73,   //      01110011,       //q
                              0x06,   //      00000110,       //R
                              0x5B,   //      01011011,       //S
                              0x0F,   //      00001111,       //T
                              0x6D,   //      01101101,       //U
                              0x4C,   //      01001100,       //V
                              0x00,   //      01001100,       //W
                              0x00,   //      00001000,       //X
                              0x27,   //      00100111,       //Y
                              0x3E,   //      00111110,       //Z
                              0x02};//        00000010        //-*/
              
              
              
              #define P_PESO_3    6
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 3   

              #define P_PESO_2    7
              #define P_PESO_1    8
              #define P_PRECIO_2  1
              #define P_PRECIO_1  2
              #define P_TOTAL_2   9
              #define P_TOTAL_1   3           
              #define S_ZERO      12
              #define S_X         14
              #define S_Y         15  
                              
              #define S_KG        11
              #define S_LB        10          
              #define S_NET       13
              
              #endif
 132          
 133                  // funci¨®n de retardo 10us
 134          void delay_35u(void){   
 135   1              unsigned char xdata j;
 136   1              for(j= 0;j<5;j++);
 137   1      }       
 138          
 139          //****************************************************
 140          // Controlador LCD 1621 bloque compilaci¨®n condicional ------ comenzar -------
 141          //****************************************************
 142          void lcd_unit_write(unsigned char d){
 143   1              unsigned char xdata i;
 144   1              for(i=0;i<8;i++){
 145   2                      if( ( d & 0x80 ) == 0 ) LCD_DATA_N = 0;
 146   2                      else LCD_DATA_N = 1;
 147   2                      LCD_WR_N = 0;   
 148   2                      delay_35u();    
 149   2          LCD_WR_N = 1;                       
 150   2                      delay_35u();            
 151   2                      d <<= 1;                
 152   2              }
 153   1      }
 154          
 155          
 156          
 157          void LCD_GLASS_Init(void){//int i,j,k;
 158   1              LCD_CS_N = 1;
 159   1              LCD_WR_N = 1;
 160   1              LCD_DATA_N = 1;
 161   1              delay_35u();
 162   1              delay_35u();    
 163   1              
 164   1              Display.mode=LCD_COMAND;
 165   1              
 166   1              Display.cmd=SYS_EN;
 167   1              write_lcd(Display);//Turn on system oscillator
 168   1              
 169   1              Display.cmd=LCD_ON;     
 170   1              write_lcd(Display);//Turn on LCD bias generator         
 171   1              
 172   1              Display.cmd=BIAS_4;     
 173   1              write_lcd(Display);//LCD 1/2 bias option
 174   1              
 175   1              Display.cmd=COM_4;      
 176   1              write_lcd(Display);//LCD 1/3 bias option 
 177   1                      
 178   1              Display.mode=LCD_DATA;
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 4   

 179   1      //      Display.addr=0;
 180   1      //      Display.counter=sizeof(Display.LCD_BUF);
 181   1              memset(Display.LCD_BUF, 0x00, sizeof(Display.LCD_BUF));
 182   1              write_lcd(Display);//Write data to the RAM 
 183   1      }
 184          
 185          
 186          
 187          // funci¨®n de escritura LCD
 188          // modo:
 189          // 0: Entrada de comando
 190          // 1: actualizar todas las ¨¢reas
 191          // cmd: comando de codificaci¨®n
 192          // ---- Nota: Mostrar la funci¨®n de la tecla de interrupci¨®n ET0 en la funci¨®n - (Cuando el programa no
             - necesita abrir la interrupci¨®n T0, preste especial atenci¨®n para evitar que la funci¨®n de pantalla abra accidentalme
             -nte la interrupci¨®n T0)
 193          void write_lcd(SOLIDIC Display){//char mode,unsigned char cmd,unsigned char addr,unsigned char counter)
 194   1              unsigned char xdata i=0;        
 195   1              unsigned char xdata addr=0;     
 196   1              
 197   1              //HAL_NVIC_DisableIRQ(TIM14_IRQn);
 198   1              
 199   1      /*      if(strTimer.cFLag_TimerF_On ==  1 && eAccionScale != scalePreOnDc){//contador autoapagado 15m
 200   1                      if(strTimer.iTimerF > 36){
 201   1                              strTimer.iTimerF-=35;
 202   1                      }
 203   1              }
 204   1              
 205   1              if(strTimer.cFLag_TimerI_On && srFlagScale.bSourceVoltage == SOURCE_BATTERY){ //contador apagado backlite
             - 15seg
 206   1                      if(strTimer.iTimerI > 36){
 207   1                              strTimer.iTimerI-=35;                   
 208   1                      }
 209   1              }*/
 210   1              
 211   1              LCD_CS_N = 1;
 212   1              LCD_WR_N = 1;
 213   1              LCD_DATA_N = 1; 
 214   1              delay_35u();            
 215   1              LCD_CS_N = 0;// LCD_DATA_N = 1;
 216   1              delay_35u();
 217   1              LCD_WR_N = 0;
 218   1              delay_35u();
 219   1              LCD_WR_N = 1;
 220   1              delay_35u();
 221   1              LCD_DATA_N = 0;
 222   1              LCD_WR_N = 0;
 223   1              delay_35u();
 224   1              LCD_WR_N = 1;
 225   1              delay_35u();
 226   1              if(Display.mode==0)
 227   1                      LCD_DATA_N = 0;
 228   1              else 
 229   1                      LCD_DATA_N = 1;
 230   1              LCD_WR_N = 0;
 231   1              delay_35u();
 232   1              LCD_WR_N = 1;
 233   1              delay_35u();
 234   1      
 235   1              if(Display.mode == 0){
 236   2                      lcd_unit_write(Display.cmd);            
 237   2                      LCD_WR_N = 0;
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 5   

 238   2                      delay_35u();
 239   2                      LCD_WR_N = 1;
 240   2                      delay_35u();
 241   2              }
 242   1              else 
 243   1              {               
 244   2                      addr = 0;
 245   2                      for(i=0;i<6;i++){       // Êý¾ÝÐ´ÈëÃüÁî,·¢ËÍÊ×µØÖ·  Comando de escritura de datos, enviar la primera direcci¨®
             -n
 246   3                              LCD_WR_N = 0;                   
 247   3                              if( (addr & 0x80) == 0 ) 
 248   3                                      LCD_DATA_N = 0;
 249   3                        else 
 250   3                                      LCD_DATA_N = 1;
 251   3                              delay_35u();
 252   3                              LCD_WR_N = 1;
 253   3                              delay_35u();
 254   3                              addr <<= 1;
 255   3                      }               
 256   2                      for(i=0;i<16;i++)       // Êý¾ÝÐ´ÈëÃüÁî,·¢ËÍÊý¾Ý  Comando de escritura de datos, enviar datos
 257   2                              lcd_unit_write(Display.LCD_BUF[15 - i]);                
 258   2              }
 259   1              LCD_CS_N = 1;
 260   1              LCD_DATA_N = 1;
 261   1              LCD_WR_N = 1;   
 262   1              delay_35u();
 263   1              
 264   1              //HAL_GPIO_WritePin(GPIOC, TARA_IN_Pin, GPIO_PIN_RESET);
 265   1              
 266   1              //HAL_NVIC_EnableIRQ(TIM14_IRQn);       
 267   1      }
 268          
 269          void LCD_GLASS_DeInit(void){    
 270   1              Display.mode=LCD_DATA;
 271   1      //      Display.addr=0;
 272   1      //      Display.counter=sizeof(Display.LCD_BUF);        
 273   1              
 274   1              memset(Display.LCD_BUF, 0x00, sizeof(Display.LCD_BUF));//InitLCDBuf(0);
 275   1              write_lcd(Display);//Write data to the RAM
 276   1              
 277   1              Display.mode=LCD_COMAND;
 278   1              
 279   1              Display.cmd=LCD_OFF;    
 280   1              write_lcd(Display);//Turn off LCD bias generator        
 281   1              
 282   1              Display.cmd=SYS_DIS;
 283   1              write_lcd(Display);//Turn off system oscillator
 284   1      
 285   1      }
 286          
 287          /*
 288          */
 289          void LCD_GLASS_Clear(void){     
 290   1              Display.mode=LCD_DATA;  
 291   1              memset(Display.LCD_BUF, 0x00, sizeof(Display.LCD_BUF));//InitLCDBuf(0);
 292   1              write_lcd(Display);//Write data to the RAM
 293   1      }
 294          
 295          /*
 296          */
 297          void LCD_GLASS_All_On(void){
 298   1              Display.mode=LCD_DATA;  
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 6   

 299   1              memset(Display.LCD_BUF, 0xFF, sizeof(Display.LCD_BUF));
 300   1              write_lcd(Display);     
 301   1      }
 302          
 303          
 304          
 305          void LCD_SET_Char(unsigned char cCaracter, unsigned char cPosition_On_LCD, unsigned char cPosition_Text)
 306          {
 307   1      unsigned char xdata i=0;
 308   1                      #if DISPLAY_20400047_EN > 0                     
 309   1                      if(cPosition_On_LCD==LCD_PESO)i=0;
 310   1                      if(cPosition_On_LCD==LCD_PRECIO)i=11;
 311   1                      if(cPosition_On_LCD==LCD_TOTAL) i=5;            
 312   1                      #else
                                if(cPosition_On_LCD==LCD_PESO)i=5;
                                if(cPosition_On_LCD==LCD_PRECIO)i=0;
                                if(cPosition_On_LCD==LCD_TOTAL) i=10;         
                              #endif
 317   1                      i+=(5-cPosition_Text);
 318   1                      Display.LCD_BUF[i]&=0x80;       
 319   1                Display.LCD_BUF[i]|=cCaracter;
 320   1              
 321   1      }
 322          
 323          
 324          void LCD_GLASS_Dot(unsigned char iNumber_Dot, unsigned char cPosition_On_LCD, unsigned char cFLag_On){
 325   1              
 326   1              switch(cPosition_On_LCD){
 327   2                      case LCD_PESO:
 328   2                              if(iNumber_Dot == 3){                         
 329   3                                      if(cFLag_On == 1)
 330   3                                        Display.LCD_BUF[P_PESO_3]|=0x80;
 331   3                          else
 332   3                                        Display.LCD_BUF[P_PESO_3]&=0x7F;
 333   3                              }
 334   2                              if(iNumber_Dot == 2){
 335   3              if(cFLag_On == 1)
 336   3                                        Display.LCD_BUF[P_PESO_2]|=0x80;
 337   3                          else
 338   3                                        Display.LCD_BUF[P_PESO_2]&=0x7F;
 339   3                      
 340   3                              }
 341   2                              if(iNumber_Dot == 1){
 342   3              if(cFLag_On == 1)
 343   3                                        Display.LCD_BUF[P_PESO_1]|=0x80;
 344   3                          else
 345   3                                        Display.LCD_BUF[P_PESO_1]&=0x7F;
 346   3                              }               
 347   2                              break;
 348   2                      case LCD_PRECIO:
 349   2                              #if DISPLAY_20400047_EN > 0     
 350   2                              if(iNumber_Dot == 3){
 351   3                if(cFLag_On == 1)
 352   3                                          Display.LCD_BUF[P_PRECIO_3]|=0x80;
 353   3                            else
 354   3                                          Display.LCD_BUF[P_PRECIO_3]&=0x7F;          
 355   3                                 }
 356   2                              #endif
 357   2                              if(iNumber_Dot == 2){
 358   3              if(cFLag_On == 1)
 359   3                                        Display.LCD_BUF[P_PRECIO_2]|=0x80;
 360   3                          else
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 7   

 361   3                                        Display.LCD_BUF[P_PRECIO_2]&=0x7F;            
 362   3                              }
 363   2                              if(iNumber_Dot == 1){
 364   3              if(cFLag_On == 1)
 365   3                                        Display.LCD_BUF[P_PRECIO_1]|=0x80;
 366   3                          else
 367   3                                        Display.LCD_BUF[P_PRECIO_1]&=0x7F;
 368   3                              }                       
 369   2                              break;
 370   2                              
 371   2                      case LCD_TOTAL:
 372   2                              if(iNumber_Dot == 2){
 373   3              if(cFLag_On == 1)
 374   3                                        Display.LCD_BUF[P_TOTAL_2]|=0x80;
 375   3                          else
 376   3                                        Display.LCD_BUF[P_TOTAL_2]&=0x7F;             
 377   3                              }
 378   2                              if(iNumber_Dot == 1){
 379   3              if(cFLag_On == 1)
 380   3                                        Display.LCD_BUF[P_TOTAL_1]|=0x80;
 381   3                          else
 382   3                                        Display.LCD_BUF[P_TOTAL_1]&=0x7F;
 383   3                              }
 384   2                      break;
 385   2              }
 386   1              
 387   1              LCD_GLASS_Update();
 388   1      }
 389          
 390          
 391          void LCD_GLASS_Symbols(unsigned char cSymbol, unsigned char cFlag_On){
 392   1              
 393   1              //if(cFlag_On!=0&&cFlag_On!=1)vSend_String_Usart(&huart1,"-------------ERROR------------\r\n");
 394   1      
 395   1              switch(cSymbol){        
 396   2                      #if DISPLAY_20400047_EN > 0     
 397   2                      
 398   2                      case 10:  //vSend_String_Usart(&huart1,"1/4 ");
 399   2                              if(cFlag_On == 1)
 400   2                                      Display.LCD_BUF[S_14]|=0x80;
 401   2                              else
 402   2                                      Display.LCD_BUF[S_14]&=0x7F;    
 403   2                              break;  
 404   2                              case 7: // vSend_String_Usart(&huart1,"2/4 ");
 405   2                                      if(cFlag_On == 1)
 406   2                                      Display.LCD_BUF[S_24]|=0x80;
 407   2                              else
 408   2                                      Display.LCD_BUF[S_24]&=0x7F;    
 409   2                              break;  
 410   2                              case 8:  //vSend_String_Usart(&huart1,"3/4");
 411   2                              if(cFlag_On == 1)
 412   2                                      Display.LCD_BUF[S_34]|=0x80;
 413   2                              else
 414   2                                      Display.LCD_BUF[S_34]&=0x7F;    
 415   2                              break;  
 416   2                              case 9:  //vSend_String_Usart(&huart1,"4/4");
 417   2                              if(cFlag_On == 1)
 418   2                                      Display.LCD_BUF[S_44]|=0x80;
 419   2                              else
 420   2                                      Display.LCD_BUF[S_44]&=0x7F;    
 421   2                              break;  
 422   2                              case SYMBOL_NET:  //vSend_String_Usart(&huart1,"SYMBOL_NET");
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 8   

 423   2                              if(cFlag_On == 1)
 424   2                                      Display.LCD_BUF[S_TARE]|=0x80;
 425   2                              else
 426   2                                      Display.LCD_BUF[S_TARE]&=0x7F;  
 427   2                              break;  
 428   2                      
 429   2          #else               
                              case SYMBOL_KG:                 //vSend_String_Usart(&huart1,"SYMBOL_KG");
                                      if(cFlag_On == 1)
                                              Display.LCD_BUF[S_KG]|=0x80;
                                      else
                                              Display.LCD_BUF[S_KG]&=0x7F;                    
                                      break;
                              case SYMBOL_LB:                 //vSend_String_Usart(&huart1,"SYMBOL_LB");
                                      if(cFlag_On == 1)
                                              Display.LCD_BUF[S_LB]|=0x80;
                                      else
                                              Display.LCD_BUF[S_LB]&=0x7F;
                                      break;  
                              case SYMBOL_NET:  //vSend_String_Usart(&huart1,"SYMBOL_NET");
                                      if(cFlag_On == 1)
                                              Display.LCD_BUF[S_NET]|=0x80;
                                      else
                                              Display.LCD_BUF[S_NET]&=0x7F;   
                                      break;          
                              #endif
 449   2                      
 450   2                              /*case SYMBOL_TARE:  vSend_String_Usart(&huart1,"SYMBOL_TARE\r\n");
 451   2                              if(cFlag_On == 1)
 452   2                                      Display.LCD_BUF[S_TARE]|=0x80;
 453   2                              else
 454   2                                      Display.LCD_BUF[S_TARE]&=0x7F;  
 455   2                              break;  */
 456   2                              
 457   2                              case SYMBOL_ZERO:  //vSend_String_Usart(&huart1,"SYMBOL_ZERO");
 458   2                              if(cFlag_On == 1)
 459   2                                      Display.LCD_BUF[S_ZERO]|=0x80;
 460   2                              else
 461   2                                      Display.LCD_BUF[S_ZERO]&=0x7F;  
 462   2                              break;          
 463   2                              
 464   2                              
 465   2                              
 466   2                              case SYMBOL_X:  //vSend_String_Usart(&huart1,"SYMBOL_X");
 467   2                              if(cFlag_On == 1)
 468   2                                      Display.LCD_BUF[S_X]|=0x80;
 469   2                              else
 470   2                                      Display.LCD_BUF[S_X]&=0x7F;     
 471   2                              break;  
 472   2                              
 473   2                              case SYMBOL_Y:  //vSend_String_Usart(&huart1,"SYMBOL_Y");
 474   2                              if(cFlag_On == 1)
 475   2                                      Display.LCD_BUF[S_Y]|=0x80;
 476   2                              else
 477   2                                      Display.LCD_BUF[S_Y]&=0x7F;     
 478   2                              break;          
 479   2                      
 480   2                                                              
 481   2                              
 482   2                      case SYMBOL_ALL:  //vSend_String_Usart(&huart1,"SYMBOL_ALL");   
 483   2                              if(cFlag_On==1){
 484   3                                #if DISPLAY_20400047_EN > 0   
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 9   

 485   3                      Display.LCD_BUF[S_14]|=0x80;
 486   3                      Display.LCD_BUF[S_24]|=0x80;
 487   3                      Display.LCD_BUF[S_34]|=0x80;
 488   3                      Display.LCD_BUF[S_44]|=0x80;    
 489   3                              #else
                              Display.LCD_BUF[S_LB]|=0x80;
                              Display.LCD_BUF[S_KG]|=0x80;            
                              Display.LCD_BUF[S_NET]|=0x80;   
                    #endif                                    
 494   3                      Display.LCD_BUF[S_ZERO]|=0x80;
 495   3                      Display.LCD_BUF[S_Y]|=0x80;
 496   3                      Display.LCD_BUF[S_X]|=0x80;     
 497   3                                      
 498   3                              }
 499   2                              else{
 500   3                                      #if DISPLAY_20400047_EN > 0     
 501   3                      Display.LCD_BUF[S_14]&=0x7F;
 502   3                      Display.LCD_BUF[S_24]&=0x7F;
 503   3                      Display.LCD_BUF[S_34]&=0x7F;
 504   3                      Display.LCD_BUF[S_44]&=0x7F;    
 505   3                              #else           
                        Display.LCD_BUF[S_LB]&=0x7F;
                              Display.LCD_BUF[S_KG]&=0x7F;            
                              Display.LCD_BUF[S_NET]&=0x7F;   
                    #endif                                    
 510   3                      Display.LCD_BUF[S_ZERO]&=0x7F;
 511   3                      Display.LCD_BUF[S_Y]&=0x7F;
 512   3                      Display.LCD_BUF[S_X]&=0x7F;     
 513   3                              }
 514   2                              
 515   2                                      
 516   2                      break;
 517   2      
 518   2              }
 519   1              
 520   1      /*      if(cSymbol==SYMBOL_TARE){
 521   1              if(cFlag_On == 1)
 522   1                              vSend_String_Usart(&huart1,"  on\r\n ");
 523   1                              else
 524   1                              vSend_String_Usart(&huart1,"  off\r\n ");
 525   1                      }*/
 526   1              
 527   1              Display.mode=LCD_DATA;
 528   1      //      Display.addr=0;
 529   1      //      Display.counter=sizeof(Display.LCD_BUF);        
 530   1              LCD_GLASS_Update();
 531   1      }
 532          
 533          
 534          /*
 535          funcion para convertir de flotante a string
 536          referencia:
 537          https://forum.mikroe.com/viewtopic.php?f=88&t=63473&start=0#p252984
 538          Primer Modificacion: Eriberto Romero Hdz. (27 09 22)
 539          Parametros:
 540          f= numero a convertir
 541          digits= numero de digitos del display torrey que ocupara el string
 542          p= numero de decimales
 543          txt= aqui se va poner el nuero en texto
 544          */
 545          const void nFloatToStr(float f, unsigned char digits, unsigned char p, unsigned char *txt) {
 546   1         unsigned long xdata r1;   
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 10  

 547   1         unsigned long xdata factor = 10;
 548   1         unsigned char xdata i = p, j = 0;
 549   1         unsigned char xdata sign=0;
 550   1         unsigned char xdata digit=0;
 551   1      
 552   1      if( f < 0 ){ sign=1; f*=-1;  } 
 553   1         while (i--)
 554   1            factor *= 10;
 555   1         r1 = ((unsigned long)(f * factor) + 5) / 10;
 556   1      
 557   1         do {
 558   2            txt[j++] = (r1 % 10) + '0';
 559   2            r1 /= 10;
 560   2                digit++;
 561   2      
 562   2            if (--p == 0)
 563   2               txt[j++] = '.';
 564   2      
 565   2              } while (r1 > 0 );
 566   1         
 567   1         if (txt[j - 1] == '.'){
 568   2            txt[j++] = '0';digit++;}
 569   1            
 570   1         if (sign){
 571   2            txt[j++] = '-';
 572   2                digit++;}
 573   1      
 574   1      
 575   1              while (digit < digits){
 576   2            txt[j++] = ' ';
 577   2                digit++;
 578   2              } 
 579   1      
 580   1      
 581   1         txt[j] = '\0';
 582   1      
 583   1         for (i = 0, j--; i < j; i++, j--)
 584   1           p = txt[i], txt[i] = txt[j], txt[j] = p;
 585   1      }
 586          
 587          /**
 588                  ******************************************************************************
 589            * Objetivo: Mostrar en LCD numero con formato float.
 590            * Parametros entrada: Numero, numero de decimales, posicion en la LCD, e
 591                  *               indicacion de punto flotante.
 592                  * Parametros Salida: Ninguno.
 593            * Prerequisitos: 
 594            ***
 595          */
 596          
 597          void LCD_GLASS_Float(float fNumber_To_LCD, unsigned char iNumber_Decimal, unsigned char cPosition_On_LCD) 
             -{
 598   1      unsigned char xdata strText_LCD[10];  
 599   1      
 600   1        if (iNumber_Decimal == 0) {
 601   2          if (cPosition_On_LCD == LCD_TOTAL) {
 602   3                nFloatToStr(fNumber_To_LCD,5,0,strText_LCD);//
 603   3                //sprintf(strText_LCD, "%6.0f", fNumber_To_LCD);//ok
 604   3          } else 
 605   2            nFloatToStr(fNumber_To_LCD,4,0,strText_LCD);//
 606   2                //sprintf(strText_LCD, "%5.0f", fNumber_To_LCD);//ok
 607   2          
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 11  

 608   2        }
 609   1        if (iNumber_Decimal == 1) {
 610   2          if (cPosition_On_LCD == LCD_TOTAL) {
 611   3            nFloatToStr(fNumber_To_LCD,6,1,strText_LCD);////
 612   3                //sprintf(strText_LCD, "%7.1f", fNumber_To_LCD);//no ok   sprintf(strText_LCD, "FLOAT");//no ok
 613   3          } else 
 614   2            nFloatToStr(fNumber_To_LCD,5,1,strText_LCD);//
 615   2                //sprintf(strText_LCD, "%6.1f", fNumber_To_LCD);//ok
 616   2          
 617   2        }
 618   1        if (iNumber_Decimal == 2) {
 619   2          if (cPosition_On_LCD == LCD_TOTAL) {
 620   3            nFloatToStr(fNumber_To_LCD,6,2,strText_LCD);//
 621   3                //sprintf(strText_LCD, "%7.2f", fNumber_To_LCD);//ok
 622   3          } else 
 623   2            nFloatToStr(fNumber_To_LCD,5,2,strText_LCD);//
 624   2                //sprintf(strText_LCD, "%6.2f", fNumber_To_LCD);//ok
 625   2          
 626   2        }
 627   1        if (iNumber_Decimal == 3) {
 628   2          if (cPosition_On_LCD == LCD_TOTAL) {
 629   3            nFloatToStr(fNumber_To_LCD,6,3,strText_LCD);//
 630   3                //sprintf(strText_LCD, "%7.3f", fNumber_To_LCD);//ok
 631   3          } else 
 632   2            nFloatToStr(fNumber_To_LCD,5,3,strText_LCD);//
 633   2                //sprintf(strText_LCD, "%6.3f", fNumber_To_LCD);//ok
 634   2          
 635   2        }
 636   1      
 637   1        //IWDG_KEY_REFRESH; 
 638   1        LCD_GLASS_String(strText_LCD, cPosition_On_LCD);
 639   1      }
 640          
 641          
 642          
 643          void LCD_GLASS_Float0(float fNumber_To_LCD, unsigned char iNumber_Decimal, unsigned char cPosition_On_LCD)
             - {
 644   1      unsigned char xdata strText_LCD[8];  
 645   1      
 646   1        if (iNumber_Decimal == 0) {
 647   2          if (cPosition_On_LCD == LCD_TOTAL) {
 648   3                //nFloatToStr(fNumber_To_LCD,5,0,strText_LCD);//
 649   3                sprintf(strText_LCD, "%6.0f", fNumber_To_LCD);//ok
 650   3          } else 
 651   2            //nFloatToStr(fNumber_To_LCD,4,0,strText_LCD);//
 652   2                sprintf(strText_LCD, "%5.0f", fNumber_To_LCD);//ok
 653   2          
 654   2        }
 655   1        if (iNumber_Decimal == 1) {
 656   2          if (cPosition_On_LCD == LCD_TOTAL) {
 657   3            //nFloatToStr(fNumber_To_LCD,6,1,strText_LCD);////
 658   3                sprintf(strText_LCD, "%7.1f", fNumber_To_LCD);//no ok   sprintf(strText_LCD, "FLOAT");//no ok
 659   3          } else 
 660   2            //nFloatToStr(fNumber_To_LCD,5,1,strText_LCD);//
 661   2                sprintf(strText_LCD, "%6.1f", fNumber_To_LCD);//ok
 662   2          
 663   2        }
 664   1        if (iNumber_Decimal == 2) {
 665   2          if (cPosition_On_LCD == LCD_TOTAL) {
 666   3            //nFloatToStr(fNumber_To_LCD,6,2,strText_LCD);//
 667   3                sprintf(strText_LCD, "%7.2f", fNumber_To_LCD);//ok
 668   3          } else 
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 12  

 669   2            //nFloatToStr(fNumber_To_LCD,5,2,strText_LCD);//
 670   2                sprintf(strText_LCD, "%6.2f", fNumber_To_LCD);//ok
 671   2          
 672   2        }
 673   1        if (iNumber_Decimal == 3) {
 674   2          if (cPosition_On_LCD == LCD_TOTAL) {
 675   3            //nFloatToStr(fNumber_To_LCD,6,3,strText_LCD);//
 676   3                sprintf(strText_LCD, "%7.3f", fNumber_To_LCD);//ok
 677   3          } else 
 678   2            //nFloatToStr(fNumber_To_LCD,5,3,strText_LCD);//
 679   2                sprintf(strText_LCD, "%6.3f", fNumber_To_LCD);//ok
 680   2          
 681   2        }
 682   1      
 683   1        //IWDG_KEY_REFRESH; 
 684   1        LCD_GLASS_String(strText_LCD, cPosition_On_LCD);
 685   1      }
 686          
 687          
 688          /**
 689                  ******************************************************************************
 690            * Objetivo: Mostrar en LCD texto.
 691            * Parametros entrada: Texo y posicion en la LCD.
 692                  * Parametros Salida: Ninguno.
 693            * Prerequisitos: 
 694            ***
 695          */
 696          unsigned char get_lcd_char(unsigned char c){
 697   1      
 698   1      if(c=='0')return LCD_char_0;
 699   1      if(c=='1')return LCD_char_1;
 700   1      if(c=='2')return LCD_char_2;
 701   1      if(c=='3')return LCD_char_3;
 702   1      if(c=='4')return LCD_char_4;
 703   1      if(c=='5')return LCD_char_5;
 704   1      if(c=='6')return LCD_char_6;
 705   1      if(c=='7')return LCD_char_7;
 706   1      if(c=='8')return LCD_char_8;
 707   1      if(c=='9')return LCD_char_9;
 708   1      
 709   1      if(c=='a'||c=='A')return LCD_char_A;
 710   1      if(c=='b'||c=='B')return LCD_char_B;
 711   1      if(c=='c'||c=='C')return LCD_char_C;
 712   1      if(c=='d'||c=='D')return LCD_char_D;
 713   1      if(c=='e'||c=='E')return LCD_char_E;
 714   1      if(c=='f'||c=='F')return LCD_char_F;
 715   1      if(c=='g'||c=='G')return LCD_char_G;
 716   1      if(c=='h'||c=='H')return LCD_char_H;
 717   1      if(c=='i'||c=='I')return LCD_char_I;
 718   1      if(c=='j'||c=='J')return LCD_char_J;
 719   1      if(c=='k'||c=='K')return LCD_char_K;
 720   1      if(c=='l'||c=='L')return LCD_char_L;
 721   1      if(c=='m'||c=='M')return LCD_char_M;
 722   1      if(c=='n'||c=='N')return LCD_char_N;
 723   1      //if(c=='ñ'||c=='Ñ')return LCD_char_Ñ;
 724   1      if(c=='o'||c=='O')return LCD_char_O;
 725   1      if(c=='p'||c=='P')return LCD_char_P;
 726   1      if(c=='q'||c=='Q')return LCD_char_Q;
 727   1      if(c=='r'||c=='R')return LCD_char_R;
 728   1      if(c=='s'||c=='S')return LCD_char_S;
 729   1      if(c=='t'||c=='T')return LCD_char_T;
 730   1      if(c=='u'||c=='U')return LCD_char_U;
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 13  

 731   1      if(c=='v'||c=='V')return LCD_char_V;
 732   1      if(c=='w'||c=='W')return LCD_char_W;
 733   1      if(c=='x'||c=='X')return LCD_char_X;
 734   1      if(c=='y'||c=='Y')return LCD_char_Y;
 735   1      if(c=='z'||c=='Z')return LCD_char_Z;
 736   1      if(c=='-'||c=='_')return LCD_char_Guion;
 737   1      if(c==' ')return 0x00;
 738   1      
 739   1      
 740   1      }
 741          
 742          void LCD_GLASS_String(unsigned char *pCaracter, unsigned char cPosition_On_LCD){
 743   1          unsigned char xdata iIndex_Text = 5;
 744   1              unsigned char xdata iPosicion_Decimal = 0;
 745   1              //char txt[30];
 746   1              /*vSend_String_USB("\r\n");     
 747   1              if(cPosition_On_LCD==LCD_TOTAL)   vSend_String_USB("LCD_TOTAL=  ");
 748   1              if(cPosition_On_LCD==LCD_PRECIO)        vSend_String_USB("LCD_PRECIO= ");
 749   1              if(cPosition_On_LCD==LCD_PESO)    vSend_String_USB("LCD_PESO=   ");     
 750   1              vSend_String_USB(pCaracter);vSend_String_USB("\r\n");   */
 751   1              
 752   1              /*if(cPosition_On_LCD==LCD_TOTAL)         vSend_String_Usart(&huart1,"LCD_TOTAL=  ");
 753   1              if(cPosition_On_LCD==LCD_PRECIO)        vSend_String_Usart(&huart1,"LCD_PRECIO= ");
 754   1              if(cPosition_On_LCD==LCD_PESO)    vSend_String_Usart(&huart1,"LCD_PESO=   ");   
 755   1              vSend_String_Usart(&huart1,pCaracter);vSend_String_Usart(&huart1,"\r\n");       
 756   1              */
 757   1      
 758   1              if(cPosition_On_LCD==LCD_TOTAL) {Display.LCD_BUF[P_TOTAL_2]&=0x7F;Display.LCD_BUF[P_TOTAL_1]&=0x7F;}
 759   1        if(cPosition_On_LCD==LCD_PRECIO){
 760   2              #if DISPLAY_20400047_EN > 0     
 761   2                              Display.LCD_BUF[P_PRECIO_3]&=0x7F;
 762   2              #endif
 763   2              Display.LCD_BUF[P_PRECIO_2]&=0x7F;Display.LCD_BUF[P_PRECIO_1]&=0x7F;}
 764   1              if(cPosition_On_LCD==LCD_PESO)  {Display.LCD_BUF[P_PESO_3]&=0x7F;Display.LCD_BUF[P_PESO_2]&=0x7F;Display.L
             -CD_BUF[P_PESO_1]&=0x7F;}              
 765   1      
 766   1              while(*(pCaracter) != 0){       
 767   2                      if(*(pCaracter) != '.')
 768   2                              LCD_SET_Char(  get_lcd_char(*(pCaracter))  , cPosition_On_LCD, iIndex_Text--);                          
 769   2                                              
 770   2                      if(*(pCaracter) == '.'){
 771   3                              
 772   3                              if(cPosition_On_LCD == LCD_PRECIO){     
 773   4               #if DISPLAY_20400047_EN > 0    
 774   4                                      if(iPosicion_Decimal == 2)
 775   4                                              Display.LCD_BUF[P_PRECIO_3]|=0x80;      
 776   4                     #endif                           
 777   4                                      if(iPosicion_Decimal == 3)
 778   4                                              Display.LCD_BUF[P_PRECIO_2]|=0x80;                              
 779   4                                      if(iPosicion_Decimal == 4)
 780   4                                              Display.LCD_BUF[P_PRECIO_1]|=0x80;                                                      
 781   4                              }
 782   3                              if(cPosition_On_LCD == LCD_PESO){                               
 783   4                                      if(iPosicion_Decimal == 2)
 784   4                                              Display.LCD_BUF[P_PESO_3]|=0x80;
 785   4                                      if(iPosicion_Decimal == 3)
 786   4                                              Display.LCD_BUF[P_PESO_2]|=0x80;
 787   4                                      if(iPosicion_Decimal == 4)
 788   4                                              Display.LCD_BUF[P_PESO_1]|=0x80;                                                        
 789   4                              }
 790   3                              if(cPosition_On_LCD == LCD_TOTAL){
 791   4                               #if DISPLAY_20400047_EN > 0    
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 14  

 792   4                                      if(iPosicion_Decimal == 4)                                      
 793   4                                              Display.LCD_BUF[P_TOTAL_1]|=0x80;//sprintf(txt,"LCD_BUF[9]= d%d",Display.LCD_BUF[9]);                           
 794   4                                      if(iPosicion_Decimal == 3)
 795   4                                              Display.LCD_BUF[P_TOTAL_2]|=0x80;//vSend_String_Usart(&huart1,"CC ");
 796   4                               #else
                                              if(iPosicion_Decimal == 4)                                      
                                                      Display.LCD_BUF[P_TOTAL_2]|=0x80;//sprintf(txt,"LCD_BUF[9]= d%d",Display.LCD_BUF[9]);                           
                                              if(iPosicion_Decimal == 5)
                                                      Display.LCD_BUF[P_TOTAL_1]|=0x80;//vSend_String_Usart(&huart1,"CC ");                           
                                       #endif
 802   4                              }                                               
 803   3                      }
 804   2                      iPosicion_Decimal++;
 805   2                      pCaracter++;
 806   2              }
 807   1              Display.mode=LCD_DATA;  
 808   1              LCD_GLASS_Update();
 809   1      }
 810          
 811          void LCD_GLASS_Update(void){
 812   1              //char txt[10];int i;
 813   1              Display.mode=LCD_DATA;  
 814   1              /*for(i=0;i<16;i++){
 815   1                sprintf(txt, "%02x, ", Display.LCD_BUF[i]);
 816   1                      vSend_String_Usart(&huart1,txt);                                
 817   1              }
 818   1              vSend_String_Usart(&huart1," \r\n");    
 819   1              vSend_String_Usart(&huart1," \r\n");    */
 820   1              
 821   1              write_lcd(Display);//Write data to the RAM                      
 822   1      }
 823          /*
 824          
 825                a7 a6 a5 a4 a3 a2 a1 a0
 826          20400021
 827                   / /////A4/////
 828                   /              /
 829                  A0             A5
 830                  /               /
 831                  /               /
 832                    /////A1//////
 833                  /               /
 834                  /               /
 835                  A2             A6
 836                  /               /
 837                  /               /
 838                   /////A3///////
 839                                           
 840                                           DISPLAY PC-HS
 841                   / /////A0/////
 842                   /              /
 843                  A1             A4
 844                  /               /
 845                  /               /
 846                    /////A5//////
 847                  /               /
 848                  /               /
 849                  A2             A6
 850                  /               /
 851                  /               /
 852                   /////A3///////
 853                                           
C51 COMPILER V7.50   DVR_LCD_SDI1621                                                       09/27/2022 18:44:10 PAGE 15  

 854          */
 855          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2374    ----
   CONSTANT SIZE    =     48    ----
   XDATA SIZE       =   ----      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18      42
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
