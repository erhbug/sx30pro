C51 COMPILER V7.50   DATA_NVM_5219_VC_DEC09_13                                             09/07/2022 10:22:32 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE DATA_NVM_5219_VC_DEC09_13
OBJECT MODULE PLACED IN data_nvm_5219_Vc_Dec09_13.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE _data_nvm\data_nvm_5219_Vc_Dec09_13.c BROWSE DEBUG OBJECTEXTEND PRINT(.\dat
                    -a_nvm_5219_Vc_Dec09_13.lst) OBJECT(data_nvm_5219_Vc_Dec09_13.obj)

line level    source

   1          //*************************************************************************//
   2          //* Name                                :   data_nvm_825.c
   3          //* Vision                              :       V-Jun20_13
   4          //* Project                             :   
   5          //* Function                    :   Solidic 电子称 非易失性数据 操作
   6          //* $Author                             :   superc
   7          //*
   8          //* Copyright 2012 by solidic
   9          //*
  10          //* Recode:
  11          //*                                             1: 2013-06-20  First Creat By Superc
  12          //*
  13          //*
  14          //*
  15          //*************************************************************************//
  16          
  17          #include <REG52.H>
  18          #include <absacc.h>
  19          #include <math.h>
  20          //***************************************************************************
  21          // -- 全部头文件 集中管理 ---- ，版本修改文件名会变动 ---  必须修改 这个文件
  22          //***************************************************************************
  23          #include "./_solidic/head_file_version.h"
  24          
  25          //****************************************************
  26          //-------------其他模块全局变量----------------------
  27          //----全局变量  :               //(头文件)
  28          //****************************************************
  29          
  30          //****************************************************
  31          //EEPROM接口函数
  32          //****************************************************
  33          /*
  34          //读取EEPROM中的一个字（4字节）；
  35          unsigned long nvm_data_read(unsigned int addr)
  36          {
  37                  unsigned char   i;
  38                  union ADpattern d;       //定义联合体,数据可以采用字节和字两种方式访问；
  39                  
  40                  for (i=0;i<4;i++)
  41                  {
  42                          d.b[i] = nvm_data_read_byte(addr);      
  43                          addr ++;        
  44                  }
  45                  return(d.w);
  46          }
  47          
  48          //往EEPROM中写入一个字（4字节）；
  49          void nvm_data_write(unsigned int addr, unsigned long in_data)
  50          {
  51                  unsigned char i;
  52                  union ADpattern d;
  53                  d.w = in_data;
  54          
C51 COMPILER V7.50   DATA_NVM_5219_VC_DEC09_13                                             09/07/2022 10:22:32 PAGE 2   

  55                  for (i=0;i<4;i++)
  56                  {
  57                          FLASH_ENA = 0x05;       //nvm_data_write_byte 函数中无这句话
  58                          nvm_data_write_byte(addr,d.b[i]);
  59                          addr ++;                
  60                  }
  61          }
  62          */
  63          
  64          //读取EEPROM中的一个字节；
  65          unsigned char nvm_data_read_byte(unsigned int addr)
  66          {
  67   1              unsigned char   i;
  68   1              i = CBYTE[addr];        
  69   1              return(i);
  70   1      }
  71          
  72          //往EEPROM中写入一个字节
  73          //调用前需要:
  74          //NRM_securty_a,NRM_securty_b
  75          //flash操作关闭总中断，操作完后会开启总中断(注意)
  76          void nvm_data_write_byte(unsigned int addr, unsigned char in_data)
  77          {
  78   1              union INTpattern flash_addr;
  79   1              bit ea_save;
  80   1              flash_addr.i = addr;
  81   1              ea_save  =  EA;            // Save EA
  82   1              EA = 0;
  83   1              //-- 准备地址和数据 --
  84   1              FLASH_ADDRH = flash_addr.b[0]; // point to the address you want to erase 
  85   1              FLASH_ADDRL = flash_addr.b[1]; 
  86   1              FLASH_DATA = in_data;
  87   1              //-- 状态清除 --
  88   1              FLASH_ENA = 0x00;
  89   1              FLASH_ENB = 0x00;
  90   1              FLASH_ENC = 0x00;
  91   1              //-- 通过安全检验后才能启动 Flash 操作 --
  92   1              if((NRM_securty_a == 0xaa)&&(NRM_securty_b == 0x55))
  93   1                      FLASH_CON = 0x03;       //状态清除，执行一次FLASH_CON，将安全状态复位
  94   1              _nop_();        //延时
  95   1              //-- 写安全码开启Flash操作许可 --               
  96   1              FLASH_ENA = 0x05;
  97   1              FLASH_ENB = 0x0a;
  98   1              FLASH_ENC = 0x09;
  99   1              //-- 通过安全检验后才能启动 Flash 操作 --
 100   1              if((NRM_securty_a == 0xaa)&&(NRM_securty_b == 0x55))
 101   1                      FLASH_CON = 0x03;
 102   1              //-- 清除安全码 --
 103   1              FLASH_ENA = 0x00;
 104   1              FLASH_ENB = 0x00;
 105   1              FLASH_ENC = 0x00;
 106   1              EA = ea_save;
 107   1      }
 108          
 109          //EEPROM BLOCK(1k) 擦除
 110          //addr = （0 - 31）* 1024 ,擦除对应的Block地址
 111          //调用前需要:
 112          //NRM_securty_a,NRM_securty_b
 113          //flash操作关闭总中断，操作完后会开启总中断(注意)
 114          void e2rom_erase(unsigned int addr)
 115          {
 116   1              union INTpattern flash_addr;
C51 COMPILER V7.50   DATA_NVM_5219_VC_DEC09_13                                             09/07/2022 10:22:32 PAGE 3   

 117   1              bit ea_save;
 118   1              flash_addr.i = addr;
 119   1              ea_save  =  EA;            // Save EA
 120   1              EA = 0;
 121   1              FLASH_ADDRH = flash_addr.b[0]; // point to the address you want to erase 
 122   1              FLASH_ADDRL = flash_addr.b[1]; 
 123   1              //-- 状态清除 --
 124   1              FLASH_ENA = 0x00;
 125   1              FLASH_ENB = 0x00;
 126   1              FLASH_ENC = 0x00;
 127   1              //-- 通过安全检验后才能启动 Flash 操作 --
 128   1              if((NRM_securty_a == 0xaa)&&(NRM_securty_b == 0x55))
 129   1                      FLASH_CON = 0x03;       //状态清除，执行一次FLASH_CON，将安全状态复位
 130   1              _nop_();
 131   1              //-- 写安全码开启Flash操作许可 --
 132   1              FLASH_ENA = 0x05;
 133   1              FLASH_ENB = 0x0a;
 134   1              FLASH_ENC = 0x09;
 135   1              //-- 通过安全检验后才能启动 Flash 操作 --
 136   1              if((NRM_securty_a == 0xaa)&&(NRM_securty_b == 0x55))
 137   1                      FLASH_CON = 0x0c;
 138   1              //-- 清除安全码 --
 139   1              FLASH_ENA = 0x00;
 140   1              FLASH_ENB = 0x00;
 141   1              FLASH_ENC = 0x00;
 142   1              EA = ea_save;   
 143   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    164    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
