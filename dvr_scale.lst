C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE DVR_SCALE
OBJECT MODULE PLACED IN dvr_scale.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE _scale\dvr_scale.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\dvr_scale.lst) O
                    -BJECT(dvr_scale.obj)

line level    source

   1          /* Includes ------------------------------------------------------------------*/
   2          #include <stdio.h>
   3          #include <math.h>
   4          #include <string.h>
   5          //#include "stm8l15x.h"
   6          //#include "stm8l15x_iwdg.h"
   7          //#include "main.h"
   8          //#include "dvr_lcd.h"
   9          //#include "dvr_def.h"
  10          //#include "dvr_e2prom.h"       
  11          //#include "dvr_HX712.h"
  12          //#include "dvr_keyboard.h"
  13          //#include "dvr_battery.h"
  14          //#include "dvr_inicio.h"
  15          
  16          #include "./_data_nvm/data_nvm_5219_Vc_Dec09_13.h"      
  17          #include "./_scale/dvr_def.h"
  18          #include "./_display/dvr_lcd_SDI1621.h"
  19          #include "./customer/keyboard.h"
  20          #include "./_weight/dvr_HX712.h"
  21          #include "./_scale/dvr_scale.h"
  22          #include "./_battery/dvr_battery.h"
  23          
  24          /*
  25          #define ADDRESS_SCALE_CONFIG_PAGE    ADDRESS_PAGE_27
  26          #define ADDRESS_QLTY_AND_CNTRS_PAGE  ADDRESS_PAGE_28
  27          #define ADDRESS_PLU                  ADDRESS_PAGE_29
  28          */
  29          
  30          /* --- Direcciones en la EEPROM de los valores */
  31          #define ADDR_SET_CALIBRATE                      ADDRESS_SCALE_CONFIG_PAGE + 0   /* 1 byte */
  32          #define ADDR_CAPACITY_CALI                      ADDRESS_SCALE_CONFIG_PAGE + 1   /* 4 byte */
  33          #define ADDR_POINT_ZERO                         ADDRESS_SCALE_CONFIG_PAGE + 5   /* 4 byte */
  34          #define ADDR_FACTOR_CALIBRATE       ADDRESS_SCALE_CONFIG_PAGE + 9       /* 4 byte */
  35          #define ADDR_LENGUAGE                           ADDRESS_SCALE_CONFIG_PAGE + 13  /* 1 byte */
  36          #define ADDR_UNITS                                      ADDRESS_SCALE_CONFIG_PAGE + 14  /* 1 byte */
  37          #define ADDR_CAPACITY                           ADDRESS_SCALE_CONFIG_PAGE + 15  /* 2 byte */
  38          #define ADDR_PORC_REF                           ADDRESS_SCALE_CONFIG_PAGE + 17  /* 2 byte */
  39          #define ADDR_DIVISION_MINIMA            ADDRESS_SCALE_CONFIG_PAGE + 19  /* 2 byte */
  40          #define ADDR_DECIMAL_TOTAL                      ADDRESS_SCALE_CONFIG_PAGE + 21  /* 1 byte */
  41          #define ADDR_REDONDEO_TOTAL             ADDRESS_SCALE_CONFIG_PAGE + 22  /* 1 byte */
  42          #define ADDR_REDONDEO_VENTA             ADDRESS_SCALE_CONFIG_PAGE + 23  /* 1 byte */
  43          #define ADDR_DECIMAL_PRECIO             ADDRESS_SCALE_CONFIG_PAGE + 24  /* 1 byte */
  44          #define ADDR_ZERO_TRACKING                      ADDRESS_SCALE_CONFIG_PAGE + 25  /* 1 byte */
  45          #define ADDR_FORMATO_IMPRESION      ADDRESS_SCALE_CONFIG_PAGE + 26      /* 1 byte */
  46          #define ADDR_MSG_UNLOAD                     ADDRESS_SCALE_CONFIG_PAGE + 27      /* 1 byte */
  47          #define ADDR_TIME_OFF                           ADDRESS_SCALE_CONFIG_PAGE + 28  /* 1 byte */
  48          #define ADDR_MODELO                                     ADDRESS_SCALE_CONFIG_PAGE + 29 /* 1 byte */
  49          #define ADDR_BACKLIGHT                          ADDRESS_SCALE_CONFIG_PAGE + 30 /* 1 byte */
  50          #define ADDR_MSGBAT                                     ADDRESS_SCALE_CONFIG_PAGE + 31 /* 1 byte */
  51          //#define ADDR_DEBUG                            ADDRESS_SCALE_CONFIG_PAGE + 43 /* 2 byte */
  52          #define ADDR_COUNT_RANGE                        ADDRESS_SCALE_CONFIG_PAGE + 32 /* 2 byte */
  53          #define ADDR_MONEDA                                     ADDRESS_SCALE_CONFIG_PAGE + 34 /* 1 byte */
  54          #define ADDR_DECIMAL_WEIGHT                     ADDRESS_SCALE_CONFIG_PAGE + 35  /* 2 bytes */
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 2   

  55          #define ADDR_TEMPERATURE                        ADDRESS_SCALE_CONFIG_PAGE + 37  /* 4 Bytes */
  56          #define ADDR_VOLT_BATT                          ADDRESS_SCALE_CONFIG_PAGE + 41  /* 4 Bytes */
  57          #define ADDR_VOLT_ADAP                          ADDRESS_SCALE_CONFIG_PAGE + 45  /* 4 Bytes */
  58          #define ADDR_SAVEBATT                           ADDRESS_SCALE_CONFIG_PAGE + 49  /* 1 byte */
  59          #define ADDR_DIVISION_MENOR                     ADDRESS_SCALE_CONFIG_PAGE + 50  /* 2 bytes */
  60          #define ADDR_MULTIRANGO                         ADDRESS_SCALE_CONFIG_PAGE + 52  /* 1 byte */
  61          #define ADDR_DIVISION_MENORMENOR    ADDRESS_SCALE_CONFIG_PAGE + 53      /* 2 bytes */
  62          
  63          #define ADDR_COUNTER_CALIBRATION    ADDRESS_QLTY_AND_CNTRS_PAGE + 0     /* 2 byte */
  64          #define ADDR_COUNTER_CONFIGURATION  ADDRESS_QLTY_AND_CNTRS_PAGE + 2     /* 2 byte */
  65          #define ADDR_COUNT_OVERLOAD                 ADDRESS_QLTY_AND_CNTRS_PAGE + 4  /* 2 bytes */
  66          #define ADDR_VALUE_OVERLOAD                 ADDRESS_QLTY_AND_CNTRS_PAGE + 6  /* 4 bytes */
  67          #define ADDR_ERRORBATT                      ADDRESS_QLTY_AND_CNTRS_PAGE + 10  /* 1 byte */
  68          #define ADDR_VENTA_TOTAL                    ADDRESS_QLTY_AND_CNTRS_PAGE + 11   /* 4 bytes */
  69          
  70          float fWeightScale = 0;                                                                 /* Contiene el valor del peso leido */
  71          float fWeightScaleBefore = 0;
  72          float fWeightLight = 0;
  73          struct Parameter stScaleParam;  /* Contiene los parametros de uso de la Bascula*/
  74          struct FlagScale srFlagScale;           /* Contiene las banderas del sistema */
  75          
  76          int iCounterZeroTracking = 0;
  77          
  78          extern int iCountFailRead;
  79          extern int iCountFailResponse;
  80          
  81          /* --- Prototype Function ----------------------------------------------------*/
  82          void vSaveParamScale(unsigned char cType_Parameter);
  83          void vCalibrate_Scale(void);
  84          void vWeight_Positive(void);
  85          void vWeight_Negative(void);
  86          unsigned char cProduct_Varios(void);
  87          //void vSend_Data_Serial(void);
  88          float fCuentasToPeso(float fCountADC);
  89          void vPrintZero(void);
  90          void vSend_Value(float fValue1, unsigned char uActive1, float fValue2, unsigned char uActive2, float fValu
             -e3, unsigned char uActive3);
  91          float fSleep_Run(void);
  92          
  93          /**
  94            ******************************************************************************
  95            * Objetivo: Asignar valores de parametros de la bascula.
  96            * Parametros entrada: Ninguno.
  97                  * Parametros Salida: Ninguno.
  98            * Prerequisitos: Modifica las variables globales de la estruct stScaleParam
  99            ******************************************************************************
 100            */
 101          void vReadParamScale(void){
 102   1              stScaleParam.fCapacityCali              = flash_read_float32(ADDR_CAPACITY_CALI);
 103   1              stScaleParam.fPointZeroCali             = flash_read_float32(ADDR_POINT_ZERO);
 104   1              stScaleParam.fFactorCalibrate = flash_read_float32(ADDR_FACTOR_CALIBRATE);
 105   1              stScaleParam.fValueTara                         = 0;
 106   1              
 107   1              stScaleParam.cMultirango        = flash_read_u8(ADDR_MULTIRANGO);
 108   1              stScaleParam.cLenguage                          = flash_read_u8(ADDR_LENGUAGE);
 109   1              stScaleParam.cUnits                                     = flash_read_u8(ADDR_UNITS);
 110   1              stScaleParam.cFormatoImpresion                          = flash_read_u8(ADDR_FORMATO_IMPRESION);
 111   1              stScaleParam.iCapacity                          =       flash_read_u16(ADDR_CAPACITY);
 112   1              stScaleParam.iLoadPorcRefer     = flash_read_u16(ADDR_PORC_REF);
 113   1              stScaleParam.iDivisionMinima    = flash_read_u16(ADDR_DIVISION_MINIMA);
 114   1              stScaleParam.iDivisionMenor     = flash_read_u16(ADDR_DIVISION_MENOR);
 115   1              stScaleParam.iDivisionMenorMenor        = flash_read_u16(ADDR_DIVISION_MENORMENOR);
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 3   

 116   1              stScaleParam.cPuntoDecimalTotal         = flash_read_u8(ADDR_DECIMAL_TOTAL);
 117   1              stScaleParam.cRedondeoCifraTotal        = flash_read_u8(ADDR_REDONDEO_TOTAL);
 118   1              stScaleParam.cBacklight         = flash_read_u8(ADDR_BACKLIGHT);
 119   1              
 120   1              if(stScaleParam.cRedondeoCifraTotal == 0){
 121   2                      stScaleParam.cValorRedondeoCifraTotal = 5;
 122   2              }else{
 123   2                      stScaleParam.cValorRedondeoCifraTotal = 1;
 124   2              }
 125   1              
 126   1              stScaleParam.cRedondeoCifraVentaTotal   = flash_read_u8(ADDR_REDONDEO_VENTA);
 127   1              
 128   1              if(stScaleParam.cRedondeoCifraVentaTotal == 0){
 129   2                      stScaleParam.cValorcRedondeoCifraVentaTotal = 5;
 130   2              }else{
 131   2                      stScaleParam.cValorcRedondeoCifraVentaTotal = 1;
 132   2              }
 133   1              
 134   1              stScaleParam.cPuntoDecimalPrecio                        = flash_read_u8(ADDR_DECIMAL_PRECIO);
 135   1              stScaleParam.cZeroTracking                                              = 0; //flash_read_u8(ADDR_ZERO_TRACKING);
 136   1              stScaleParam.cMsgUnload                                                         = flash_read_u8(ADDR_MSG_UNLOAD);
 137   1              stScaleParam.cTimeAutooff                                                       = flash_read_u8(ADDR_TIME_OFF);
 138   1              stScaleParam.cModeloBascula                                             = flash_read_u8(ADDR_MODELO);
 139   1                              
 140   1              stScaleParam.iCounter_Calibration       = flash_read_u16(ADDR_COUNTER_CALIBRATION);
 141   1              stScaleParam.iCounter_Configuration     = flash_read_u16(ADDR_COUNTER_CONFIGURATION);
 142   1              
 143   1              stScaleParam.cShowHighBat                                                       = flash_read_u8(ADDR_MSGBAT); 
 144   1              
 145   1      //      stScaleParam.iDebug                                                                     = flash_read_u16(ADDR_DEBUG);
 146   1      
 147   1              stScaleParam.cCountRange                                                        = flash_read_u8(ADDR_COUNT_RANGE);
 148   1              
 149   1              stScaleParam.cMoneda                                                                    = flash_read_u8(ADDR_MONEDA);
 150   1                      
 151   1              stScaleParam.iCountOverload                                             =       flash_read_u16(ADDR_COUNT_OVERLOAD);
 152   1              
 153   1              stScaleParam.fValueOverload                                             =       flash_read_float32(ADDR_VALUE_OVERLOAD);
 154   1              
 155   1              stScaleParam.cWeightDecimal                                     = flash_read_u8(ADDR_DECIMAL_WEIGHT);
 156   1              
 157   1              stScaleParam.cSaveBattery                                       = flash_read_u8(ADDR_SAVEBATT);
 158   1              
 159   1              srFlagScale.bShowErroBat                                                = flash_read_u8(ADDR_ERRORBATT);
 160   1              
 161   1              stScaleParam.fVenta_Total_Scale    = flash_read_float32(ADDR_VENTA_TOTAL);
 162   1      }
 163          
 164          /**
 165            ******************************************************************************
 166            * Objetivo: Guardar parametros en la E2PROM
 167            * Parametros entrada: Ninguno
 168                  * Parametros Salida: Ninguno
 169            ******************************************************************************
 170            */
 171          void vSaveParamScale(unsigned char cType_Parameter){
 172   1      
 173   1              /* Habilita la escritura/lectura en la EEPROM */
 174   1              NRM_securty_a = 0xaa;
 175   1              NRM_securty_b = 0x55;
 176   1      
 177   1              e2rom_erase(ADDRESS_PAGE_26);
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 4   

 178   1              e2rom_erase(ADDRESS_PAGE_27);
 179   1              e2rom_erase(ADDRESS_PAGE_28);
 180   1              e2rom_erase(ADDRESS_PAGE_29);
 181   1      
 182   1              switch(cType_Parameter){
 183   2      
 184   2                      case Parameter_Calibration:     //ok    
 185   2                              flash_write_u8(ADDR_SET_CALIBRATE, 1);
 186   2                              flash_write_float32(ADDR_CAPACITY_CALI, stScaleParam.fCapacityCali);
 187   2                              flash_write_float32(ADDR_POINT_ZERO, stScaleParam.fPointZeroCali);
 188   2                              flash_write_float32(ADDR_FACTOR_CALIBRATE, stScaleParam.fFactorCalibrate);
 189   2                              flash_write_u16(ADDR_COUNTER_CALIBRATION, stScaleParam.iCounter_Calibration);           
 190   2                              break;
 191   2                      
 192   2                      case Parameter_Count_Calibration:
 193   2                              flash_write_u16(ADDR_COUNTER_CALIBRATION, stScaleParam.iCounter_Calibration);           
 194   2                              break;
 195   2                              
 196   2                      case Parameter_Configuration:   
 197   2                              flash_write_u8(ADDR_LENGUAGE, stScaleParam.cLenguage);
 198   2                              flash_write_u8(ADDR_UNITS, stScaleParam.cUnits);                
 199   2                              flash_write_u16(ADDR_CAPACITY, stScaleParam.iCapacity);
 200   2                              flash_write_u16(ADDR_PORC_REF, stScaleParam.iLoadPorcRefer);
 201   2                              flash_write_u16(ADDR_DIVISION_MINIMA, stScaleParam.iDivisionMinima);    
 202   2                              flash_write_u16(ADDR_DIVISION_MENOR, stScaleParam.iDivisionMenor);
 203   2                              flash_write_u16(ADDR_DIVISION_MENORMENOR, stScaleParam.iDivisionMenorMenor);                    
 204   2                              flash_write_u8(ADDR_DECIMAL_TOTAL, stScaleParam.cPuntoDecimalTotal);
 205   2                              flash_write_u8(ADDR_REDONDEO_TOTAL, stScaleParam.cRedondeoCifraTotal);
 206   2                              flash_write_u8(ADDR_DECIMAL_PRECIO, stScaleParam.cPuntoDecimalPrecio);
 207   2                              flash_write_u8(ADDR_ZERO_TRACKING, stScaleParam.cZeroTracking);
 208   2                              flash_write_u8(ADDR_MSG_UNLOAD, stScaleParam.cMsgUnload);
 209   2                              flash_write_u8(ADDR_TIME_OFF, stScaleParam.cTimeAutooff);
 210   2                              flash_write_u8(ADDR_MODELO, stScaleParam.cModeloBascula);
 211   2                              flash_write_u8(ADDR_MSGBAT, stScaleParam.cShowHighBat);
 212   2                              flash_write_u16(ADDR_COUNTER_CONFIGURATION, stScaleParam.iCounter_Configuration);
 213   2                              flash_write_u8(ADDR_COUNT_RANGE, stScaleParam.cCountRange);
 214   2                              flash_write_u8(ADDR_MONEDA, stScaleParam.cMoneda);              
 215   2                              flash_write_u16(ADDR_COUNT_OVERLOAD, stScaleParam.iCountOverload);      
 216   2      
 217   2                              flash_write_float32(ADDR_VALUE_OVERLOAD, stScaleParam.fValueOverload);  
 218   2      
 219   2                              flash_write_u8(ADDR_DECIMAL_WEIGHT, stScaleParam.cWeightDecimal);       
 220   2                              flash_write_u8(ADDR_SAVEBATT, stScaleParam.cSaveBattery);                       
 221   2                              flash_write_u8(ADDR_ERRORBATT, srFlagScale.bShowErroBat);
 222   2                              flash_write_u8(ADDR_MULTIRANGO, stScaleParam.cMultirango);
 223   2                              flash_write_u8(ADDR_FORMATO_IMPRESION, stScaleParam.cFormatoImpresion);         
 224   2                              break;
 225   2              
 226   2                      case Parameter_Count_Configuration:
 227   2                              flash_write_u16(ADDR_COUNTER_CONFIGURATION, stScaleParam.iCounter_Configuration);
 228   2                              break;
 229   2                              
 230   2                      case Parameter_Point_Zero_Calibration:
 231   2                              flash_write_float32(ADDR_POINT_ZERO, stScaleParam.fPointZeroCali);                      
 232   2                              break;
 233   2                                      
 234   2              //      case Parameter_Debug:
 235   2              //              flash_write_u16(ADDR_DEBUG, stScaleParam.iDebug);
 236   2              //              break;
 237   2                                      
 238   2                      case Parameter_Overload:
 239   2                              flash_write_u16(ADDR_COUNT_OVERLOAD, stScaleParam.iCountOverload);              
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 5   

 240   2                              flash_write_float32(ADDR_VALUE_OVERLOAD, stScaleParam.fValueOverload);                                          
 241   2                              break;
 242   2                              
 243   2                      case Parameter_Voltages:
 244   2                              flash_write_float32(ADDR_VOLT_BATT, stScaleParam.fVoltage_Batt);
 245   2                              flash_write_float32(ADDR_VOLT_ADAP, stScaleParam.fVoltage_Adap);
 246   2                              break;
 247   2                      
 248   2              
 249   2                              
 250   2                      case Parameter_Register:
 251   2                              flash_write_float32(ADDR_VENTA_TOTAL, stScaleParam.fVenta_Total_Scale);
 252   2                              break;
 253   2      
 254   2                      case Parameter_Backlight:
 255   2                              flash_write_u8(ADDR_BACKLIGHT, stScaleParam.cBacklight);
 256   2                              break;
 257   2              }
 258   1              
 259   1              /* Deshabilita la escritura en la EEPROM */
 260   1              NRM_securty_a = 0x00;
 261   1              NRM_securty_b = 0x00;
 262   1      }
 263          
 264          /**
 265            ******************************************************************************
 266            * Objetivo: Encontrar un valor estable durante un tiempo X.
 267            * Parametros entrada: 
 268                  *               cSetCountBack -> Tiempo de muestreo (conteo descendente)
 269                  *               cShowCount -> Hacer visible el conteo.
 270                  *               cRunStable -> Llenar el filtro con el primer dato leido.
 271                  * Parametros Salida: Ninguno.
 272                  * Nota: Si durante la cuenta regrsiva el valor no esta dentro del rango
 273                  *       asignado, el conteo se reinicia.
 274            ******************************************************************************
 275            */
 276          float fStablePoint(unsigned char cSetCountBack, unsigned char cShowCount, unsigned char cRunStable){    
 277   1      
 278   1              unsigned char cCountReading = 0;                /* Contador de lecturas */
 279   1              unsigned char cNumber_Count = 0;
 280   1              long int cCountBack = cSetCountBack;                    /* Contador de regresion */
 281   1              float fActualWeightAdc=0;                                               /* Alamacena el peso actual valores adc */
 282   1              float fWeightAdc = 0;                                                           /* Almacena el valor referencia */
 283   1              float fLimitRange =  (float)stScaleParam.cCountRange;//5
 284   1              int i=0;
 285   1              
 286   1              cNumber_Count = 0;
 287   1              
 288   1              if(cRunStable == 0){
 289   2                      cNumber_Count = 2;
 290   2              }
 291   1              
 292   1              fWeightAdc = fRead_Adc(cRunStable);//delay_ms(100);     
 293   1              fWeightAdc = fRead_Adc(cRunStable);//delay_ms(100);
 294   1              fWeightAdc = fRead_Adc(cRunStable);//delay_ms(100);
 295   1              fWeightAdc = fRead_Adc(cRunStable);//delay_ms(100);
 296   1              
 297   1              while(cCountBack > -1){
 298   2                      
 299   2          vActionKey();
 300   2                      
 301   2                      /* Verifica si debe mostrar el contador en la LCD */
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 6   

 302   2                      if(cShowCount == 1){
 303   3                              if(cCountBack == 0){
 304   4                                      LCD_GLASS_String("00000", LCD_PESO);
 305   4                                      LCD_GLASS_String("00000", LCD_PRECIO);
 306   4                                      LCD_GLASS_String("000000", LCD_TOTAL);
 307   4                              }else{
 308   4                                      LCD_GLASS_Float(cCountBack*11111, 0, LCD_PESO);
 309   4                                      LCD_GLASS_Float(cCountBack*11111, 0, LCD_PRECIO);
 310   4                                      LCD_GLASS_Float(cCountBack*111111, 0, LCD_TOTAL);
 311   4                              }
 312   3                      }
 313   2              
 314   2                      fActualWeightAdc = fRead_Adc(cRunStable);
 315   2                      //delay_ms(100);
 316   2                      
 317   2                      /* Verica que el ultimo valor leido este dentro del rango del valor 
 318   2                              referencia */
 319   2                      if(fActualWeightAdc >= (fWeightAdc - fLimitRange) && 
 320   2                              fActualWeightAdc <= (fWeightAdc + fLimitRange)){
 321   3                                      cCountReading++;
 322   3                                      
 323   3                                      /* Si al completar 3 lecturas dentro del rango se decrementa el 
 324   3                                              contador */
 325   3                                      if(cCountReading > cNumber_Count){
 326   4                                              cCountBack--;
 327   4                                              cCountReading = 0;
 328   4                                      }                                       
 329   3                      }else{
 330   3                              /* Si el dato no esta dentro del rango, se toma una nueva referencia
 331   3                                      y se reinicia la cuenta regresiva */
 332   3                              if(cShowCount == 1){
 333   4                                      LCD_GLASS_Clear();
 334   4                                      LCD_GLASS_String("   UN", LCD_PRECIO);
 335   4                                      LCD_GLASS_String("STABLE", LCD_TOTAL);
 336   4                                      for(cCountBack=0; cCountBack<300; cCountBack++)delay_ms(10);
 337   4                              }
 338   3                              cCountReading = 0;
 339   3                              cCountBack = cSetCountBack;
 340   3                              fWeightAdc = fRead_Adc(cRunStable);
 341   3                              
 342   3                              if(cRunStable){
 343   4                                      srFlagScale.bFlagStable = 0;
 344   4                                      return (-100);
 345   4                              }
 346   3                      }
 347   2              }
 348   1              
 349   1              srFlagScale.bFlagStable = 1;
 350   1              return fWeightAdc;
 351   1      }
 352          
 353          /**
 354            ******************************************************************************
 355            * Objetivo: Calcular el numero de cuenta que se tomara como cero.
 356            * Parametros entrada: Ninguno.
 357                  * Parametros Salida: Ninguno.
 358            * Prerequisitos: Se usan las variables globales
 359                  *                       stScaleParam.cSetCalibrate, stScaleParam.fCapacityCali,  
 360                  *                       arDataDisplayLcd.
 361                  *       Modifica las variables globales:
 362                  *                       stScaleParam.fPointZero, arDataDisplayLcd.
 363            ******************************************************************************
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 7   

 364            */
 365          
 366          
 367            unsigned char cSetZeroPoint(void){    
 368   1      /*
 369   1      //////  unsigned char Value_Key_Press;
 370   1              float fWeightPlate = 0;         // Calcula el peso del plato en numero de cuentas 
 371   1              float fPointZero = 0;
 372   1                      
 373   1              fPointZero = fStablePoint(0, 0, 0);
 374   1              
 375   1              if(srFlagScale.bScaleOn == 0){
 376   1                      return 2;                               
 377   1              }
 378   1      
 379   1              //Se encuentra el peso actual del plato respecto al punto cero de calibracion 
 380   1              fWeightPlate = fPointZero - stScaleParam.fPointZeroCali;
 381   1              
 382   1              if(stScaleParam.cMsgUnload){
 383   1                      // Verifica los rangos para los distintos avisos 
 384   1                      if(((fWeightPlate > (stScaleParam.fCapacityCali * 0.20)) && (fWeightPlate < (stScaleParam.fCapacityCali 
             -* 0.50))) ||
 385   1                                      (fWeightPlate < (-1)*(stScaleParam.fCapacityCali * 0.20))){
 386   1                              
 387   1                              // Quita los simboloes de unidad de peso y Zero 
 388   1                              LCD_GLASS_Clear();
 389   1                              LCD_GLASS_String("  PLS", LCD_PESO);                            
 390   1                              LCD_GLASS_String("UNLOAD", LCD_TOTAL);  
 391   1                              
 392   1      ///////////                     //Auto_Off_On_5m;
 393   1                      
 394   1                              while(1){
 395   1                                      IWDG_KEY_REFRESH;
 396   1                                      if(srFlagScale.cWait_Time_Code || srFlagScale.bScaleOn == 0){
 397   1                                              return 2;                               
 398   1                                      }
 399   1                              }
 400   1                      }
 401   1              }
 402   1              
 403   1              if((fWeightPlate >= (stScaleParam.fCapacityCali * 0.50)) && fWeightPlate > 0){
 404   1                      
 405   1                      // Quita los simboloes de unidad de peso y Zero 
 406   1                      LCD_GLASS_Clear();      
 407   1                      LCD_GLASS_String("HELP ", LCD_PRECIO);  
 408   1              
 409   1                      //Auto_Off_On_5m;
 410   1                      
 411   1                      while(1){
 412   1                              IWDG_KEY_REFRESH;
 413   1                              if(srFlagScale.cWait_Time_Code || srFlagScale.bScaleOn == 0){
 414   1                                      return 2;                               
 415   1                              }
 416   1                      }
 417   1                                      
 418   1              }else{
 419   1                      stScaleParam.fPointZero = fPointZero;
 420   1              }
 421   1              
 422   1              
 423   1      */
 424   1      return 0;
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 8   

 425   1      }
 426          
 427          
 428          /**
 429            ******************************************************************************
 430            * Objetivo: Activar/Desactivar el uso de la Tara.
 431            * Parametros entrada: 
 432                  *               cActionTara -> Accion a ejecutar (ON) Activa la Tara, 
 433            *                                                                                                                                             (OFF) Desactiva la Tara.
 434                  * Parametros Salida: Retorna
 435                  *               (0) Para indicar que no se proceso la orden.
 436                  *               (1) Para indicar que se Desactivo o Activo la Tara.
 437            * Prerequisitos: Se usan las variables globales
 438                  *                       stScaleParam.fCapacityCali.
 439                  *       Modifica las variables globales:
 440                  *               stScaleParam.fPointZeroTara, stScaleParam.fPointZero.
 441            ******************************************************************************
 442            */
 443          void cOnOffModeTara(float fWeightTara){
 444   1              
 445   1      /*      float fAdcCountTara = 0; 
 446   1              float fLimite_Inf = 0;
 447   1              float fLimite_Sup = 0;
 448   1              float fWeightZero = 0;
 449   1              float AuxTara = 0;
 450   1              
 451   1              fWeightZero = fStablePoint(1, 0, 1);
 452   1              
 453   1              if(srFlagScale.bFlagStable == 1){
 454   1              
 455   1                      if(fWeightTara > 0){
 456   1                              if(srFlagScale.bTara == 0){     
 457   1                                      
 458   1                                      if(stScaleParam.cUnits == UNIT_LB){
 459   1                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= stScaleParam.iCapacity){
 460   1                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 461   1                                                      srFlagScale.bTara = 1;
 462   1                                              }
 463   1                                      }else{
 464   1                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= 9.999){
 465   1                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 466   1                                                      srFlagScale.bTara = 1;
 467   1                                              }
 468   1                                      }
 469   1                              }else{
 470   1                                      if(stScaleParam.cUnits == UNIT_LB){
 471   1                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= stScaleParam.iCapacity){
 472   1                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 473   1                                              }
 474   1                                      }else{
 475   1                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) < 9.999){
 476   1                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 477   1                                              }
 478   1                                      }
 479   1                              }
 480   1                      }else if(fWeightTara < 0){
 481   1                              
 482   1                              if(srFlagScale.bTara){
 483   1                                      fWeightTara *= (-1);
 484   1                                      
 485   1                                      if(stScaleParam.cMultirango == 1){
 486   1                                              if(stScaleParam.fValueTara <= stScaleParam.fCapacityCali*0.2){
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 9   

 487   1                                                              AuxTara = stScaleParam.fFactorCalibrate / stScaleParam.iDivisionMinima;
 488   1                                                              AuxTara *= stScaleParam.iDivisionMenor;
 489   1                                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*AuxTara);
 490   1                                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*AuxTara);
 491   1                                                      }else{
 492   1                                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*stScaleParam.fFactorCalibrate);
 493   1                                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*stScaleParam.fFactorCalibrate);
 494   1                                                      }
 495   1                                      }else{
 496   1                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*stScaleParam.fFactorCalibrate);
 497   1                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*stScaleParam.fFactorCalibrate);
 498   1                                      }
 499   1                                              
 500   1                                      if((fWeightTara >= fLimite_Inf) && (fWeightTara <= fLimite_Sup)){
 501   1                                              LCD_GLASS_Symbols(SYMBOL_NET, 0);
 502   1                                              stScaleParam.fValueTara = 0;
 503   1                                              srFlagScale.bTara = 0;
 504   1                                              stScaleParam.fPointZero = stScaleParam.fWeightScaleCount;
 505   1                                              fFilter_Averaging(fWeightZero, 1);      //Ingresa el dato al filtro 
 506   1                                      }
 507   1                              }
 508   1                      }
 509   1                      
 510   1              }*/
 511   1      }
*** WARNING C280 IN LINE 443 OF _SCALE\DVR_SCALE.C: 'fWeightTara': unreferenced local variable
 512          
 513          /**
 514            ******************************************************************************
 515            * Objetivo: Establecer el punto Zero
 516            * Parametros entrada: Ninguno
 517                  * Parametros Salida: Retorna
 518            ******************************************************************************
 519            */
 520          void vSetZero(void){
 521   1              float fWeightZero = 0;
 522   1              
 523   1              /* Verifica si el peso es estable para volver cero */
 524   1              fWeightZero = fStablePoint(1, 0, 1);
 525   1                      
 526   1              if(srFlagScale.bFlagStable == 1){               
 527   2                      stScaleParam.fPointZero = fWeightZero;
 528   2              }
 529   1      }
 530          
 531          /**
 532            ******************************************************************************
 533            * Objetivo: Establecer el punto Zero dinamico
 534            * Parametros entrada: Ninguno
 535                  * Parametros Salida: Ninguno
 536            ******************************************************************************
 537            */
 538          void vGetZeroTracking(float fActualWeightScale){
 539   1      /*      float fValor_Limite = 0;
 540   1              
 541   1              
 542   1              if(stScaleParam.cMultirango == 1){
 543   1                      fValor_Limite = stScaleParam.fFactorCalibrate/stScaleParam.iDivisionMinima;
 544   1                      fValor_Limite *= stScaleParam.iDivisionMenorMenor;
 545   1              }else   
 546   1                      fValor_Limite = stScaleParam.fFactorCalibrate;
 547   1              
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 10  

 548   1              fValor_Limite /= 2; 
 549   1              
 550   1              if(fValor_Limite < 0){
 551   1                      fValor_Limite *= (-1);
 552   1              }
 553   1              
 554   1              if(fActualWeightScale > (stScaleParam.fPointZero - fValor_Limite) &&
 555   1                      fActualWeightScale < (stScaleParam.fPointZero + fValor_Limite)){
 556   1                      
 557   1                      iCounterZeroTracking++;
 558   1                      if(iCounterZeroTracking >=15){
 559   1                              stScaleParam.fPointZero = fActualWeightScale;
 560   1                      }
 561   1              }else{
 562   1                      iCounterZeroTracking = 0;
 563   1              }*/
 564   1      }
*** WARNING C280 IN LINE 538 OF _SCALE\DVR_SCALE.C: 'fActualWeightScale': unreferenced local variable
 565          
 566          /**
 567            ******************************************************************************
 568            * Objetivo: Ejecutar el proceso de calibracion de la bascula 
 569            * Parametros entrada:  
 570                  * Parametros Salida:
 571            * Prerequisitos: 
 572            ******************************************************************************
 573            */
 574          void vCalibrate_Scale(void){
 575   1                    float xdata fAux_Value = 0;
 576   1                    float xdata fAuxCountAdcInicial = 0;
 577   1                    float xdata fAuxCountAdcFinal = 0;
 578   1                    float xdata fAuxCountDif = 0;
 579   1                    
 580   1                    stScaleParam.iCounter_Calibration++;  /* Aumenta el contador de calibraciones */ 
 581   1                    vSaveParamScale(Parameter_Calibration);                                                     
             -                                         /*Almacena los parametros en la E2prom*/
 582   1                                  
 583   1                    LCD_GLASS_Clear();
 584   1      #if DISPLAY_20400047_EN > 0
 585   1        LCD_GLASS_String("PRESS", LCD_PESO);
 586   1                    LCD_GLASS_String("REF 0", LCD_TOTAL);
 587   1                    LCD_GLASS_String("C", LCD_PRECIO);
 588   1      #else     
                LCD_GLASS_String("PRESS", LCD_PRECIO);
                            LCD_GLASS_String("REF 0", LCD_PESO);
                            LCD_GLASS_String("C", LCD_TOTAL);
              #endif
 593   1              
 594   1                    /* Espera a que se oprima 'C' para continuar */
 595   1                    Key=0;while(Key!= KEY_C)key_scan();
 596   1                                Key=0;while(Key== KEY_C)key_scan();
 597   1                    delay_ms(500);            
 598   1      
 599   1                    /* Solicita la referencia de zero */
 600   1                    stScaleParam.fPointZeroCali = fStablePoint(5, 1, 0);
 601   1                                LCD_GLASS_Float(stScaleParam.fPointZeroCali, 2, LCD_TOTAL);delay_ms(5000);
 602   1                    
 603   1                    fAuxCountAdcInicial = stScaleParam.fPointZeroCali;
 604   1                                //borrar  //CCC  
 605   1      
 606   1                    LCD_GLASS_Clear();
 607   1      #if DISPLAY_20400047_EN > 0
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 11  

 608   1                    LCD_GLASS_String("PRESS", LCD_PESO);
 609   1                    LCD_GLASS_String(" LOAD", LCD_TOTAL);
 610   1                    LCD_GLASS_String("C   ", LCD_PRECIO);
 611   1      #else
                            LCD_GLASS_String("PRESS", LCD_PRECIO);
                            LCD_GLASS_String(" LOAD", LCD_PESO);
                            LCD_GLASS_String("C     ", LCD_TOTAL);
              #endif
 616   1      
 617   1       /* Espera a que se oprima 'C' para continuar */
 618   1                    Key=0;while(Key!= KEY_C)key_scan();
 619   1      
 620   1                    stScaleParam.fCapacityCali = fStablePoint(5, 1, 0);
 621   1                                LCD_GLASS_Float(stScaleParam.fCapacityCali, 2, LCD_TOTAL);delay_ms(5000);
 622   1                   
 623   1                    
 624   1                    fAuxCountAdcFinal = stScaleParam.fCapacityCali;
 625   1                    
 626   1                    fAuxCountDif = (fAuxCountAdcFinal - fAuxCountAdcInicial);
 627   1      
 628   1                                      LCD_GLASS_Float(fAuxCountDif, 2, LCD_TOTAL);delay_ms(5000);
 629   1      
 630   1                    fAuxCountDif    *= (100/stScaleParam.iLoadPorcRefer);
 631   1                    
 632   1                    stScaleParam.fCapacityCali -= stScaleParam.fPointZeroCali;
 633   1                    stScaleParam.fCapacityCali *= (100/stScaleParam.iLoadPorcRefer);
 634   1                    
 635   1                    stScaleParam.fFactorCalibrate = (float)(stScaleParam.fCapacityCali);
 636   1                    fAux_Value = (float)(stScaleParam.iCapacity);
 637   1                    fAux_Value *= pow(10,(int)stScaleParam.cWeightDecimal);
 638   1                    fAux_Value = (float)(fAux_Value)/(float)(stScaleParam.iDivisionMinima);
 639   1                    stScaleParam.fFactorCalibrate /= fAux_Value;
 640   1                    
 641   1                    if(stScaleParam.fCapacityCali < 0){
 642   2                                  stScaleParam.fCapacityCali *= (-1);
 643   2                    }
 644   1      
 645   1                    LCD_GLASS_Clear();     
 646   1      #if DISPLAY_20400047_EN > 0
 647   1                    LCD_GLASS_String("FACTO", LCD_PESO);
 648   1                                LCD_GLASS_Float(stScaleParam.fFactorCalibrate, 2, LCD_TOTAL);
 649   1                                LCD_GLASS_String("R", LCD_TOTAL);
 650   1                    LCD_GLASS_Dot(2, LCD_TOTAL, 1);
 651   1                    LCD_GLASS_String("  END", LCD_PRECIO);          
 652   1      #else
                            LCD_GLASS_String("  END", LCD_PESO);
                            LCD_GLASS_Float(stScaleParam.fFactorCalibrate, 2, LCD_TOTAL);     
                                        LCD_GLASS_String("R", LCD_TOTAL);
                            LCD_GLASS_Dot(2, LCD_TOTAL, 1);
                            LCD_GLASS_String("FACTO", LCD_PRECIO);
              #endif
 659   1      
 660   1      
 661   1      
 662   1      
 663   1      ////////////////////////////////////////////////////////////////////////////              
 664   1                    /*Almacena los parametros en la E2prom*/       
 665   1                    vSaveParamScale(Parameter_Calibration);                                        
 666   1                    
 667   1      ///////////CCCCC/////////////CCCCC/////////////CCCCC/////////////CCCCC/////////////CCCCC//              vS
             -et_Volts_System();    
 668   1                    vSaveParamScale(Parameter_Voltages);
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 12  

 669   1                    
 670   1      ///////////CCCCC//BORRAR DE LA ESTRUCTURA ///////////////////////////////////           stScaleParam.fTemp
             -erature = fGet_Temp_Amb_Micro();
 671   1      //              vSaveParamScale(Parameter_Temperature);
 672   1      
 673   1          vSound_Saved_Param();
 674   1                    vSound_Saved_Param();
 675   1                    
 676   1                    //strTimer.cFLag_TimerE_Start = 1;
 677   1                   // strTimer.cFLag_TimerE_End = 0;
 678   1                    
 679   1                    //while(!strTimer.cFLag_TimerE_End)key_scan();
 680   1                                delay_ms(5000);
 681   1      
 682   1                                //Key=0;while(Key!= KEY_C)key_scan();
 683   1                    
 684   1                    LCD_GLASS_Clear();
 685   1      }
 686          
 687          
 688          /**
 689            ******************************************************************************
 690            * Objetivo: Configurar valores por default.
 691            * Parametros entrada:  
 692                  * Parametros Salida:
 693            * Prerequisitos: 
 694            ******************************************************************************
 695            */
 696          void vPreConfiguration(unsigned char cPreConfiguration){
 697   1              
 698   1      //      enum    digi_key Value_Key_Press;
 699   1              unsigned char cIndex = 0;
 700   1              
 701   1      //      strTimer.cFLag_TimerD_Start = 1;
 702   1              
 703   1              LCD_GLASS_Clear();
 704   1              
 705   1              stScaleParam.cMultirango = 1;
 706   1              stScaleParam.cLenguage = ESPANOL;
 707   1              
 708   1              if(cPreConfiguration == PreConfig15KG){
 709   2                      stScaleParam.iCapacity = 15;
 710   2                      stScaleParam.iDivisionMinima = 5;
 711   2                      stScaleParam.iDivisionMenor = 2;
 712   2                      stScaleParam.iDivisionMenorMenor = 1;
 713   2                      stScaleParam.cWeightDecimal = 3;
 714   2                      stScaleParam.cUnits = UNIT_KG;
 715   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 716   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 717   2              }else if(cPreConfiguration == PreConfig20KG){
 718   2                      stScaleParam.iCapacity = 20;
 719   2                      stScaleParam.iDivisionMinima = 5;
 720   2                      stScaleParam.iDivisionMenor = 2;
 721   2                      stScaleParam.iDivisionMenorMenor = 1;
 722   2                      stScaleParam.cWeightDecimal = 3;
 723   2                      stScaleParam.cUnits = UNIT_KG;
 724   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 725   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 726   2              }else if(cPreConfiguration == PreConfig30KG){
 727   2                      stScaleParam.iCapacity = 30;
 728   2                      stScaleParam.iDivisionMinima = 10;
 729   2                      stScaleParam.iDivisionMenor = 5;
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 13  

 730   2                      stScaleParam.iDivisionMenorMenor = 2;
 731   2                      stScaleParam.cWeightDecimal = 3;
 732   2                      stScaleParam.cUnits = UNIT_KG;
 733   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 734   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 735   2              }else if(cPreConfiguration == PreConfig31KG){
 736   2                      stScaleParam.iCapacity = 30;
 737   2                      stScaleParam.iDivisionMinima = 5;
 738   2                      stScaleParam.iDivisionMenor = 2;
 739   2                      stScaleParam.iDivisionMenorMenor = 1;
 740   2                      stScaleParam.cWeightDecimal = 3;
 741   2                      stScaleParam.cUnits = UNIT_KG;
 742   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 743   2                      stScaleParam.cMoneda = MONEDA_PESOS;            
 744   2              }else if(cPreConfiguration == PreConfig32KG){
 745   2                      stScaleParam.iCapacity = 30;
 746   2                      stScaleParam.iDivisionMinima = 2;
 747   2                      stScaleParam.iDivisionMenor = 2;
 748   2                      stScaleParam.iDivisionMenorMenor = 2;
 749   2                      stScaleParam.cMultirango = 0;
 750   2                      stScaleParam.cWeightDecimal = 3;
 751   2                      stScaleParam.cUnits = UNIT_KG;
 752   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 753   2                      stScaleParam.cMoneda = MONEDA_PESOS;            
 754   2              }else if(cPreConfiguration == PreConfig40KG){
 755   2                      stScaleParam.iCapacity = 40;
 756   2                      stScaleParam.iDivisionMinima = 10;
 757   2                      stScaleParam.iDivisionMenor = 5;
 758   2                      stScaleParam.iDivisionMenorMenor = 2;
 759   2                      stScaleParam.cWeightDecimal = 3;
 760   2                      stScaleParam.cUnits = UNIT_KG;
 761   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 762   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 763   2              }else if(cPreConfiguration == PreConfig60LB){
 764   2                      stScaleParam.iCapacity = 60;
 765   2                      stScaleParam.iDivisionMinima = 2;
 766   2                      stScaleParam.cWeightDecimal = 2;
 767   2                      stScaleParam.cUnits = UNIT_LB;
 768   2                      stScaleParam.cLenguage = ENGLISH;
 769   2                      LCD_GLASS_Symbols(SYMBOL_LB, 1);
 770   2                      stScaleParam.cMoneda = MONEDA_DLLS;
 771   2                      stScaleParam.cMultirango = 0;
 772   2              }
 773   1              
 774   1              LCD_GLASS_Float(stScaleParam.iCapacity, stScaleParam.cWeightDecimal, LCD_PESO);
 775   1              
 776   1              stScaleParam.iLoadPorcRefer = 100;
 777   1              stScaleParam.cPuntoDecimalTotal = 2;
 778   1              stScaleParam.cRedondeoCifraTotal = 1;
 779   1              stScaleParam.cPuntoDecimalPrecio = 3;
 780   1              stScaleParam.cValorcRedondeoCifraVentaTotal = 0;
 781   1              stScaleParam.cZeroTracking = 1;
 782   1              stScaleParam.cMsgUnload = 1;
 783   1              stScaleParam.cTimeAutooff = 1;
 784   1              stScaleParam.cShowHighBat = 1;
 785   1              stScaleParam.cModeIncDiv = 0;
 786   1              stScaleParam.cCountRange = 5;
 787   1              stScaleParam.iCountOverload = 0;                
 788   1              stScaleParam.fValueOverload = 0;
 789   1              stScaleParam.cSaveBattery       = 0;
 790   1        stScaleParam.cFormatoImpresion = 2; 
 791   1              stScaleParam.cTypeBeeper = 0;
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 14  

 792   1              
 793   1              stScaleParam.fVoltage_Batt = 0;
 794   1              stScaleParam.fVoltage_Adap = 0;
 795   1              
 796   1              stScaleParam.fCapacityCali = 0;
 797   1              stScaleParam.fPointZeroCali = 0;
 798   1              stScaleParam.fFactorCalibrate = 0;
 799   1              srFlagScale.bShowErroBat = 1;
 800   1      
 801   1              
 802   1              stScaleParam.fVenta_Total_Scale = 0;
 803   1              stScaleParam.iCounter_Calibration = 0;
 804   1              stScaleParam.iCounter_Configuration = 0;
 805   1      
 806   1              strTimer.iTimerE=1;
 807   1              Key_scan();
*** WARNING C206 IN LINE 807 OF _SCALE\DVR_SCALE.C: 'Key_scan': missing function-prototype
 808   1              
 809   1              /* Espera a que se oprima la tecla 'MEM' o que pase el tiempo de 5 seg  */
 810   1              while((Key != KEY_MEM) && strTimer.iTimerE < TimerEend){
 811   2                      Key_scan();//Value_Key_Press = vActionKey();
 812   2              }       
 813   1              
 814   1              if(strTimer.iTimerE >= TimerEend){
 815   2                      LCD_GLASS_Clear();
 816   2                      return;
 817   2              }
 818   1              
 819   1      
 820   1                      vSaveParamScale(Parameter_Voltages); 
 821   1                      
 822   1                       vSaveParamScale(Parameter_Calibration);
 823   1                      vSaveParamScale(Parameter_Register);
 824   1                      vSaveParamScale(Parameter_Configuration);
 825   1      
 826   1                      LCD_GLASS_String("SAVED", LCD_PRECIO);
 827   1                      vSound_Saved_Param();
 828   1                      vSound_Saved_Param();
 829   1                      
 830   1      
 831   1                      Key_scan();
 832   1                      
 833   1                      /* Espera a que se oprima la tecla 'MEM' o que pase el tiempo de 5 seg  */
 834   1                      while((Key != KEY_MEM) && strTimer.iTimerE < TimerEend)
 835   1                              Key_scan();//Value_Key_Press = vActionKey();
 836   1                              
 837   1      
 838   1                      
 839   1                      
 840   1                      if(Key == KEY_MEM){
 841   2              //      vSpecial_Action(Funcion_Especial);
 842   2                      }
 843   1              
 844   1              
 845   1              LCD_GLASS_Clear();
 846   1              //LCD_GLASS_String("  OFF", LCD_PRECIO);
 847   1      
 848   1      
 849   1      //      strTimer.iTimerE=1;     
 850   1              /* Espera a que se oprima la tecla 'MEM' o que pase el tiempo de 5 seg  */
 851   1      //      while(strTimer.iTimerE < TimerEend){
 852   1      //              Key_scan();//Value_Key_Press = vActionKey();
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 15  

 853   1      //      }       
 854   1                                      
 855   1              return;
 856   1      }
 857          
 858          
 859          /**
 860            ******************************************************************************
 861            * Objetivo: Calcular peso y registrar precio del producto 
 862            * Parametros entrada:
 863                  * Parametros Salida:
 864            * Prerequisitos: 
 865            ***
 866                  */
 867          unsigned char cRun_Scale(unsigned char bEnableKeys){
 868   1              
 869   1      /*
 870   1      //      enum    digi_key Value_Key_Press;
 871   1              
 872   1              // Lee teclado y ejecuta las acciones correspondientes 
 873   1              if(bEnableKeys == 1){
 874   1                      vScan_Key();
 875   1              }
 876   1                      
 877   1              if(srFlagScale.cAuto_Off_Time == 1 && stScaleParam.cTimeAutooff == 1){
 878   1                      srFlagScale.bScaleOn = 0;
 879   1                      return 0;
 880   1              }
 881   1              
 882   1      ///////////////CCC//////////////////////7777777 vGestorBateria();
 883   1              
 884   1              if(srFlagScale.bMsgBatteryLow == 1){
 885   1                      return 0;
 886   1              }
 887   1      
 888   1              if(srFlagScale.bOverLoad ==0){
 889   1                      if(srFlagScale.bSourceVoltage ==  SOURCE_ADAPTER){
 890   1                              LCD_GLASS_Symbols(SYMBOL_Y, 1);
 891   1                      }else{
 892   1                              LCD_GLASS_Symbols(SYMBOL_Y, 0);
 893   1                      }
 894   1              }
 895   1                                      
 896   1              srFlagScale.bFlagWeightNeg = 0;                 // Clarea indicador de peso negativo 
 897   1      
 898   1      ///////////7CCCCCC //CCC        //CCC vCalculate_Weight();
 899   1      
 900   1              if(srFlagScale.bErrorResponseAdc == 1 || srFlagScale.bErrorReadAdc == 1){               
 901   1                      LCD_GLASS_String("-----", LCD_PESO);
 902   1                      LCD_GLASS_String("    -", LCD_PRECIO);
 903   1                      LCD_GLASS_String("     -", LCD_TOTAL);
 904   1                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);               
 905   1                      return 0;
 906   1              }
 907   1              
 908   1                      if(srFlagScale.bErrorNoiseAdc == 1){            
 909   1                      LCD_GLASS_String("-----", LCD_PESO);
 910   1                      LCD_GLASS_String("  ---", LCD_PRECIO);
 911   1                      LCD_GLASS_String("   ---", LCD_TOTAL);
 912   1                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);               
 913   1                      return 0;
 914   1              }
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 16  

 915   1              
 916   1              if(srFlagScale.bOverLoad ==0){
 917   1                      
 918   1                      if(srFlagScale.bActiveSaveBattery == 1 && stScaleParam.cZeroTracking == 1 && 
 919   1                              fWeightScale == 0 && stScaleParam.cSaveBattery == 1 &&
 920   1                                      srFlagScale.bSourceVoltage !=  SOURCE_ADAPTER && srFlagScale.bTara == 0){
 921   1                              fSleep_Run();
 922   1                              
 923   1                              //CCC vCalculate_Weight();
 924   1                              
 925   1                              if(srFlagScale.bScaleOn == 0){
 926   1                                      return 0;
 927   1                              }
 928   1                      }
 929   1                      
 930   1                      // Verifica si esta la opcion fijar precio para mostrar indicador
 931   1                      if(srFlagScale.bFlagFijarPRecio){
 932   1                              LCD_GLASS_Symbols(SYMBOL_X, 1);
 933   1                      }else{
 934   1                              LCD_GLASS_Symbols(SYMBOL_X, 0);
 935   1                      }
 936   1                      
 937   1                      // Verfica el tipo de unidades a mostrar
 938   1                      if(stScaleParam.cUnits == UNIT_KG){
 939   1                              LCD_GLASS_Symbols(SYMBOL_KG, 1);
 940   1                      }else if(stScaleParam.cUnits == UNIT_LB){
 941   1                              LCD_GLASS_Symbols(SYMBOL_LB, 1);
 942   1                      }
 943   1                      
 944   1                      if(fWeightScale > -0.0005 && fWeightScale < 0.0005){
 945   1                              LCD_GLASS_Symbols(SYMBOL_ZERO, 1);
 946   1                      }else{
 947   1                              LCD_GLASS_Symbols(SYMBOL_ZERO, 0);
 948   1                              //Restart_Sleep_Time;
 949   1                      }
 950   1              }
 951   1                      
 952   1              srFlagScale.bFlagNeg = 0;       
 953   1              
 954   1              if(srFlagScale.bShowCountADC){
 955   1                      
 956   1                      vWeight_Positive();
 957   1                      
 958   1              }else{
 959   1                      // Verifica si el peso es negativo
 960   1                      if(fWeightScale < 0){
 961   1                              vWeight_Negative();                     
 962   1                      }else{                  
 963   1                              vWeight_Positive();                     
 964   1                      }
 965   1              }
 966   1              
 967   1                      if(srFlagScale.bTara){
 968   1                              if((fWeightLight >= stScaleParam.fValueTara+20*stScaleParam.fFactorCalibrate) && srFlagScale.bBateriaLo
             -w == 0){
 969   1                                      if(stScaleParam.cBacklight){OnBackLight;}
 970   1                                      strTimer.iTimerJ = 1;
 971   1                                      srFlagScale.bBacklight_On = 1;
 972   1                              }else{
 973   1                                      if(srFlagScale.bSourceVoltage != SOURCE_ADAPTER && strTimer.iTimerJ >= TimerJend){
 974   1                                              OffBackLight;
 975   1                                              srFlagScale.bBacklight_On = 0;
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 17  

 976   1                                      }
 977   1                              }
 978   1                              
 979   1                      }else{
 980   1                              if((fWeightLight >= stScaleParam.fPointZero+20*stScaleParam.fFactorCalibrate) && srFlagScale.bBateriaLo
             -w == 0){
 981   1                                              if(stScaleParam.cBacklight){OnBackLight;}
 982   1                                              strTimer.iTimerJ = 1;
 983   1                                              srFlagScale.bBacklight_On = 1;
 984   1                                      }else{
 985   1                                              if(srFlagScale.bSourceVoltage != SOURCE_ADAPTER && strTimer.iTimerJ >= TimerJend){
 986   1                                                      OffBackLight;
 987   1                                                      srFlagScale.bBacklight_On = 0;
 988   1                                      }
 989   1                              }
 990   1                      } 
 991   1              
 992   1      */
 993   1              return 0;
 994   1      }
*** WARNING C280 IN LINE 867 OF _SCALE\DVR_SCALE.C: 'bEnableKeys': unreferenced local variable
 995          
 996          /**
 997            ******************************************************************************
 998            * Objetivo: Funcionamiento normal con peso mayor igual a cero 
 999            * Parametros entrada:
1000                  * Parametros Salida:
1001            * Prerequisitos: 
1002            ***
1003                  */
1004          void vWeight_Positive(void){
1005   1              
1006   1      /*      float fWeightOverload = 0;
1007   1              
1008   1              float fOverloadUnit =  (float)stScaleParam.iCapacity + 
1009   1                                              ((float)(stScaleParam.iDivisionMinima)/(float)(pow(10, (int)stScaleParam.cWeightDecimal)))*9;
1010   1              
1011   1      /////////////CCC/////////////CCC/////////////CCC/////////////CCC        fOverloadUnit = fRoundFloat(fOverloadUnit
             -, (int)stScaleParam.cWeightDecimal, stScaleParam.iDivisionMinima);
1012   1              
1013   1              fWeightOverload = stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial;
1014   1              
1015   1              // Verifca que no exista la condicion de sobrepeso 
1016   1              if((fWeightOverload > stScaleParam.fWeightOverload || stScaleParam.fWeightScale > fOverloadUnit)  &&
1017   1                              srFlagScale.bTopeSobrePeso == 0){
1018   1                              
1019   1                      if(srFlagScale.bOverLoad == 0){
1020   1                              stScaleParam.iCountOverload++;          
1021   1                              vSaveParamScale(Parameter_Overload);
1022   1                      }
1023   1                      
1024   1                      srFlagScale.bOverLoad = 1;
1025   1                      
1026   1                      vGestorBateria();
1027   1                      
1028   1                      // Cuando existe sobrepeso lo indica en la LCD
1029   1                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);
1030   1                      LCD_GLASS_String("      ", LCD_TOTAL);
1031   1                      
1032   1                      if(stScaleParam.cLenguage == ESPANOL){
1033   1                              LCD_GLASS_String("SOBRE", LCD_PESO);
1034   1                              LCD_GLASS_String(" PESO", LCD_PRECIO);
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 18  

1035   1                      }else{
1036   1                              LCD_GLASS_String("OVER ", LCD_PESO);
1037   1                              LCD_GLASS_String(" LOAD", LCD_PRECIO);
1038   1                      }
1039   1                      
1040   1                      strTimer.iTimerA= 1;
1041   1                      while(strTimer.iTimerA<TimerAend){
1042   1                              IWDG_KEY_REFRESH;
1043   1                      }       
1044   1                      
1045   1                      if(stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial > stScaleParam.fValueOverload){
1046   1                              stScaleParam.fValueOverload = stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial;
1047   1                              vSaveParamScale(Parameter_Overload);
1048   1                      }
1049   1                      
1050   1                      //Restart_Sleep_Time;
1051   1                      
1052   1              }else{
1053   1                      srFlagScale.bOverLoad = 0;
1054   1                      
1055   1                      // Despliega el peso registrado
1056   1                      LCD_GLASS_Float(stScaleParam.fWeightScale, (int)stScaleParam.cWeightDecimal, LCD_PESO);
1057   1                                              
1058   1                      // Verifica si la opcion fijar precio no esta activada
1059   1                      if(!srFlagScale.bFlagFijarPRecio){
1060   1                              if(stScaleParam.fWeightScale == 0 && fWeightScaleBefore > 0){
1061   1                                      stScaleParam.fPrice_Unit = 0;
1062   1                                      stScaleParam.cNumberDecimalPrice = 0;
1063   1                                      srFlagScale.bDotDecimalPrice = 0;
1064   1                                      stScaleParam.cNumberDecimalPrice = 0;
1065   1                              }
1066   1                      }
1067   1                      
1068   1                      if(stScaleParam.fWeightScale != fWeightScaleBefore){
1069   1                              //Auto_Off_On_15m;
1070   1                              //Restart_Sleep_Time;
1071   1                      }
1072   1                              
1073   1                      fWeightScaleBefore = stScaleParam.fWeightScale;
1074   1                      
1075   1                      // Muestra el precio x unidad del producto
1076   1                      if(stScaleParam.fWeightScale == 0 && srFlagScale.bFlagFijarPRecio == 0 && srFlagScale.bPrecioCero == 0){
1077   1                              srFlagScale.bPrecioCero = 1;
1078   1                      }
1079   1                      
1080   1                      if(stScaleParam.cPuntoDecimalPrecio < 3){
1081   1                              LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cPuntoDecimalPrecio, LCD_PRECIO);
1082   1                      }else{
1083   1                              LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cNumberDecimalPrice, LCD_PRECIO);
1084   1                      }
1085   1                      
1086   1                      stScaleParam.fTotal_Venta = stScaleParam.fPrice_Unit * stScaleParam.fWeightScale;
1087   1                                              
1088   1              /////////CCC/////////CCC/////////CCC/////////CCC/////////CCC stScaleParam.fTotal_Venta = fRoundFlo
             -at(stScaleParam.fTotal_Venta, 
1089   1                       /////////CCC/////////CCC/////////CCC/////////CCC//////  stScaleParam.cPuntoDecimalTotal, stScaleParam.c
             -ValorRedondeoCifraTotal);
1090   1                      
1091   1                      //Verifica si el valor del total excede el limite a mostrar en la LCD
1092   1                      if(stScaleParam.fTotal_Venta > (999999 / (float)(pow(10,stScaleParam.cPuntoDecimalTotal)))){
1093   1                              LCD_GLASS_String("------", LCD_TOTAL);
1094   1                      }else{
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 19  

1095   1                              if(stScaleParam.fTotal_Venta > 0){
1096   1                                      LCD_GLASS_Float(stScaleParam.fTotal_Venta, stScaleParam.cPuntoDecimalTotal, LCD_TOTAL);
1097   1                              }else{
1098   1                                      LCD_GLASS_Float(0, 0, LCD_TOTAL);
1099   1                              }
1100   1                      }
1101   1              }*/
1102   1      }
1103          
1104          /**
1105            ******************************************************************************
1106            * Objetivo: Bloqueo del sistema por peso negativo 
1107            * Parametros entrada:
1108                  * Parametros Salida:
1109            * Prerequisitos: 
1110            ***
1111                  */
1112          void vWeight_Negative(void){
1113   1              
1114   1      /*      srFlagScale.bFlagNeg = 1;
1115   1              srFlagScale.bOverLoad = 0;
1116   1              
1117   1              //En caso de un peso negativo verifica que no sea menor al peso tarado
1118   1              if((srFlagScale.bTara == 1) && ((-1)*stScaleParam.fWeightScale <= fCuentasToPeso(stScaleParam.fValueTara)
             -)){                
1119   1                      LCD_GLASS_Float(stScaleParam.fWeightScale, (int)stScaleParam.cWeightDecimal, LCD_PESO);
1120   1              }else{
1121   1                      LCD_GLASS_String("-----", LCD_PESO);
1122   1              }
1123   1              
1124   1              if(srFlagScale.bFlagFijarPRecio){
1125   1                      LCD_GLASS_String("------", LCD_TOTAL);
1126   1              }else{
1127   1                      stScaleParam.fPrice_Unit = 0;
1128   1                      stScaleParam.cNumberDecimalPrice = 0;
1129   1                      stScaleParam.fTotal_Venta = 0;
1130   1                      LCD_GLASS_String("     0", LCD_TOTAL);
1131   1              }
1132   1                      
1133   1              if(stScaleParam.cPuntoDecimalPrecio < 3){
1134   1                      LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cPuntoDecimalPrecio, LCD_PRECIO);
1135   1              }else{
1136   1                      LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cNumberDecimalPrice, LCD_PRECIO);
1137   1              }
1138   1              
1139   1              // Elimina el indicador de cero al presentar peso negativo 
1140   1              LCD_GLASS_Symbols(SYMBOL_ZERO, 0);      */              
1141   1      }
1142          
1143          /**
1144            ******************************************************************************
1145            * Objetivo: Calcular el peso.
1146            * Parametros entrada:
1147                  * Parametros Salida:
1148            * Prerequisitos: 
1149            ***
1150                  */
1151          
1152          void vCalculate_Weight (void){
1153   1      /***************
1154   1      Se toman 3 lecturas para garantizar el peso al realizar las sumas c/precio fijo, 
1155   1      si no hay precio fijo realiza solo una lectura de forma natural.
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 20  

1156   1      ******************/     
1157   1              char i = 0, cCountPrecioFijo = 0;
1158   1      
1159   1              if(srFlagScale.bFlagFijarPRecio){       
1160   2                      cCountPrecioFijo = 3;                                           
1161   2              }
1162   1              else{
1163   2                      cCountPrecioFijo = 1;                   
1164   2              }
1165   1      
1166   1              for(i=0; i < cCountPrecioFijo; i++){
1167   2                      fWeightScale = fRead_Adc(1);                                    // Solicita el peso actual 
1168   2              }
1169   1              
1170   1              if(srFlagScale.bErrorResponseAdc == 1 || srFlagScale.bErrorReadAdc == 1){
1171   2                      LCD_GLASS_String(" -E- ", LCD_PESO);
1172   2                      return;
1173   2              }
1174   1              
1175   1              // Si esta la funcion ZeroTracking la ejecuta
1176   1              if(stScaleParam.cZeroTracking == 1 && srFlagScale.bTara == 0){
1177   2                      vGetZeroTracking(fWeightScale);
1178   2              }
1179   1              
1180   1              stScaleParam.fWeightScaleCount = fWeightScale;
1181   1              
1182   1              fWeightLight = fWeightScale;
1183   1              
1184   1              // Calcula peso bruto (numero de cuentas ADC del peso)
1185   1              fWeightScale -= stScaleParam.fPointZero;        
1186   1              stScaleParam.fWeightScaleTara = fWeightScale;
1187   1                      
1188   1              if(srFlagScale.bShowCountADC == 1){
1189   2                      fWeightScale = fCuentasToPeso(stScaleParam.fWeightScaleCount);
1190   2              }else{
1191   2                              // Verifica si esta la opcion de tara activada para mostrar indicador NET 
1192   2                      if(srFlagScale.bTara == 1){
1193   3                              fWeightLight = fWeightScale; 
1194   3                              fWeightScale -= stScaleParam.fValueTara;                        
1195   3                              if(srFlagScale.bOverLoad ==0){
1196   4                                      LCD_GLASS_Symbols(SYMBOL_NET, 1);
1197   4                              }
1198   3                      }               
1199   2                      fWeightScale = fCuentasToPeso(fWeightScale);            
1200   2              }
1201   1              
1202   1              if(fWeightScale < 0 && srFlagScale.bShowCountADC == 0){
1203   2                      srFlagScale.bFlagWeightNeg = 1;
1204   2              }else if(fWeightScale == 0){
1205   2                      srFlagScale.bFlagWeightNeg = 0;
1206   2              }
1207   1              
1208   1              stScaleParam.fWeightScale = fWeightScale;
1209   1      }
1210          
1211          /**
1212            ******************************************************************************
1213            * Objetivo: Redondea numero flotante.
1214            * Parametros entrada: Ninguno
1215                  * Parametros Salida: Ninguno
1216            ******************************************************************************
1217            */
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 21  

1218          float fCuentasToPeso(float fCountADC){
1219   1              
1220   1              float fAuxFactorC = 0;
1221   1              float fPesoFinal = 0; 
1222   1              float fPesoAux = 0;
1223   1              long iAuxPeso = 0;
1224   1              float arfFactorMult = 0;
1225   1              char cFlagNeg = 0;
1226   1              
1227   1              if(fCountADC < 0){
1228   2                      cFlagNeg = 1;
1229   2                      fCountADC *= (-1);
1230   2              }
1231   1              
1232   1              if(stScaleParam.cMultirango == 0){
1233   2                      arfFactorMult = (float)(stScaleParam.iDivisionMinima)/pow(10,(int)stScaleParam.cWeightDecimal);
1234   2                      fPesoAux = fCountADC/stScaleParam.fFactorCalibrate;     
1235   2              }else{
1236   2                      if (fCountADC <= stScaleParam.fCapacityCali*0.10){
1237   3                              fAuxFactorC = 0;
1238   3                              fAuxFactorC = (float)(stScaleParam.iDivisionMenorMenor)/(float)(stScaleParam.iDivisionMinima);
1239   3                              arfFactorMult = (float)(stScaleParam.iDivisionMenorMenor)/pow(10,(int)stScaleParam.cWeightDecimal);
1240   3                              fPesoAux = fCountADC/(stScaleParam.fFactorCalibrate*fAuxFactorC);                       
1241   3                      }               
1242   2                      else if (fCountADC <= stScaleParam.fCapacityCali*0.20){
1243   3                              fAuxFactorC = (float)(stScaleParam.iDivisionMenor)/(float)(stScaleParam.iDivisionMinima);
1244   3                              arfFactorMult = (float)(stScaleParam.iDivisionMenor)/pow(10,(int)stScaleParam.cWeightDecimal);
1245   3                              fPesoAux = fCountADC/(stScaleParam.fFactorCalibrate*fAuxFactorC);
1246   3                      }       
1247   2                      else{
1248   3                              arfFactorMult = (float)(stScaleParam.iDivisionMinima)/pow(10,(int)stScaleParam.cWeightDecimal);
1249   3                              fPesoAux = fCountADC/stScaleParam.fFactorCalibrate;
1250   3                      }
1251   2              }
1252   1              
1253   1              iAuxPeso = (long)fPesoAux;      
1254   1              
1255   1              fPesoAux -= (float)iAuxPeso;
1256   1              iAuxPeso += (long)(fPesoAux*2);
1257   1              fPesoFinal = (float)iAuxPeso*arfFactorMult;
1258   1              
1259   1              if(cFlagNeg){
1260   2                      fPesoFinal *= (-1);
1261   2              }
1262   1              
1263   1              return fPesoFinal;
1264   1      }
1265          
1266          /**
1267            ******************************************************************************
1268            * Objective: To Reduce the power consumption of the load cell.
1269            ******************************************************************************
1270                  */
1271          float fSleep_Run(void){
1272   1      float fValueReturn = 0; 
1273   1      /*      float fWeightScale = 0;
1274   1              
1275   1              float fLimite = 0;
1276   1              int i = 0 ;     
1277   1              unsigned char cFlag_Continue = 1;       //Flag para 
1278   1              
1279   1              //Variable para rotar el mensaje
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 22  

1280   1              unsigned char strMsgSaveBatt[16];
1281   1              unsigned char strSave[6] = {0,0,0,0,0,0};
1282   1              unsigned char strBatt[7] = {0,0,0,0,0,0,0};
1283   1              unsigned char cDataTemp = 0;
1284   1              unsigned char cDataTemp1 = 0;
1285   1              unsigned char bStatus_Battery = 0;
1286   1      
1287   1              
1288   1              strcpy(strMsgSaveBatt, "---------- ");
1289   1              
1290   1              fLimite = fCuentasToPeso(stScaleParam.fFactorCalibrate);
1291   1              
1292   1              Time_Sleep;     //Reinicia el contador para realizar lectura del ADC
1293   1              
1294   1              for(i=0; i<11; i++){
1295   1                      if(i<5){
1296   1                              strSave[i] = strMsgSaveBatt[i];
1297   1                      }else if(i<11){
1298   1                              strBatt[i-5] = strMsgSaveBatt[i];
1299   1                      }
1300   1              }
1301   1              
1302   1              OffBackLight;//GPIO_ResetBits(GPIOA, BACK_LIGHT);       //Off BackLight
1303   1                                      
1304   1              LCD_GLASS_Symbols(SYMBOL_ALL, 0);
1305   1              LCD_GLASS_String("-----", LCD_PRECIO);
1306   1              LCD_GLASS_String("------", LCD_TOTAL);
1307   1              LCD_GLASS_Float(0, 0, LCD_PESO);
1308   1              
1309   1              while(cFlag_Continue){
1310   1                      //Verifica por que salio del Wait
1311   1                      if(srFlagScale.bScaleOn == 0){ //Si se oprimio la tecla On
1312   1                              cFlag_Continue = 0;
1313   1                      }else if(strTimer.iTimerB<TimerBend){ //Si ya pasaron 3 segundos
1314   1                              
1315   1                              fWeightScale = fRead_Adc(0);
1316   1                              
1317   1                              // Si esta la funcion ZeroTracking la ejecuta
1318   1                              if(stScaleParam.cZeroTracking == 1 && srFlagScale.bTara == 0){
1319   1                                      vGetZeroTracking(fWeightScale);
1320   1                              }
1321   1                              
1322   1                              stScaleParam.fWeightScaleCount = fWeightScale;
1323   1                              
1324   1                              // Calcula peso bruto (numero de cuentas ADC del peso)
1325   1                              fWeightScale -= stScaleParam.fPointZero;
1326   1                              fValueReturn = fWeightScale;
1327   1                              fWeightScale = fCuentasToPeso(fWeightScale);
1328   1                              
1329   1                              if(fWeightScale >= fLimite || fWeightScale < (-1)*(fLimite)){
1330   1                                      cFlag_Continue = 0;
1331   1                              }else if(vActionKey() != KEY_NULL){
1332   1                                      cFlag_Continue = 0;
1333   1                                      vBeep_Key();
1334   1                              }                               
1335   1                              
1336   1                              if(cFlag_Continue){                             
1337   1                                      
1338   1                                      //Verifica si ya esta conectado el elimnador para salir de bajo consumo
1339   1                                      bStatus_Battery = uGet_Status_Volt();
1340   1                                      
1341   1                                      if(bStatus_Battery != SOURCE_ADAPTER){ 
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 23  

1342   1                                              vGestorBateria();
1343   1                                      }else{
1344   1                                              cFlag_Continue = 0;
1345   1                                      }
1346   1                                      
1347   1                                      if(srFlagScale.bMsgBatteryLow == 0){
1348   1                                              //Muestra animacion de lineas 
1349   1                                              
1350   1                                              cDataTemp = strMsgSaveBatt[0];
1351   1                                              
1352   1                                              for(i=0; i<14; i++){
1353   1                                                      strMsgSaveBatt[i] = strMsgSaveBatt[i+1];
1354   1                                              }
1355   1                                              
1356   1                                              strMsgSaveBatt[10] = cDataTemp;
1357   1                                              
1358   1                                              for(i=0; i<11; i++){
1359   1                                                      if(i<5){
1360   1                                                              strSave[i] = strMsgSaveBatt[i];
1361   1                                                      }else if(i<11){
1362   1                                                              strBatt[i-5] = strMsgSaveBatt[i];
1363   1                                                      }
1364   1                                              }
1365   1                                              
1366   1                                              LCD_GLASS_String("    0", LCD_PESO);
1367   1                                              LCD_GLASS_String(strSave, LCD_PRECIO);
1368   1                                              LCD_GLASS_String(strBatt, LCD_TOTAL);
1369   1                                      }
1370   1                                      
1371   1                                      Time_Sleep;
1372   1                              }
1373   1                      }else if(vActionKey() != KEY_NULL){
1374   1                              cFlag_Continue = 0;
1375   1                              vBeep_Key();
1376   1                      }
1377   1                      
1378   1                      if(srFlagScale.bScaleOn == 0){
1379   1                              cFlag_Continue = 0;
1380   1                      }
1381   1                      
1382   1                      if(srFlagScale.cAuto_Off_Time == 1 && stScaleParam.cTimeAutooff == 1){
1383   1                              srFlagScale.bScaleOn = 0;
1384   1                              cFlag_Continue = 0;
1385   1                      }
1386   1              }       
1387   1              
1388   1              if(srFlagScale.bBacklight_On){
1389   1                      if(stScaleParam.cBacklight){OnBackLight;}
1390   1              }
1391   1              
1392   1      ///////CCC///////CCC    CLK_PeripheralClockConfig(CLK_Peripheral_ADC1, ENABLE);
1393   1              //Restart_Sleep_Time;
1394   1              //Auto_Off_On_15m;
1395   1              */
1396   1              return fValueReturn;
1397   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4839    ----
   CONSTANT SIZE    =     77    ----
   XDATA SIZE       =    191      82
C51 COMPILER V7.50   DVR_SCALE                                                             09/23/2022 17:50:51 PAGE 24  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
