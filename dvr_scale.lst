C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE DVR_SCALE
OBJECT MODULE PLACED IN dvr_scale.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE _scale\dvr_scale.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\dvr_scale.lst) O
                    -BJECT(dvr_scale.obj)

line level    source

   1          /* Includes ------------------------------------------------------------------*/
   2          #include <stdio.h>
   3          #include <math.h>
   4          #include <string.h>
   5          //#include "stm8l15x.h"
   6          //#include "stm8l15x_iwdg.h"
   7          //#include "main.h"
   8          //#include "dvr_lcd.h"
   9          //#include "dvr_def.h"
  10          //#include "dvr_e2prom.h"       
  11          //#include "dvr_HX712.h"
  12          //#include "dvr_keyboard.h"
  13          #include "dvr_scale.h"
  14          //#include "dvr_battery.h"
  15          //#include "dvr_inicio.h"
  16          
  17          #include "./_data_nvm/data_nvm_5219_Vc_Dec09_13.h"      
  18          #include "./_scale/dvr_def.h"
  19          #include "./_display/dvr_lcd_SDI1621.h"
  20          #include "./customer/keyboard.h"
  21          #include "./_weight/dvr_HX712.h"
  22          #include "./_scale/dvr_scale.h"
  23          #include "./_battery/dvr_battery.h"
  24          
  25          /*
  26          #define ADDRESS_SCALE_CONFIG_PAGE    ADDRESS_PAGE_27
  27          #define ADDRESS_QLTY_AND_CNTRS_PAGE  ADDRESS_PAGE_28
  28          #define ADDRESS_PLU                  ADDRESS_PAGE_29
  29          */
  30          
  31          /* --- Direcciones en la EEPROM de los valores */
  32          #define ADDR_SET_CALIBRATE                      ADDRESS_SCALE_CONFIG_PAGE + 0   /* 1 byte */
  33          #define ADDR_CAPACITY_CALI                      ADDRESS_SCALE_CONFIG_PAGE + 1   /* 4 byte */
  34          #define ADDR_POINT_ZERO                         ADDRESS_SCALE_CONFIG_PAGE + 5   /* 4 byte */
  35          #define ADDR_FACTOR_CALIBRATE       ADDRESS_SCALE_CONFIG_PAGE + 9       /* 4 byte */
  36          #define ADDR_LENGUAGE                           ADDRESS_SCALE_CONFIG_PAGE + 13  /* 1 byte */
  37          #define ADDR_UNITS                                      ADDRESS_SCALE_CONFIG_PAGE + 14  /* 1 byte */
  38          #define ADDR_CAPACITY                           ADDRESS_SCALE_CONFIG_PAGE + 15  /* 2 byte */
  39          #define ADDR_PORC_REF                           ADDRESS_SCALE_CONFIG_PAGE + 17  /* 2 byte */
  40          #define ADDR_DIVISION_MINIMA            ADDRESS_SCALE_CONFIG_PAGE + 19  /* 2 byte */
  41          #define ADDR_DECIMAL_TOTAL                      ADDRESS_SCALE_CONFIG_PAGE + 21  /* 1 byte */
  42          #define ADDR_REDONDEO_TOTAL             ADDRESS_SCALE_CONFIG_PAGE + 22  /* 1 byte */
  43          #define ADDR_REDONDEO_VENTA             ADDRESS_SCALE_CONFIG_PAGE + 23  /* 1 byte */
  44          #define ADDR_DECIMAL_PRECIO             ADDRESS_SCALE_CONFIG_PAGE + 24  /* 1 byte */
  45          #define ADDR_ZERO_TRACKING                      ADDRESS_SCALE_CONFIG_PAGE + 25  /* 1 byte */
  46          #define ADDR_FORMATO_IMPRESION      ADDRESS_SCALE_CONFIG_PAGE + 26      /* 1 byte */
  47          #define ADDR_MSG_UNLOAD                                  ADDRESS_SCALE_CONFIG_PAGE + 27 /* 1 byte */
  48          #define ADDR_TIME_OFF                                    ADDRESS_SCALE_CONFIG_PAGE + 28 /* 1 byte */
  49          
  50          #define ADDR_MODELO                                                      ADDRESS_SCALE_CONFIG_PAGE + 38 /* 1 byte */
  51          #define ADDR_BACKLIGHT                                   ADDRESS_SCALE_CONFIG_PAGE + 40 /* 1 byte */
  52          #define ADDR_MSGBAT                                                      ADDRESS_SCALE_CONFIG_PAGE + 42 /* 1 byte */
  53          #define ADDR_DEBUG                                                       ADDRESS_SCALE_CONFIG_PAGE + 43 /* 2 byte */
  54          #define ADDR_COUNT_RANGE                                 ADDRESS_SCALE_CONFIG_PAGE + 55 /* 2 byte */
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 2   

  55          #define ADDR_MONEDA                                                      ADDRESS_SCALE_CONFIG_PAGE + 60 /* 1 byte */
  56          
  57          #define ADDR_DECIMAL_WEIGHT                      ADDRESS_SCALE_CONFIG_PAGE + 84  /* 2 bytes */
  58          #define ADDR_TEMPERATURE                                 ADDRESS_SCALE_CONFIG_PAGE + 86         /* 4 Bytes */
  59          #define ADDR_VOLT_BATT                                   ADDRESS_SCALE_CONFIG_PAGE + 90  /* 4 Bytes */
  60          #define ADDR_VOLT_ADAP                                   ADDRESS_SCALE_CONFIG_PAGE + 94  /* 4 Bytes */
  61          #define ADDR_SAVEBATT                                            ADDRESS_SCALE_CONFIG_PAGE + 98  /* 1 byte */
  62          
  63          #define ADDR_DIVISION_MENOR                      ADDRESS_SCALE_CONFIG_PAGE + 100        /* 2 bytes */
  64          #define ADDR_MULTIRANGO                                  ADDRESS_SCALE_CONFIG_PAGE + 102        /* 1 byte */
  65          
  66          #define ADDR_DIVISION_MENORMENOR  ADDRESS_SCALE_CONFIG_PAGE + 107       /* 2 bytes */
  67          
  68          #define ADDR_COUNTER_CALIBRATION  ADDRESS_QLTY_AND_CNTRS_PAGE + 29      /* 1 byte */
  69          #define ADDR_COUNTER_CONFIGURATION  ADDRESS_QLTY_AND_CNTRS_PAGE + 31    /* 1 byte */
  70          #define ADDR_COUNT_OVERLOAD                      ADDRESS_QLTY_AND_CNTRS_PAGE + 61  /* 2 bytes */
  71          #define ADDR_VALUE_OVERLOAD                      ADDRESS_QLTY_AND_CNTRS_PAGE + 63  /* 4 bytes */
  72          #define ADDR_ERRORBATT                                   ADDRESS_QLTY_AND_CNTRS_PAGE + 99  /* 1 byte */
  73          #define ADDR_VENTA_TOTAL                                 ADDRESS_QLTY_AND_CNTRS_PAGE + 103   /* 4 bytes */
  74          
  75          float fWeightScale = 0;                                                                 /* Contiene el valor del peso leido */
  76          float fWeightScaleBefore = 0;
  77          float fWeightLight = 0;
  78          struct Parameter stScaleParam;  /* Contiene los parametros de uso de la Bascula*/
  79          struct FlagScale srFlagScale;           /* Contiene las banderas del sistema */
  80          
  81          int iCounterZeroTracking = 0;
  82          
  83          extern int iCountFailRead;
  84          extern int iCountFailResponse;
  85          
  86          /* --- Prototype Function ----------------------------------------------------*/
  87          void vSaveParamScale(unsigned char cType_Parameter);
  88          void vCalibrate_Scale(void);
  89          void vWeight_Positive(void);
  90          void vWeight_Negative(void);
  91          unsigned char cProduct_Varios(void);
  92          //void vSend_Data_Serial(void);
  93          float fCuentasToPeso(float fCountADC);
  94          void vPrintZero(void);
  95          void vSend_Value(float fValue1, unsigned char uActive1, float fValue2, unsigned char uActive2, float fValu
             -e3, unsigned char uActive3);
  96          float fSleep_Run(void);
  97          
  98          /**
  99            ******************************************************************************
 100            * Objetivo: Asignar valores de parametros de la bascula.
 101            * Parametros entrada: Ninguno.
 102                  * Parametros Salida: Ninguno.
 103            * Prerequisitos: Modifica las variables globales de la estruct stScaleParam
 104            ******************************************************************************
 105            */
 106          void vReadParamScale(void){
 107   1              stScaleParam.fCapacityCali              = flash_read_float32(ADDR_CAPACITY_CALI);
 108   1              stScaleParam.fPointZeroCali             = flash_read_float32(ADDR_POINT_ZERO);
 109   1              stScaleParam.fFactorCalibrate = flash_read_float32(ADDR_FACTOR_CALIBRATE);
 110   1              stScaleParam.fValueTara                         = 0;
 111   1              
 112   1              stScaleParam.cMultirango        = flash_read_u8(ADDR_MULTIRANGO);
 113   1              stScaleParam.cLenguage                          = flash_read_u8(ADDR_LENGUAGE);
 114   1              stScaleParam.cUnits                                     = flash_read_u8(ADDR_UNITS);
 115   1              stScaleParam.cFormatoImpresion                          = flash_read_u8(ADDR_FORMATO_IMPRESION);
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 3   

 116   1              stScaleParam.iCapacity                          =       flash_read_u16(ADDR_CAPACITY);
 117   1              stScaleParam.iLoadPorcRefer     = flash_read_u16(ADDR_PORC_REF);
 118   1              stScaleParam.iDivisionMinima    = flash_read_u16(ADDR_DIVISION_MINIMA);
 119   1              stScaleParam.iDivisionMenor     = flash_read_u16(ADDR_DIVISION_MENOR);
 120   1              stScaleParam.iDivisionMenorMenor        = flash_read_u16(ADDR_DIVISION_MENORMENOR);
 121   1              stScaleParam.cPuntoDecimalTotal         = flash_read_u8(ADDR_DECIMAL_TOTAL);
 122   1              stScaleParam.cRedondeoCifraTotal        = flash_read_u8(ADDR_REDONDEO_TOTAL);
 123   1              stScaleParam.cBacklight         = flash_read_u8(ADDR_BACKLIGHT);
 124   1              
 125   1              if(stScaleParam.cRedondeoCifraTotal == 0){
 126   2                      stScaleParam.cValorRedondeoCifraTotal = 5;
 127   2              }else{
 128   2                      stScaleParam.cValorRedondeoCifraTotal = 1;
 129   2              }
 130   1              
 131   1              stScaleParam.cRedondeoCifraVentaTotal   = flash_read_u8(ADDR_REDONDEO_VENTA);
 132   1              
 133   1              if(stScaleParam.cRedondeoCifraVentaTotal == 0){
 134   2                      stScaleParam.cValorcRedondeoCifraVentaTotal = 5;
 135   2              }else{
 136   2                      stScaleParam.cValorcRedondeoCifraVentaTotal = 1;
 137   2              }
 138   1              
 139   1              stScaleParam.cPuntoDecimalPrecio                        = flash_read_u8(ADDR_DECIMAL_PRECIO);
 140   1              stScaleParam.cZeroTracking                                              = 0; //flash_read_u8(ADDR_ZERO_TRACKING);
 141   1              stScaleParam.cMsgUnload                                                         = flash_read_u8(ADDR_MSG_UNLOAD);
 142   1              stScaleParam.cTimeAutooff                                                       = flash_read_u8(ADDR_TIME_OFF);
 143   1              stScaleParam.cModeloBascula                                             = flash_read_u8(ADDR_MODELO);
 144   1                              
 145   1              stScaleParam.iCounter_Calibration       = flash_read_u16(ADDR_COUNTER_CALIBRATION);
 146   1              stScaleParam.iCounter_Configuration     = flash_read_u16(ADDR_COUNTER_CONFIGURATION);
 147   1              
 148   1              stScaleParam.cShowHighBat                                                       = flash_read_u8(ADDR_MSGBAT); 
 149   1              
 150   1              stScaleParam.iDebug                                                                     = flash_read_u16(ADDR_DEBUG);
 151   1      
 152   1              stScaleParam.cCountRange                                                        = flash_read_u8(ADDR_COUNT_RANGE);
 153   1              
 154   1              stScaleParam.cMoneda                                                                    = flash_read_u8(ADDR_MONEDA);
 155   1                      
 156   1              stScaleParam.iCountOverload                                             =       flash_read_u16(ADDR_COUNT_OVERLOAD);
 157   1              
 158   1              stScaleParam.fValueOverload                                             =       flash_read_float32(ADDR_VALUE_OVERLOAD);
 159   1              
 160   1              stScaleParam.cWeightDecimal                                     = flash_read_u8(ADDR_DECIMAL_WEIGHT);
 161   1              
 162   1              stScaleParam.cSaveBattery                                       = flash_read_u8(ADDR_SAVEBATT);
 163   1              
 164   1              srFlagScale.bShowErroBat                                                = flash_read_u8(ADDR_ERRORBATT);
 165   1              
 166   1              stScaleParam.fVenta_Total_Scale    = flash_read_float32(ADDR_VENTA_TOTAL);
 167   1      }
 168          
 169          /**
 170            ******************************************************************************
 171            * Objetivo: Guardar parametros en la E2PROM
 172            * Parametros entrada: Ninguno
 173                  * Parametros Salida: Ninguno
 174            ******************************************************************************
 175            */
 176          void vSaveParamScale(unsigned char cType_Parameter){
 177   1              /* Habilita la escritura/lectura en la EEPROM */
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 4   

 178   1              NRM_securty_a = 0xaa;
 179   1              NRM_securty_b = 0x55;
 180   1      
 181   1              switch(cType_Parameter){
 182   2      
 183   2                      case Parameter_Calibration:             
 184   2                              flash_write_u8(ADDR_SET_CALIBRATE, 1);
 185   2                              flash_write_float32(ADDR_CAPACITY_CALI, stScaleParam.fCapacityCali);
 186   2                              flash_write_float32(ADDR_POINT_ZERO, stScaleParam.fPointZeroCali);
 187   2                              flash_write_float32(ADDR_FACTOR_CALIBRATE, stScaleParam.fFactorCalibrate);
 188   2                              flash_write_u16(ADDR_COUNTER_CALIBRATION, stScaleParam.iCounter_Calibration);           
 189   2                              break;
 190   2                      
 191   2                      case Parameter_Count_Calibration:
 192   2                              flash_write_u16(ADDR_COUNTER_CALIBRATION, stScaleParam.iCounter_Calibration);           
 193   2                              break;
 194   2                              
 195   2                      case Parameter_Configuration:
 196   2                      
 197   2                              flash_write_u8(ADDR_LENGUAGE, stScaleParam.cLenguage);
 198   2                              flash_write_u8(ADDR_UNITS, stScaleParam.cUnits);                
 199   2                              flash_write_u16(ADDR_CAPACITY, stScaleParam.iCapacity);
 200   2                              flash_write_u16(ADDR_PORC_REF, stScaleParam.iLoadPorcRefer);
 201   2                              flash_write_u16(ADDR_DIVISION_MINIMA, stScaleParam.iDivisionMinima);    
 202   2                              flash_write_u16(ADDR_DIVISION_MENOR, stScaleParam.iDivisionMenor);
 203   2                              flash_write_u16(ADDR_DIVISION_MENORMENOR, stScaleParam.iDivisionMenorMenor);                    
 204   2                              flash_write_u8(ADDR_DECIMAL_TOTAL, stScaleParam.cPuntoDecimalTotal);
 205   2                              flash_write_u8(ADDR_REDONDEO_TOTAL, stScaleParam.cRedondeoCifraTotal);
 206   2                              flash_write_u8(ADDR_DECIMAL_PRECIO, stScaleParam.cPuntoDecimalPrecio);
 207   2                              flash_write_u8(ADDR_ZERO_TRACKING, stScaleParam.cZeroTracking);
 208   2                              flash_write_u8(ADDR_MSG_UNLOAD, stScaleParam.cMsgUnload);
 209   2                              flash_write_u8(ADDR_TIME_OFF, stScaleParam.cTimeAutooff);
 210   2                              flash_write_u8(ADDR_MODELO, stScaleParam.cModeloBascula);
 211   2                              flash_write_u8(ADDR_MSGBAT, stScaleParam.cShowHighBat);
 212   2                              flash_write_u16(ADDR_COUNTER_CONFIGURATION, stScaleParam.iCounter_Configuration);
 213   2                              flash_write_u8(ADDR_COUNT_RANGE, stScaleParam.cCountRange);
 214   2                              flash_write_u8(ADDR_MONEDA, stScaleParam.cMoneda);              
 215   2                              flash_write_u16(ADDR_COUNT_OVERLOAD, stScaleParam.iCountOverload);              
 216   2                              flash_write_float32(ADDR_VALUE_OVERLOAD, stScaleParam.fValueOverload);  
 217   2                              flash_write_u8(ADDR_DECIMAL_WEIGHT, stScaleParam.cWeightDecimal);       
 218   2                              flash_write_u8(ADDR_SAVEBATT, stScaleParam.cSaveBattery);                       
 219   2                              flash_write_u8(ADDR_ERRORBATT, srFlagScale.bShowErroBat);
 220   2                              flash_write_u8(ADDR_MULTIRANGO, stScaleParam.cMultirango);
 221   2                              flash_write_u8(ADDR_FORMATO_IMPRESION, stScaleParam.cFormatoImpresion);
 222   2                              
 223   2                              break;
 224   2              
 225   2                      case Parameter_Count_Configuration:
 226   2                              flash_write_u16(ADDR_COUNTER_CONFIGURATION, stScaleParam.iCounter_Configuration);
 227   2                              break;
 228   2                              
 229   2                      case Parameter_Point_Zero_Calibration:
 230   2                              flash_write_float32(ADDR_POINT_ZERO, stScaleParam.fPointZeroCali);                      
 231   2                              break;
 232   2                                      
 233   2                      case Parameter_Debug:
 234   2                              flash_write_u16(ADDR_DEBUG, stScaleParam.iDebug);
 235   2                              break;
 236   2                                      
 237   2                      case Parameter_Overload:
 238   2                              flash_write_u16(ADDR_COUNT_OVERLOAD, stScaleParam.iCountOverload);              
 239   2                              flash_write_float32(ADDR_VALUE_OVERLOAD, stScaleParam.fValueOverload);                                          
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 5   

 240   2                              break;
 241   2                              
 242   2                      case Parameter_Voltages:
 243   2                              flash_write_float32(ADDR_VOLT_BATT, stScaleParam.fVoltage_Batt);
 244   2                              flash_write_float32(ADDR_VOLT_ADAP, stScaleParam.fVoltage_Adap);
 245   2                              break;
 246   2                      
 247   2                      case Parameter_Temperature:
 248   2                              flash_write_float32(ADDR_TEMPERATURE, stScaleParam.fTemperature);
 249   2                              break;          
 250   2                              
 251   2                      case Parameter_Register:
 252   2                              flash_write_float32(ADDR_VENTA_TOTAL, stScaleParam.fVenta_Total_Scale);
 253   2                              break;
 254   2      
 255   2                      case Parameter_Backlight:
 256   2                              flash_write_u8(ADDR_BACKLIGHT, stScaleParam.cBacklight);
 257   2                              break;
 258   2              }
 259   1              
 260   1              /* Deshabilita la escritura en la EEPROM */
 261   1              NRM_securty_a = 0x00;
 262   1              NRM_securty_b = 0x00;
 263   1      }
 264          
 265          /**
 266            ******************************************************************************
 267            * Objetivo: Encontrar un valor estable durante un tiempo X.
 268            * Parametros entrada: 
 269                  *               cSetCountBack -> Tiempo de muestreo (conteo descendente)
 270                  *               cShowCount -> Hacer visible el conteo.
 271                  *               cRunStable -> Llenar el filtro con el primer dato leido.
 272                  * Parametros Salida: Ninguno.
 273                  * Nota: Si durante la cuenta regrsiva el valor no esta dentro del rango
 274                  *       asignado, el conteo se reinicia.
 275            ******************************************************************************
 276            */
 277          float fStablePoint(unsigned char cSetCountBack, unsigned char cShowCount, unsigned char cRunStable){    
 278   1      
 279   1              unsigned char cCountReading = 0;                /* Contador de lecturas */
 280   1              unsigned char cNumber_Count = 0;
 281   1              long int cCountBack = cSetCountBack;                    /* Contador de regresion */
 282   1              float fActualWeightAdc=0;                                               /* Alamacena el peso actual valores adc */
 283   1              float fWeightAdc = 0;                                                           /* Almacena el valor referencia */
 284   1              float fLimitRange = (float)stScaleParam.cCountRange;
 285   1              int i=0;
 286   1              
 287   1              cNumber_Count = 0;
 288   1              
 289   1              if(cRunStable == 0){
 290   2                      cNumber_Count = 2;
 291   2              }
 292   1              
 293   1              fWeightAdc = fRead_Adc(cRunStable);     /* Lee el valor actual del peso */
 294   1              
 295   1              while(cCountBack > -1){
 296   2                      
 297   2          vActionKey();
 298   2                      
 299   2                      /* Verifica si debe mostrar el contador en la LCD */
 300   2                      if(cShowCount == 1){
 301   3                              if(cCountBack == 0){
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 6   

 302   4                                      LCD_GLASS_String("00000", LCD_PESO);
 303   4                                      LCD_GLASS_String("00000", LCD_PRECIO);
 304   4                                      LCD_GLASS_String("000000", LCD_TOTAL);
 305   4                              }else{
 306   4                                      LCD_GLASS_Float(cCountBack*11111, 0, LCD_PESO);
 307   4                                      LCD_GLASS_Float(cCountBack*11111, 0, LCD_PRECIO);
 308   4                                      LCD_GLASS_Float(cCountBack*111111, 0, LCD_TOTAL);
 309   4                              }
 310   3                      }
 311   2              
 312   2                      fActualWeightAdc = fRead_Adc(cRunStable);
 313   2                      
 314   2                      if(srFlagScale.bScaleOn == 0){
 315   3                              srFlagScale.bFlagStable = 0;
 316   3                              return -100;
 317   3                      }
 318   2                      
 319   2                      /* Verica que el ultimo valor leido este dentro del rango del valor 
 320   2                              referencia */
 321   2                      if(fActualWeightAdc >= (fWeightAdc - fLimitRange) && 
 322   2                              fActualWeightAdc <= (fWeightAdc + fLimitRange)){
 323   3                                      cCountReading++;
 324   3                                      
 325   3                                      /* Si al completar 3 lecturas dentro del rango se decrementa el 
 326   3                                              contador */
 327   3                                      if(cCountReading > cNumber_Count){
 328   4                                              cCountBack--;
 329   4                                              cCountReading = 0;
 330   4                                      }                                       
 331   3                      }else{
 332   3                              /* Si el dato no esta dentro del rango, se toma una nueva referencia
 333   3                                      y se reinicia la cuenta regresiva */
 334   3                              if(cShowCount == 1){
 335   4                                      LCD_GLASS_Clear();
 336   4                                      LCD_GLASS_String("   UN", LCD_PRECIO);
 337   4                                      LCD_GLASS_String("STABLE", LCD_TOTAL);
 338   4                                      for(cCountBack=0; cCountBack<20000; cCountBack++);
 339   4                                      for(cCountBack=0; cCountBack<20000; cCountBack++);
 340   4                              }
 341   3                              cCountReading = 0;
 342   3                              cCountBack = cSetCountBack;
 343   3                              fWeightAdc = fRead_Adc(cRunStable);
 344   3                              
 345   3                              if(cRunStable){
 346   4                                      srFlagScale.bFlagStable = 0;
 347   4                                      return (-100);
 348   4                              }
 349   3                      }
 350   2              }
 351   1              
 352   1              srFlagScale.bFlagStable = 1;
 353   1              return fWeightAdc;
 354   1      }
 355          
 356          /**
 357            ******************************************************************************
 358            * Objetivo: Calcular el numero de cuenta que se tomara como cero.
 359            * Parametros entrada: Ninguno.
 360                  * Parametros Salida: Ninguno.
 361            * Prerequisitos: Se usan las variables globales
 362                  *                       stScaleParam.cSetCalibrate, stScaleParam.fCapacityCali,  
 363                  *                       arDataDisplayLcd.
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 7   

 364                  *       Modifica las variables globales:
 365                  *                       stScaleParam.fPointZero, arDataDisplayLcd.
 366            ******************************************************************************
 367            */
 368          unsigned char cSetZeroPoint(void){      
 369   1      
 370   1      //////  unsigned char Value_Key_Press;
 371   1              float fWeightPlate = 0;         /* Calcula el peso del plato en numero de cuentas */
 372   1              float fPointZero = 0;
 373   1                      
 374   1              fPointZero = fStablePoint(0, 0, 0);
 375   1              
 376   1              if(srFlagScale.bScaleOn == 0){
 377   2                      return 2;                               
 378   2              }
 379   1      
 380   1              /*Se encuentra el peso actual del plato respecto al punto cero de calibracion */
 381   1              fWeightPlate = fPointZero - stScaleParam.fPointZeroCali;
 382   1              
 383   1              if(stScaleParam.cMsgUnload){
 384   2                      /* Verifica los rangos para los distintos avisos */
 385   2                      if(((fWeightPlate > (stScaleParam.fCapacityCali * 0.20)) && (fWeightPlate < (stScaleParam.fCapacityCali 
             -* 0.50))) ||
 386   2                                      (fWeightPlate < (-1)*(stScaleParam.fCapacityCali * 0.20))){
 387   3                              
 388   3                              /* Quita los simboloes de unidad de peso y Zero */
 389   3                              LCD_GLASS_Clear();
 390   3                              LCD_GLASS_String("  PLS", LCD_PESO);                            
 391   3                              LCD_GLASS_String("UNLOAD", LCD_TOTAL);  
 392   3                              
 393   3      ///////////                     //Auto_Off_On_5m;
 394   3                      
 395   3                              while(1){
 396   4                                      IWDG_KEY_REFRESH;
 397   4                                      if(srFlagScale.cWait_Time_Code || srFlagScale.bScaleOn == 0){
 398   5                                              return 2;                               
 399   5                                      }
 400   4                              }
 401   3                      }
 402   2              }
 403   1              
 404   1              if((fWeightPlate >= (stScaleParam.fCapacityCali * 0.50)) && fWeightPlate > 0){
 405   2                      
 406   2                      /* Quita los simboloes de unidad de peso y Zero */
 407   2                      LCD_GLASS_Clear();      
 408   2                      LCD_GLASS_String("HELP ", LCD_PRECIO);  
 409   2              
 410   2                      //Auto_Off_On_5m;
 411   2                      
 412   2                      while(1){
 413   3                              IWDG_KEY_REFRESH;
 414   3                              if(srFlagScale.cWait_Time_Code || srFlagScale.bScaleOn == 0){
 415   4                                      return 2;                               
 416   4                              }
 417   3                      }
 418   2                                      
 419   2              }else{
 420   2                      stScaleParam.fPointZero = fPointZero;
 421   2              }
 422   1              
 423   1              return 0;
 424   1      }
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 8   

 425          
 426          /**
 427            ******************************************************************************
 428            * Objetivo: Activar/Desactivar el uso de la Tara.
 429            * Parametros entrada: 
 430                  *               cActionTara -> Accion a ejecutar (ON) Activa la Tara, 
 431            *                                                                                                                                             (OFF) Desactiva la Tara.
 432                  * Parametros Salida: Retorna
 433                  *               (0) Para indicar que no se proceso la orden.
 434                  *               (1) Para indicar que se Desactivo o Activo la Tara.
 435            * Prerequisitos: Se usan las variables globales
 436                  *                       stScaleParam.fCapacityCali.
 437                  *       Modifica las variables globales:
 438                  *               stScaleParam.fPointZeroTara, stScaleParam.fPointZero.
 439            ******************************************************************************
 440            */
 441          void cOnOffModeTara(float fWeightTara){
 442   1              
 443   1              float fAdcCountTara = 0; 
 444   1              float fLimite_Inf = 0;
 445   1              float fLimite_Sup = 0;
 446   1              float fWeightZero = 0;
 447   1              float AuxTara = 0;
 448   1              
 449   1              fWeightZero = fStablePoint(1, 0, 1);
 450   1              
 451   1              if(srFlagScale.bFlagStable == 1){
 452   2              
 453   2                      if(fWeightTara > 0){
 454   3                              if(srFlagScale.bTara == 0){     
 455   4                                      
 456   4                                      if(stScaleParam.cUnits == UNIT_LB){
 457   5                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= stScaleParam.iCapacity){
 458   6                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 459   6                                                      srFlagScale.bTara = 1;
 460   6                                              }
 461   5                                      }else{
 462   5                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= 9.999){
 463   6                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 464   6                                                      srFlagScale.bTara = 1;
 465   6                                              }
 466   5                                      }
 467   4                              }else{
 468   4                                      if(stScaleParam.cUnits == UNIT_LB){
 469   5                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= stScaleParam.iCapacity){
 470   6                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 471   6                                              }
 472   5                                      }else{
 473   5                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) < 9.999){
 474   6                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 475   6                                              }
 476   5                                      }
 477   4                              }
 478   3                      }else if(fWeightTara < 0){
 479   3                              
 480   3                              if(srFlagScale.bTara){
 481   4                                      fWeightTara *= (-1);
 482   4                                      
 483   4                                      if(stScaleParam.cMultirango == 1){
 484   5                                              if(stScaleParam.fValueTara <= stScaleParam.fCapacityCali*0.2){
 485   6                                                              AuxTara = stScaleParam.fFactorCalibrate / stScaleParam.iDivisionMinima;
 486   6                                                              AuxTara *= stScaleParam.iDivisionMenor;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 9   

 487   6                                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*AuxTara);
 488   6                                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*AuxTara);
 489   6                                                      }else{
 490   6                                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*stScaleParam.fFactorCalibrate);
 491   6                                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*stScaleParam.fFactorCalibrate);
 492   6                                                      }
 493   5                                      }else{
 494   5                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*stScaleParam.fFactorCalibrate);
 495   5                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*stScaleParam.fFactorCalibrate);
 496   5                                      }
 497   4                                              
 498   4                                      if((fWeightTara >= fLimite_Inf) && (fWeightTara <= fLimite_Sup)){
 499   5                                              LCD_GLASS_Symbols(SYMBOL_NET, 0);
 500   5                                              stScaleParam.fValueTara = 0;
 501   5                                              srFlagScale.bTara = 0;
 502   5                                              stScaleParam.fPointZero = stScaleParam.fWeightScaleCount;
 503   5                                              fFilter_Averaging(fWeightZero, 1);      /*Ingresa el dato al filtro */
 504   5                                      }
 505   4                              }
 506   3                      }
 507   2                      
 508   2              }
 509   1      }
 510          
 511          /**
 512            ******************************************************************************
 513            * Objetivo: Establecer el punto Zero
 514            * Parametros entrada: Ninguno
 515                  * Parametros Salida: Retorna
 516            ******************************************************************************
 517            */
 518          void vSetZero(void){
 519   1              float fWeightZero = 0;
 520   1              
 521   1              /* Verifica si el peso es estable para volver cero */
 522   1              fWeightZero = fStablePoint(1, 0, 1);
 523   1                      
 524   1              if(srFlagScale.bFlagStable == 1){               
 525   2                      stScaleParam.fPointZero = fWeightZero;
 526   2              }
 527   1      }
 528          
 529          /**
 530            ******************************************************************************
 531            * Objetivo: Establecer el punto Zero dinamico
 532            * Parametros entrada: Ninguno
 533                  * Parametros Salida: Ninguno
 534            ******************************************************************************
 535            */
 536          void vGetZeroTracking(float fActualWeightScale){
 537   1              float fValor_Limite = 0;
 538   1              
 539   1              
 540   1              if(stScaleParam.cMultirango == 1){
 541   2                      fValor_Limite = stScaleParam.fFactorCalibrate/stScaleParam.iDivisionMinima;
 542   2                      fValor_Limite *= stScaleParam.iDivisionMenorMenor;
 543   2              }else   
 544   1                      fValor_Limite = stScaleParam.fFactorCalibrate;
 545   1              
 546   1              fValor_Limite /= 2; 
 547   1              
 548   1              if(fValor_Limite < 0){
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 10  

 549   2                      fValor_Limite *= (-1);
 550   2              }
 551   1              
 552   1              if(fActualWeightScale > (stScaleParam.fPointZero - fValor_Limite) &&
 553   1                      fActualWeightScale < (stScaleParam.fPointZero + fValor_Limite)){
 554   2                      
 555   2                      iCounterZeroTracking++;
 556   2                      if(iCounterZeroTracking >=15){
 557   3                              stScaleParam.fPointZero = fActualWeightScale;
 558   3                      }
 559   2              }else{
 560   2                      iCounterZeroTracking = 0;
 561   2              }
 562   1      }
 563          
 564          /**
 565            ******************************************************************************
 566            * Objetivo: Ejecutar el proceso de calibracion de la bascula 
 567            * Parametros entrada:  
 568                  * Parametros Salida:
 569            * Prerequisitos: 
 570            ******************************************************************************
 571            */
 572          void vCalibrate_Scale(void){
 573   1                    float xdata fAux_Value = 0;
 574   1                    float xdata fAuxCountAdcInicial = 0;
 575   1                    float xdata fAuxCountAdcFinal = 0;
 576   1                    float xdata fAuxCountDif = 0;
 577   1                    
 578   1                    stScaleParam.iCounter_Calibration++;  /* Aumenta el contador de calibraciones */ 
 579   1                    //CCC  vSaveParamScale(Parameter_Calibration);                                              
             -                                                /*Almacena los parametros en la E2prom*/
 580   1                                  
 581   1                    LCD_GLASS_Clear();
 582   1      #if DISPLAY_20400047_EN > 0
 583   1        LCD_GLASS_String("PRESS", LCD_PESO);
 584   1                    LCD_GLASS_String("REF 0", LCD_TOTAL);
 585   1                    LCD_GLASS_String("C", LCD_PRECIO);
 586   1      #else     
                LCD_GLASS_String("PRESS", LCD_PRECIO);
                            LCD_GLASS_String("REF 0", LCD_PESO);
                            LCD_GLASS_String("C", LCD_TOTAL);
              #endif
 591   1      
 592   1              
 593   1                    /* Espera a que se oprima 'C' para continuar */
 594   1                    Key=0;while(Key!= KEY_C)key_scan();
 595   1                                
 596   1                                  
 597   1      
 598   1                    
 599   1      
 600   1                    /* Solicita la referencia de zero */
 601   1                    //////////CCC stScaleParam.fPointZeroCali = fStablePoint(5, 1, 0);
 602   1                    
 603   1      
 604   1                    fAuxCountAdcInicial = stScaleParam.fPointZeroCali;
 605   1                                delay_ms(2000);//borrar  //CCC  
 606   1      
 607   1                    LCD_GLASS_Clear();
 608   1      #if DISPLAY_20400047_EN > 0
 609   1                    LCD_GLASS_String("PRESS", LCD_PESO);
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 11  

 610   1                    LCD_GLASS_String(" LOAD", LCD_TOTAL);
 611   1                    LCD_GLASS_String("C   ", LCD_PRECIO);
 612   1      #else
                            LCD_GLASS_String("PRESS", LCD_PRECIO);
                            LCD_GLASS_String(" LOAD", LCD_PESO);
                            LCD_GLASS_String("C     ", LCD_TOTAL);
              #endif
 617   1      
 618   1       /* Espera a que se oprima 'C' para continuar */
 619   1                    Key=0;while(Key!= KEY_C)key_scan();
 620   1      
 621   1      //CCC   //////////////     stScaleParam.fCapacityCali = fStablePoint(5, 1, 0);
 622   1                   
 623   1                    
 624   1                    fAuxCountAdcFinal = stScaleParam.fCapacityCali;
 625   1                    
 626   1                    fAuxCountDif = (fAuxCountAdcFinal - fAuxCountAdcInicial);
 627   1                    fAuxCountDif    *= (100/stScaleParam.iLoadPorcRefer);
 628   1                    
 629   1                    stScaleParam.fCapacityCali -= stScaleParam.fPointZeroCali;
 630   1                    stScaleParam.fCapacityCali *= (100/stScaleParam.iLoadPorcRefer);
 631   1                    
 632   1                    stScaleParam.fFactorCalibrate = (float)(stScaleParam.fCapacityCali);
 633   1                    fAux_Value = (float)(stScaleParam.iCapacity);
 634   1                    fAux_Value *= pow(10,(int)stScaleParam.cWeightDecimal);
 635   1                    fAux_Value = (float)(fAux_Value)/(float)(stScaleParam.iDivisionMinima);
 636   1                    stScaleParam.fFactorCalibrate /= fAux_Value;
 637   1                    
 638   1                    if(stScaleParam.fCapacityCali < 0){
 639   2                                  stScaleParam.fCapacityCali *= (-1);
 640   2                    }
 641   1      
 642   1                    LCD_GLASS_Clear();     
 643   1      #if DISPLAY_20400047_EN > 0
 644   1                    LCD_GLASS_String("FACTO", LCD_PESO);
 645   1                                LCD_GLASS_String("R", LCD_TOTAL);
 646   1                                //LCD_GLASS_Float(stScaleParam.fFactorCalibrate, 2, LCD_TOTAL);
 647   1                    LCD_GLASS_Dot(2, LCD_TOTAL, 1);
 648   1                    LCD_GLASS_String("  END", LCD_PRECIO);          
 649   1      #else
                            LCD_GLASS_String("  END", LCD_PESO);
                                        LCD_GLASS_String("R", LCD_TOTAL);
                            //LCD_GLASS_Float(stScaleParam.fFactorCalibrate, 2, LCD_TOTAL);     
                            LCD_GLASS_Dot(2, LCD_TOTAL, 1);
                            LCD_GLASS_String("FACTO", LCD_PRECIO);
              #endif
 656   1      
 657   1      
 658   1      
 659   1      
 660   1      ////////////////////////////////////////////////////////////////////////////              
 661   1                    /*Almacena los parametros en la E2prom*/       
 662   1                    //CCC vSaveParamScale(Parameter_Calibration);                                        
 663   1                    
 664   1      ///////////CCCCC/////////////CCCCC/////////////CCCCC/////////////CCCCC/////////////CCCCC//              vS
             -et_Volts_System();    
 665   1                    //CCC    vSaveParamScale(Parameter_Voltages);
 666   1                    
 667   1      ///////////CCCCC//BORRAR DE LA ESTRUCTURA ///////////////////////////////////           stScaleParam.fTemp
             -erature = fGet_Temp_Amb_Micro();
 668   1                    //CCC    vSaveParamScale(Parameter_Temperature);
 669   1      
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 12  

 670   1          vSound_Saved_Param();
 671   1                    vSound_Saved_Param();
 672   1                    
 673   1                    strTimer.cFLag_TimerE_Start = 1;
 674   1                    strTimer.cFLag_TimerE_End = 0;
 675   1                    
 676   1                    while(!strTimer.cFLag_TimerE_End)key_scan();
 677   1                    
 678   1                    LCD_GLASS_Clear();
 679   1      }
 680          
 681          
 682          /**
 683            ******************************************************************************
 684            * Objetivo: Configurar valores por default.
 685            * Parametros entrada:  
 686                  * Parametros Salida:
 687            * Prerequisitos: 
 688            ******************************************************************************
 689            */
 690          void vPreConfiguration(unsigned char cPreConfiguration){
 691   1              
 692   1              enum    digi_key Value_Key_Press;
 693   1              unsigned char cIndex = 0;
 694   1              
 695   1              strTimer.cFLag_TimerD_Start = 1;
 696   1              
 697   1              LCD_GLASS_Clear();
 698   1              
 699   1              stScaleParam.cMultirango = 1;
 700   1              stScaleParam.cLenguage = ESPANOL;
 701   1              
 702   1              if(cPreConfiguration == PreConfig15KG){
 703   2                      stScaleParam.iCapacity = 15;
 704   2                      stScaleParam.iDivisionMinima = 5;
 705   2                      stScaleParam.iDivisionMenor = 2;
 706   2                      stScaleParam.iDivisionMenorMenor = 1;
 707   2                      stScaleParam.cWeightDecimal = 3;
 708   2                      stScaleParam.cUnits = UNIT_KG;
 709   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 710   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 711   2              }else if(cPreConfiguration == PreConfig20KG){
 712   2                      stScaleParam.iCapacity = 20;
 713   2                      stScaleParam.iDivisionMinima = 5;
 714   2                      stScaleParam.iDivisionMenor = 2;
 715   2                      stScaleParam.iDivisionMenorMenor = 1;
 716   2                      stScaleParam.cWeightDecimal = 3;
 717   2                      stScaleParam.cUnits = UNIT_KG;
 718   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 719   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 720   2              }else if(cPreConfiguration == PreConfig30KG){
 721   2                      stScaleParam.iCapacity = 30;
 722   2                      stScaleParam.iDivisionMinima = 10;
 723   2                      stScaleParam.iDivisionMenor = 5;
 724   2                      stScaleParam.iDivisionMenorMenor = 2;
 725   2                      stScaleParam.cWeightDecimal = 3;
 726   2                      stScaleParam.cUnits = UNIT_KG;
 727   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 728   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 729   2              }else if(cPreConfiguration == PreConfig31KG){
 730   2                      stScaleParam.iCapacity = 30;
 731   2                      stScaleParam.iDivisionMinima = 5;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 13  

 732   2                      stScaleParam.iDivisionMenor = 2;
 733   2                      stScaleParam.iDivisionMenorMenor = 1;
 734   2                      stScaleParam.cWeightDecimal = 3;
 735   2                      stScaleParam.cUnits = UNIT_KG;
 736   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 737   2                      stScaleParam.cMoneda = MONEDA_PESOS;            
 738   2              }else if(cPreConfiguration == PreConfig32KG){
 739   2                      stScaleParam.iCapacity = 30;
 740   2                      stScaleParam.iDivisionMinima = 2;
 741   2                      stScaleParam.iDivisionMenor = 2;
 742   2                      stScaleParam.iDivisionMenorMenor = 2;
 743   2                      stScaleParam.cMultirango = 0;
 744   2                      stScaleParam.cWeightDecimal = 3;
 745   2                      stScaleParam.cUnits = UNIT_KG;
 746   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 747   2                      stScaleParam.cMoneda = MONEDA_PESOS;            
 748   2              }else if(cPreConfiguration == PreConfig40KG){
 749   2                      stScaleParam.iCapacity = 40;
 750   2                      stScaleParam.iDivisionMinima = 10;
 751   2                      stScaleParam.iDivisionMenor = 5;
 752   2                      stScaleParam.iDivisionMenorMenor = 2;
 753   2                      stScaleParam.cWeightDecimal = 3;
 754   2                      stScaleParam.cUnits = UNIT_KG;
 755   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 756   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 757   2              }else if(cPreConfiguration == PreConfig60LB){
 758   2                      stScaleParam.iCapacity = 60;
 759   2                      stScaleParam.iDivisionMinima = 2;
 760   2                      stScaleParam.cWeightDecimal = 2;
 761   2                      stScaleParam.cUnits = UNIT_LB;
 762   2                      stScaleParam.cLenguage = ENGLISH;
 763   2                      LCD_GLASS_Symbols(SYMBOL_LB, 1);
 764   2                      stScaleParam.cMoneda = MONEDA_DLLS;
 765   2                      stScaleParam.cMultirango = 0;
 766   2              }
 767   1              
 768   1              LCD_GLASS_Float(stScaleParam.iCapacity, stScaleParam.cWeightDecimal, LCD_PESO);
 769   1              
 770   1              stScaleParam.iLoadPorcRefer = 100;
 771   1              stScaleParam.cPuntoDecimalTotal = 2;
 772   1              stScaleParam.cRedondeoCifraTotal = 1;
 773   1              stScaleParam.cPuntoDecimalPrecio = 3;
 774   1              stScaleParam.cValorcRedondeoCifraVentaTotal = 0;
 775   1              stScaleParam.cZeroTracking = 1;
 776   1              stScaleParam.cMsgUnload = 1;
 777   1              stScaleParam.cTimeAutooff = 1;
 778   1              stScaleParam.cShowHighBat = 1;
 779   1              stScaleParam.cModeIncDiv = 0;
 780   1              stScaleParam.cCountRange = 5;
 781   1              stScaleParam.iCountOverload = 0;                
 782   1              stScaleParam.fValueOverload = 0;
 783   1              stScaleParam.cSaveBattery       = 0;
 784   1        stScaleParam.cFormatoImpresion = 2; 
 785   1              stScaleParam.cTypeBeeper = 0;
 786   1              
 787   1              stScaleParam.fVoltage_Batt = 0;
 788   1              stScaleParam.fVoltage_Adap = 0;
 789   1              
 790   1              stScaleParam.fCapacityCali = 0;
 791   1              stScaleParam.fPointZeroCali = 0;
 792   1              stScaleParam.fFactorCalibrate = 0;
 793   1              srFlagScale.bShowErroBat = 1;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 14  

 794   1              stScaleParam.fTemperature = 0;
 795   1              
 796   1              stScaleParam.fVenta_Total_Scale = 0;
 797   1              stScaleParam.iCounter_Calibration = 0;
 798   1              stScaleParam.iCounter_Configuration = 0;
 799   1      
 800   1              strTimer.cFLag_TimerE_Start = 1;
 801   1              
 802   1              Value_Key_Press = vActionKey();
 803   1              
 804   1              /* Espera a que se oprima la tecla 'MEM' o que pase el tiempo de 5 seg  */
 805   1              while((Value_Key_Press != KEY_MEM) && strTimer.cFLag_TimerE_End == 0){
 806   2                      IWDG_KEY_REFRESH;
 807   2                      
 808   2                      Value_Key_Press = vActionKey();
 809   2                      
 810   2                      if(srFlagScale.bScaleOn == 0){
 811   3                              return;
 812   3                      }else if(Value_Key_Press != KEY_NULL){
 813   3                              vBeep_Key();
 814   3                      }       
 815   2              }
 816   1              
 817   1              if(strTimer.cFLag_TimerE_End == 1){
 818   2                      LCD_GLASS_Clear();
 819   2                      LCD_GLASS_String("  OFF", LCD_PRECIO);
 820   2              
 821   2                      //Auto_Off_On_5m_Restart;
 822   2                      //Auto_Off_On_5m;
 823   2              
 824   2                      while(!srFlagScale.cWait_Time_Code){
 825   3                              IWDG_KEY_REFRESH;
 826   3                              vActionKey();
 827   3                              
 828   3                              if(srFlagScale.bScaleOn == 0){
 829   4                                      return;
 830   4                              }
 831   3                      }
 832   2                                      
 833   2                      srFlagScale.bScaleOn = 0;
 834   2                      return;
 835   2              }
 836   1              
 837   1              if(strTimer.cFLag_TimerE_End == 1){
 838   2                      /* Si se salio por tiempo no se configura la bascula */
 839   2                      LCD_GLASS_Clear();
 840   2              }else{
 841   2                      vSaveParamScale(Parameter_Temperature);
 842   2                      vSaveParamScale(Parameter_Voltages);
 843   2                      vSaveParamScale(Parameter_Configuration);
 844   2                      vSaveParamScale(Parameter_Calibration);
 845   2                      vSaveParamScale(Parameter_Register);
 846   2                      
 847   2                      LCD_GLASS_String("SAVED", LCD_PRECIO);
 848   2                      vSound_Saved_Param();
 849   2                      vSound_Saved_Param();
 850   2                      
 851   2                      strTimer.cFLag_TimerE_End = 0;
 852   2                      strTimer.cFLag_TimerE_Start = 1;
 853   2                      
 854   2                      Value_Key_Press = KEY_NULL;
 855   2                      
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 15  

 856   2                      /* Espera a que se oprima la tecla 'MEM' o que pase el tiempo de 5 seg  */
 857   2                      while((Value_Key_Press != KEY_MEM) && strTimer.cFLag_TimerE_End == 0){
 858   3                              IWDG_KEY_REFRESH;
 859   3                              Value_Key_Press = vActionKey();
 860   3                              
 861   3                              if(srFlagScale.bScaleOn == 0){
 862   4                                      return;
 863   4                              }
 864   3                      }
 865   2                      
 866   2                      if(Value_Key_Press == KEY_MEM){
 867   3                      ;
 868   3      //////////DESCOMENTAR////////////////////////////////////77///////////////////////                      vSpecial_Action(Funci
             -on_Especial);
 869   3                      }
 870   2              }
 871   1              
 872   1              LCD_GLASS_Clear();
 873   1              LCD_GLASS_String("  OFF", LCD_PRECIO);
 874   1              
 875   1              //Auto_Off_On_5m_Restart;
 876   1              //Auto_Off_On_5m;
 877   1              
 878   1              while(!srFlagScale.cWait_Time_Code){
 879   2                      IWDG_KEY_REFRESH;               
 880   2                      vActionKey();
 881   2                      
 882   2                      if(srFlagScale.bScaleOn == 0){
 883   3                              return;
 884   3                      }
 885   2              }
 886   1                                      
 887   1              srFlagScale.bScaleOn = 0;
 888   1              return;
 889   1      }
 890          
 891          
 892          /**
 893            ******************************************************************************
 894            * Objetivo: Calcular peso y registrar precio del producto 
 895            * Parametros entrada:
 896                  * Parametros Salida:
 897            * Prerequisitos: 
 898            ***
 899                  */
 900          unsigned char cRun_Scale(unsigned char bEnableKeys){
 901   1              
 902   1      //      enum    digi_key Value_Key_Press;
 903   1              
 904   1              /* Lee teclado y ejecuta las acciones correspondientes */
 905   1              if(bEnableKeys == 1){
 906   2                      vScan_Key();
 907   2              }
 908   1                      
 909   1              if(srFlagScale.cAuto_Off_Time == 1 && stScaleParam.cTimeAutooff == 1){
 910   2                      srFlagScale.bScaleOn = 0;
 911   2                      return 0;
 912   2              }
 913   1              
 914   1      ///////////////CCC//////////////////////7777777 vGestorBateria();
 915   1              
 916   1              if(srFlagScale.bMsgBatteryLow == 1){
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 16  

 917   2                      return 0;
 918   2              }
 919   1      
 920   1              if(srFlagScale.bOverLoad ==0){
 921   2                      if(srFlagScale.bSourceVoltage ==  SOURCE_ADAPTER){
 922   3                              LCD_GLASS_Symbols(SYMBOL_Y, 1);
 923   3                      }else{
 924   3                              LCD_GLASS_Symbols(SYMBOL_Y, 0);
 925   3                      }
 926   2              }
 927   1                                      
 928   1              srFlagScale.bFlagWeightNeg = 0;                 /* Clarea indicador de peso negativo */
 929   1      
 930   1      ///////////7CCCCCC //CCC        //CCC vCalculate_Weight();
 931   1      
 932   1              if(srFlagScale.bErrorResponseAdc == 1 || srFlagScale.bErrorReadAdc == 1){               
 933   2                      LCD_GLASS_String("-----", LCD_PESO);
 934   2                      LCD_GLASS_String("    -", LCD_PRECIO);
 935   2                      LCD_GLASS_String("     -", LCD_TOTAL);
 936   2                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);               
 937   2                      return 0;
 938   2              }
 939   1              
 940   1                      if(srFlagScale.bErrorNoiseAdc == 1){            
 941   2                      LCD_GLASS_String("-----", LCD_PESO);
 942   2                      LCD_GLASS_String("  ---", LCD_PRECIO);
 943   2                      LCD_GLASS_String("   ---", LCD_TOTAL);
 944   2                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);               
 945   2                      return 0;
 946   2              }
 947   1              
 948   1              if(srFlagScale.bOverLoad ==0){
 949   2                      
 950   2                      if(srFlagScale.bActiveSaveBattery == 1 && stScaleParam.cZeroTracking == 1 && 
 951   2                              fWeightScale == 0 && stScaleParam.cSaveBattery == 1 &&
 952   2                                      srFlagScale.bSourceVoltage !=  SOURCE_ADAPTER && srFlagScale.bTara == 0){
 953   3                              fSleep_Run();
 954   3                              
 955   3                              //CCC vCalculate_Weight();
 956   3                              
 957   3                              if(srFlagScale.bScaleOn == 0){
 958   4                                      return 0;
 959   4                              }
 960   3                      }
 961   2                      
 962   2                      // Verifica si esta la opcion fijar precio para mostrar indicador
 963   2                      if(srFlagScale.bFlagFijarPRecio){
 964   3                              LCD_GLASS_Symbols(SYMBOL_X, 1);
 965   3                      }else{
 966   3                              LCD_GLASS_Symbols(SYMBOL_X, 0);
 967   3                      }
 968   2                      
 969   2                      // Verfica el tipo de unidades a mostrar
 970   2                      if(stScaleParam.cUnits == UNIT_KG){
 971   3                              LCD_GLASS_Symbols(SYMBOL_KG, 1);
 972   3                      }else if(stScaleParam.cUnits == UNIT_LB){
 973   3                              LCD_GLASS_Symbols(SYMBOL_LB, 1);
 974   3                      }
 975   2                      
 976   2                      if(fWeightScale > -0.0005 && fWeightScale < 0.0005){
 977   3                              LCD_GLASS_Symbols(SYMBOL_ZERO, 1);
 978   3                      }else{
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 17  

 979   3                              LCD_GLASS_Symbols(SYMBOL_ZERO, 0);
 980   3                              //Restart_Sleep_Time;
 981   3                      }
 982   2              }
 983   1                      
 984   1              srFlagScale.bFlagNeg = 0;       
 985   1              
 986   1              if(srFlagScale.bShowCountADC){
 987   2                      
 988   2                      vWeight_Positive();
 989   2                      
 990   2              }else{
 991   2                      // Verifica si el peso es negativo
 992   2                      if(fWeightScale < 0){
 993   3                              vWeight_Negative();                     
 994   3                      }else{                  
 995   3                              vWeight_Positive();                     
 996   3                      }
 997   2              }
 998   1              
 999   1                      if(srFlagScale.bTara){
1000   2                              if((fWeightLight >= stScaleParam.fValueTara+20*stScaleParam.fFactorCalibrate) && srFlagScale.bBateriaLo
             -w == 0){
1001   3                                      if(stScaleParam.cBacklight){OnBackLight;}
1002   3                                      strTimer.cFLag_TimerJ_Start = 1;
1003   3                                      srFlagScale.bBacklight_On = 1;
1004   3                              }else{
1005   3                                      if(srFlagScale.bSourceVoltage != SOURCE_ADAPTER && strTimer.cFLag_TimerJ_End == 1){
1006   4                                              OffBackLight;
1007   4                                              srFlagScale.bBacklight_On = 0;
1008   4                                      }
1009   3                              }
1010   2                              
1011   2                      }else{
1012   2                              if((fWeightLight >= stScaleParam.fPointZero+20*stScaleParam.fFactorCalibrate) && srFlagScale.bBateriaLo
             -w == 0){
1013   3                                              if(stScaleParam.cBacklight){OnBackLight;}
1014   3                                              strTimer.cFLag_TimerJ_Start = 1;
1015   3                                              srFlagScale.bBacklight_On = 1;
1016   3                                      }else{
1017   3                                              if(srFlagScale.bSourceVoltage != SOURCE_ADAPTER && strTimer.cFLag_TimerJ_End == 1){
1018   4                                                      OffBackLight;
1019   4                                                      srFlagScale.bBacklight_On = 0;
1020   4                                      }
1021   3                              }
1022   2                      } 
1023   1              
1024   1              return 0;
1025   1      }
1026          
1027          /**
1028            ******************************************************************************
1029            * Objetivo: Funcionamiento normal con peso mayor igual a cero 
1030            * Parametros entrada:
1031                  * Parametros Salida:
1032            * Prerequisitos: 
1033            ***
1034                  */
1035          void vWeight_Positive(void){
1036   1              
1037   1              float fWeightOverload = 0;
1038   1              
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 18  

1039   1              float fOverloadUnit =  (float)stScaleParam.iCapacity + 
1040   1                                              ((float)(stScaleParam.iDivisionMinima)/(float)(pow(10, (int)stScaleParam.cWeightDecimal)))*9;
1041   1              
1042   1      /////////////CCC/////////////CCC/////////////CCC/////////////CCC        fOverloadUnit = fRoundFloat(fOverloadUnit
             -, (int)stScaleParam.cWeightDecimal, stScaleParam.iDivisionMinima);
1043   1              
1044   1              fWeightOverload = stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial;
1045   1              
1046   1              /* Verifca que no exista la condicion de sobrepeso */
1047   1              if((fWeightOverload > stScaleParam.fWeightOverload || stScaleParam.fWeightScale > fOverloadUnit)  &&
1048   1                              srFlagScale.bTopeSobrePeso == 0){
1049   2                              
1050   2                      if(srFlagScale.bOverLoad == 0){
1051   3                              stScaleParam.iCountOverload++;          
1052   3                              vSaveParamScale(Parameter_Overload);
1053   3                      }
1054   2                      
1055   2                      srFlagScale.bOverLoad = 1;
1056   2                      
1057   2                      vGestorBateria();
1058   2                      
1059   2                      /* Cuando existe sobrepeso lo indica en la LCD*/
1060   2                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);
1061   2                      LCD_GLASS_String("      ", LCD_TOTAL);
1062   2                      
1063   2                      if(stScaleParam.cLenguage == ESPANOL){
1064   3                              LCD_GLASS_String("SOBRE", LCD_PESO);
1065   3                              LCD_GLASS_String(" PESO", LCD_PRECIO);
1066   3                      }else{
1067   3                              LCD_GLASS_String("OVER ", LCD_PESO);
1068   3                              LCD_GLASS_String(" LOAD", LCD_PRECIO);
1069   3                      }
1070   2                      
1071   2                      strTimer.cFLag_TimerA_Start= 1;
1072   2                      strTimer.cFLag_TimerA_End = 0;
1073   2                      while(!strTimer.cFLag_TimerA_End){
1074   3                              IWDG_KEY_REFRESH;
1075   3                      }       
1076   2                      
1077   2                      if(stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial > stScaleParam.fValueOverload){
1078   3                              stScaleParam.fValueOverload = stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial;
1079   3                              vSaveParamScale(Parameter_Overload);
1080   3                      }
1081   2                      
1082   2                      //Restart_Sleep_Time;
1083   2                      
1084   2              }else{
1085   2                      srFlagScale.bOverLoad = 0;
1086   2                      
1087   2                      // Despliega el peso registrado
1088   2                      LCD_GLASS_Float(stScaleParam.fWeightScale, (int)stScaleParam.cWeightDecimal, LCD_PESO);
1089   2                                              
1090   2                      // Verifica si la opcion fijar precio no esta activada
1091   2                      if(!srFlagScale.bFlagFijarPRecio){
1092   3                              if(stScaleParam.fWeightScale == 0 && fWeightScaleBefore > 0){
1093   4                                      stScaleParam.fPrice_Unit = 0;
1094   4                                      stScaleParam.cNumberDecimalPrice = 0;
1095   4                                      srFlagScale.bDotDecimalPrice = 0;
1096   4                                      stScaleParam.cNumberDecimalPrice = 0;
1097   4                              }
1098   3                      }
1099   2                      
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 19  

1100   2                      if(stScaleParam.fWeightScale != fWeightScaleBefore){
1101   3                              //Auto_Off_On_15m;
1102   3                              //Restart_Sleep_Time;
1103   3                      }
1104   2                              
1105   2                      fWeightScaleBefore = stScaleParam.fWeightScale;
1106   2                      
1107   2                      // Muestra el precio x unidad del producto
1108   2                      if(stScaleParam.fWeightScale == 0 && srFlagScale.bFlagFijarPRecio == 0 && srFlagScale.bPrecioCero == 0){
1109   3                              srFlagScale.bPrecioCero = 1;
1110   3                      }
1111   2                      
1112   2                      if(stScaleParam.cPuntoDecimalPrecio < 3){
1113   3                              LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cPuntoDecimalPrecio, LCD_PRECIO);
1114   3                      }else{
1115   3                              LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cNumberDecimalPrice, LCD_PRECIO);
1116   3                      }
1117   2                      
1118   2                      stScaleParam.fTotal_Venta = stScaleParam.fPrice_Unit * stScaleParam.fWeightScale;
1119   2                                              
1120   2              /////////CCC/////////CCC/////////CCC/////////CCC/////////CCC stScaleParam.fTotal_Venta = fRoundFlo
             -at(stScaleParam.fTotal_Venta, 
1121   2                       /////////CCC/////////CCC/////////CCC/////////CCC//////  stScaleParam.cPuntoDecimalTotal, stScaleParam.c
             -ValorRedondeoCifraTotal);
1122   2                      
1123   2                      /*Verifica si el valor del total excede el limite a mostrar en la LCD*/
1124   2                      if(stScaleParam.fTotal_Venta > (999999 / (float)(pow(10,stScaleParam.cPuntoDecimalTotal)))){
1125   3                              LCD_GLASS_String("------", LCD_TOTAL);
1126   3                      }else{
1127   3                              if(stScaleParam.fTotal_Venta > 0){
1128   4                                      LCD_GLASS_Float(stScaleParam.fTotal_Venta, stScaleParam.cPuntoDecimalTotal, LCD_TOTAL);
1129   4                              }else{
1130   4                                      LCD_GLASS_Float(0, 0, LCD_TOTAL);
1131   4                              }
1132   3                      }
1133   2              }
1134   1      }
1135          
1136          /**
1137            ******************************************************************************
1138            * Objetivo: Bloqueo del sistema por peso negativo 
1139            * Parametros entrada:
1140                  * Parametros Salida:
1141            * Prerequisitos: 
1142            ***
1143                  */
1144          void vWeight_Negative(void){
1145   1              
1146   1              srFlagScale.bFlagNeg = 1;
1147   1              srFlagScale.bOverLoad = 0;
1148   1              
1149   1              /* En caso de un peso negativo verifica que no sea menor al peso tarado*/
1150   1              if((srFlagScale.bTara == 1) && ((-1)*stScaleParam.fWeightScale <= fCuentasToPeso(stScaleParam.fValueTara)
             -)){                
1151   2                      LCD_GLASS_Float(stScaleParam.fWeightScale, (int)stScaleParam.cWeightDecimal, LCD_PESO);
1152   2              }else{
1153   2                      LCD_GLASS_String("-----", LCD_PESO);
1154   2              }
1155   1              
1156   1              if(srFlagScale.bFlagFijarPRecio){
1157   2                      LCD_GLASS_String("------", LCD_TOTAL);
1158   2              }else{
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 20  

1159   2                      stScaleParam.fPrice_Unit = 0;
1160   2                      stScaleParam.cNumberDecimalPrice = 0;
1161   2                      stScaleParam.fTotal_Venta = 0;
1162   2                      LCD_GLASS_String("     0", LCD_TOTAL);
1163   2              }
1164   1                      
1165   1              if(stScaleParam.cPuntoDecimalPrecio < 3){
1166   2                      LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cPuntoDecimalPrecio, LCD_PRECIO);
1167   2              }else{
1168   2                      LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cNumberDecimalPrice, LCD_PRECIO);
1169   2              }
1170   1              
1171   1              /* Elimina el indicador de cero al presentar peso negativo */
1172   1              LCD_GLASS_Symbols(SYMBOL_ZERO, 0);                      
1173   1      }
1174          
1175          /**
1176            ******************************************************************************
1177            * Objetivo: Calcular el peso.
1178            * Parametros entrada:
1179                  * Parametros Salida:
1180            * Prerequisitos: 
1181            ***
1182                  */
1183          
1184          void vCalculate_Weight (void){
1185   1      /***************
1186   1      Se toman 3 lecturas para garantizar el peso al realizar las sumas c/precio fijo, 
1187   1      si no hay precio fijo realiza solo una lectura de forma natural.
1188   1      ******************/     
1189   1              char i = 0, cCountPrecioFijo = 0;
1190   1      
1191   1              if(srFlagScale.bFlagFijarPRecio){       
1192   2                      cCountPrecioFijo = 3;                                           
1193   2              }
1194   1              else{
1195   2                      cCountPrecioFijo = 1;                   
1196   2              }
1197   1      
1198   1              for(i=0; i < cCountPrecioFijo; i++){
1199   2                      fWeightScale = fRead_Adc(1);                                    /* Solicita el peso actual */
1200   2              }
1201   1              
1202   1              if(srFlagScale.bErrorResponseAdc == 1 || srFlagScale.bErrorReadAdc == 1){
1203   2                      LCD_GLASS_String(" -E- ", LCD_PESO);
1204   2                      return;
1205   2              }
1206   1              
1207   1              // Si esta la funcion ZeroTracking la ejecuta
1208   1              if(stScaleParam.cZeroTracking == 1 && srFlagScale.bTara == 0){
1209   2                      vGetZeroTracking(fWeightScale);
1210   2              }
1211   1              
1212   1              stScaleParam.fWeightScaleCount = fWeightScale;
1213   1              
1214   1              fWeightLight = fWeightScale;
1215   1              
1216   1              // Calcula peso bruto (numero de cuentas ADC del peso)
1217   1              fWeightScale -= stScaleParam.fPointZero;        
1218   1              stScaleParam.fWeightScaleTara = fWeightScale;
1219   1                      
1220   1              if(srFlagScale.bShowCountADC == 1){
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 21  

1221   2                      fWeightScale = fCuentasToPeso(stScaleParam.fWeightScaleCount);
1222   2              }else{
1223   2                              /* Verifica si esta la opcion de tara activada para mostrar indicador NET */
1224   2                      if(srFlagScale.bTara == 1){
1225   3                              fWeightLight = fWeightScale; 
1226   3                              fWeightScale -= stScaleParam.fValueTara;                        
1227   3                              if(srFlagScale.bOverLoad ==0){
1228   4                                      LCD_GLASS_Symbols(SYMBOL_NET, 1);
1229   4                              }
1230   3                      }               
1231   2                      fWeightScale = fCuentasToPeso(fWeightScale);            
1232   2              }
1233   1              
1234   1              if(fWeightScale < 0 && srFlagScale.bShowCountADC == 0){
1235   2                      srFlagScale.bFlagWeightNeg = 1;
1236   2              }else if(fWeightScale == 0){
1237   2                      srFlagScale.bFlagWeightNeg = 0;
1238   2              }
1239   1              
1240   1              stScaleParam.fWeightScale = fWeightScale;
1241   1      }
1242          
1243          /**
1244            ******************************************************************************
1245            * Objetivo: Redondea numero flotante.
1246            * Parametros entrada: Ninguno
1247                  * Parametros Salida: Ninguno
1248            ******************************************************************************
1249            */
1250          float fCuentasToPeso(float fCountADC){
1251   1              
1252   1              float fAuxFactorC = 0;
1253   1              float fPesoFinal = 0; 
1254   1              float fPesoAux = 0;
1255   1              long iAuxPeso = 0;
1256   1              float arfFactorMult = 0;
1257   1              char cFlagNeg = 0;
1258   1              
1259   1              if(fCountADC < 0){
1260   2                      cFlagNeg = 1;
1261   2                      fCountADC *= (-1);
1262   2              }
1263   1              
1264   1              if(stScaleParam.cMultirango == 0){
1265   2                      arfFactorMult = (float)(stScaleParam.iDivisionMinima)/pow(10,(int)stScaleParam.cWeightDecimal);
1266   2                      fPesoAux = fCountADC/stScaleParam.fFactorCalibrate;     
1267   2              }else{
1268   2                      if (fCountADC <= stScaleParam.fCapacityCali*0.10){
1269   3                              fAuxFactorC = 0;
1270   3                              fAuxFactorC = (float)(stScaleParam.iDivisionMenorMenor)/(float)(stScaleParam.iDivisionMinima);
1271   3                              arfFactorMult = (float)(stScaleParam.iDivisionMenorMenor)/pow(10,(int)stScaleParam.cWeightDecimal);
1272   3                              fPesoAux = fCountADC/(stScaleParam.fFactorCalibrate*fAuxFactorC);                       
1273   3                      }               
1274   2                      else if (fCountADC <= stScaleParam.fCapacityCali*0.20){
1275   3                              fAuxFactorC = (float)(stScaleParam.iDivisionMenor)/(float)(stScaleParam.iDivisionMinima);
1276   3                              arfFactorMult = (float)(stScaleParam.iDivisionMenor)/pow(10,(int)stScaleParam.cWeightDecimal);
1277   3                              fPesoAux = fCountADC/(stScaleParam.fFactorCalibrate*fAuxFactorC);
1278   3                      }       
1279   2                      else{
1280   3                              arfFactorMult = (float)(stScaleParam.iDivisionMinima)/pow(10,(int)stScaleParam.cWeightDecimal);
1281   3                              fPesoAux = fCountADC/stScaleParam.fFactorCalibrate;
1282   3                      }
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 22  

1283   2              }
1284   1              
1285   1              iAuxPeso = (long)fPesoAux;      
1286   1              
1287   1              fPesoAux -= (float)iAuxPeso;
1288   1              iAuxPeso += (long)(fPesoAux*2);
1289   1              fPesoFinal = (float)iAuxPeso*arfFactorMult;
1290   1              
1291   1              if(cFlagNeg){
1292   2                      fPesoFinal *= (-1);
1293   2              }
1294   1              
1295   1              return fPesoFinal;
1296   1      }
1297          
1298          /**
1299            ******************************************************************************
1300            * Objective: To Reduce the power consumption of the load cell.
1301            ******************************************************************************
1302                  */
1303          float fSleep_Run(void){
1304   1              
1305   1              float fWeightScale = 0;
1306   1              float fValueReturn = 0;
1307   1              float fLimite = 0;
1308   1              int i = 0 ;     
1309   1              unsigned char cFlag_Continue = 1;       //Flag para 
1310   1              
1311   1              //Variable para rotar el mensaje
1312   1              unsigned char strMsgSaveBatt[16];
1313   1              unsigned char strSave[6] = {0,0,0,0,0,0};
1314   1              unsigned char strBatt[7] = {0,0,0,0,0,0,0};
1315   1              unsigned char cDataTemp = 0;
1316   1              unsigned char cDataTemp1 = 0;
1317   1              unsigned char bStatus_Battery = 0;
1318   1      
1319   1              
1320   1              strcpy(strMsgSaveBatt, "---------- ");
1321   1              
1322   1              fLimite = fCuentasToPeso(stScaleParam.fFactorCalibrate);
1323   1              
1324   1              Time_Sleep;     //Reinicia el contador para realizar lectura del ADC
1325   1              
1326   1              for(i=0; i<11; i++){
1327   2                      if(i<5){
1328   3                              strSave[i] = strMsgSaveBatt[i];
1329   3                      }else if(i<11){
1330   3                              strBatt[i-5] = strMsgSaveBatt[i];
1331   3                      }
1332   2              }
1333   1              
1334   1              OffBackLight;//GPIO_ResetBits(GPIOA, BACK_LIGHT);       //Off BackLight
1335   1                                      
1336   1              LCD_GLASS_Symbols(SYMBOL_ALL, 0);
1337   1              LCD_GLASS_String("-----", LCD_PRECIO);
1338   1              LCD_GLASS_String("------", LCD_TOTAL);
1339   1              LCD_GLASS_Float(0, 0, LCD_PESO);
1340   1              
1341   1              while(cFlag_Continue){
1342   2                      //Verifica por que salio del Wait
1343   2                      if(srFlagScale.bScaleOn == 0){ //Si se oprimio la tecla On
1344   3                              cFlag_Continue = 0;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 23  

1345   3                      }else if(strTimer.cFLag_TimerB_End){ //Si ya pasaron 3 segundos
1346   3                              
1347   3                              fWeightScale = fRead_Adc(0);
1348   3                              
1349   3                              // Si esta la funcion ZeroTracking la ejecuta
1350   3                              if(stScaleParam.cZeroTracking == 1 && srFlagScale.bTara == 0){
1351   4                                      vGetZeroTracking(fWeightScale);
1352   4                              }
1353   3                              
1354   3                              stScaleParam.fWeightScaleCount = fWeightScale;
1355   3                              
1356   3                              // Calcula peso bruto (numero de cuentas ADC del peso)
1357   3                              fWeightScale -= stScaleParam.fPointZero;
1358   3                              fValueReturn = fWeightScale;
1359   3                              fWeightScale = fCuentasToPeso(fWeightScale);
1360   3                              
1361   3                              if(fWeightScale >= fLimite || fWeightScale < (-1)*(fLimite)){
1362   4                                      cFlag_Continue = 0;
1363   4                              }else if(vActionKey() != KEY_NULL){
1364   4                                      cFlag_Continue = 0;
1365   4                                      vBeep_Key();
1366   4                              }                               
1367   3                              
1368   3                              if(cFlag_Continue){                             
1369   4                                      
1370   4                                      //Verifica si ya esta conectado el elimnador para salir de bajo consumo
1371   4                                      bStatus_Battery = uGet_Status_Volt();
1372   4                                      
1373   4                                      if(bStatus_Battery != SOURCE_ADAPTER){ 
1374   5                                              vGestorBateria();
1375   5                                      }else{
1376   5                                              cFlag_Continue = 0;
1377   5                                      }
1378   4                                      
1379   4                                      if(srFlagScale.bMsgBatteryLow == 0){
1380   5                                              //Muestra animacion de lineas 
1381   5                                              
1382   5                                              cDataTemp = strMsgSaveBatt[0];
1383   5                                              
1384   5                                              for(i=0; i<14; i++){
1385   6                                                      strMsgSaveBatt[i] = strMsgSaveBatt[i+1];
1386   6                                              }
1387   5                                              
1388   5                                              strMsgSaveBatt[10] = cDataTemp;
1389   5                                              
1390   5                                              for(i=0; i<11; i++){
1391   6                                                      if(i<5){
1392   7                                                              strSave[i] = strMsgSaveBatt[i];
1393   7                                                      }else if(i<11){
1394   7                                                              strBatt[i-5] = strMsgSaveBatt[i];
1395   7                                                      }
1396   6                                              }
1397   5                                              
1398   5                                              LCD_GLASS_String("    0", LCD_PESO);
1399   5                                              LCD_GLASS_String(strSave, LCD_PRECIO);
1400   5                                              LCD_GLASS_String(strBatt, LCD_TOTAL);
1401   5                                      }
1402   4                                      
1403   4                                      Time_Sleep;
1404   4                              }
1405   3                      }else if(vActionKey() != KEY_NULL){
1406   3                              cFlag_Continue = 0;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 13:05:50 PAGE 24  

1407   3                              vBeep_Key();
1408   3                      }
1409   2                      
1410   2                      if(srFlagScale.bScaleOn == 0){
1411   3                              cFlag_Continue = 0;
1412   3                      }
1413   2                      
1414   2                      if(srFlagScale.cAuto_Off_Time == 1 && stScaleParam.cTimeAutooff == 1){
1415   3                              srFlagScale.bScaleOn = 0;
1416   3                              cFlag_Continue = 0;
1417   3                      }
1418   2              }       
1419   1              
1420   1              if(srFlagScale.bBacklight_On){
1421   2                      if(stScaleParam.cBacklight){OnBackLight;}
1422   2              }
1423   1              
1424   1      ///////CCC///////CCC    CLK_PeripheralClockConfig(CLK_Peripheral_ADC1, ENABLE);
1425   1              //Restart_Sleep_Time;
1426   1              //Auto_Off_On_15m;
1427   1              
1428   1              return fValueReturn;
1429   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9162    ----
   CONSTANT SIZE    =    204    ----
   XDATA SIZE       =    197     168
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
