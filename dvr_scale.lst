C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE DVR_SCALE
OBJECT MODULE PLACED IN dvr_scale.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE _scale\dvr_scale.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\dvr_scale.lst) O
                    -BJECT(dvr_scale.obj)

line level    source

   1          /* Includes ------------------------------------------------------------------*/
   2          #include <stdio.h>
   3          #include <math.h>
   4          #include <string.h>
   5          //#include "stm8l15x.h"
   6          //#include "stm8l15x_iwdg.h"
   7          //#include "main.h"
   8          //#include "dvr_lcd.h"
   9          //#include "dvr_def.h"
  10          //#include "dvr_e2prom.h"       
  11          //#include "dvr_HX712.h"
  12          //#include "dvr_keyboard.h"
  13          #include "dvr_scale.h"
  14          //#include "dvr_battery.h"
  15          //#include "dvr_inicio.h"
  16          
  17          #include "./_data_nvm/data_nvm_5219_Vc_Dec09_13.h"      
  18          #include "./_scale/dvr_def.h"
  19          #include "./_display/dvr_lcd_SDI1621.h"
  20          #include "./customer/keyboard.h"
  21          #include "./_weight/dvr_HX712.h"
  22          #include "./_scale/dvr_scale.h"
  23          #include "./_battery/dvr_battery.h"
  24          
  25          /*
  26          #define ADDRESS_SCALE_CONFIG_PAGE    ADDRESS_PAGE_27
  27          #define ADDRESS_QLTY_AND_CNTRS_PAGE  ADDRESS_PAGE_28
  28          #define ADDRESS_PLU                  ADDRESS_PAGE_29
  29          */
  30          
  31          /* --- Direcciones en la EEPROM de los valores */
  32          #define ADDR_SET_CALIBRATE                      ADDRESS_SCALE_CONFIG_PAGE + 0   /* 1 byte */
  33          #define ADDR_CAPACITY_CALI                      ADDRESS_SCALE_CONFIG_PAGE + 1   /* 4 byte */
  34          #define ADDR_POINT_ZERO                         ADDRESS_SCALE_CONFIG_PAGE + 5   /* 4 byte */
  35          #define ADDR_FACTOR_CALIBRATE       ADDRESS_SCALE_CONFIG_PAGE + 9       /* 4 byte */
  36          #define ADDR_LENGUAGE                           ADDRESS_SCALE_CONFIG_PAGE + 13  /* 1 byte */
  37          #define ADDR_UNITS                                      ADDRESS_SCALE_CONFIG_PAGE + 14  /* 1 byte */
  38          #define ADDR_CAPACITY                           ADDRESS_SCALE_CONFIG_PAGE + 15  /* 2 byte */
  39          #define ADDR_PORC_REF                           ADDRESS_SCALE_CONFIG_PAGE + 17  /* 2 byte */
  40          #define ADDR_DIVISION_MINIMA            ADDRESS_SCALE_CONFIG_PAGE + 19  /* 2 byte */
  41          #define ADDR_DECIMAL_TOTAL                      ADDRESS_SCALE_CONFIG_PAGE + 21  /* 1 byte */
  42          #define ADDR_REDONDEO_TOTAL             ADDRESS_SCALE_CONFIG_PAGE + 22  /* 1 byte */
  43          #define ADDR_REDONDEO_VENTA             ADDRESS_SCALE_CONFIG_PAGE + 23  /* 1 byte */
  44          #define ADDR_DECIMAL_PRECIO             ADDRESS_SCALE_CONFIG_PAGE + 24  /* 1 byte */
  45          #define ADDR_ZERO_TRACKING                      ADDRESS_SCALE_CONFIG_PAGE + 25  /* 1 byte */
  46          #define ADDR_FORMATO_IMPRESION      ADDRESS_SCALE_CONFIG_PAGE + 26      /* 1 byte */
  47          #define ADDR_MSG_UNLOAD                                  ADDRESS_SCALE_CONFIG_PAGE + 27 /* 1 byte */
  48          #define ADDR_TIME_OFF                                    ADDRESS_SCALE_CONFIG_PAGE + 28 /* 1 byte */
  49          
  50          #define ADDR_MODELO                                                      ADDRESS_SCALE_CONFIG_PAGE + 38 /* 1 byte */
  51          #define ADDR_BACKLIGHT                                   ADDRESS_SCALE_CONFIG_PAGE + 40 /* 1 byte */
  52          #define ADDR_MSGBAT                                                      ADDRESS_SCALE_CONFIG_PAGE + 42 /* 1 byte */
  53          #define ADDR_DEBUG                                                       ADDRESS_SCALE_CONFIG_PAGE + 43 /* 2 byte */
  54          #define ADDR_COUNT_RANGE                                 ADDRESS_SCALE_CONFIG_PAGE + 55 /* 2 byte */
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 2   

  55          #define ADDR_MONEDA                                                      ADDRESS_SCALE_CONFIG_PAGE + 60 /* 1 byte */
  56          
  57          #define ADDR_DECIMAL_WEIGHT                      ADDRESS_SCALE_CONFIG_PAGE + 84  /* 2 bytes */
  58          #define ADDR_TEMPERATURE                                 ADDRESS_SCALE_CONFIG_PAGE + 86         /* 4 Bytes */
  59          #define ADDR_VOLT_BATT                                   ADDRESS_SCALE_CONFIG_PAGE + 90  /* 4 Bytes */
  60          #define ADDR_VOLT_ADAP                                   ADDRESS_SCALE_CONFIG_PAGE + 94  /* 4 Bytes */
  61          #define ADDR_SAVEBATT                                            ADDRESS_SCALE_CONFIG_PAGE + 98  /* 1 byte */
  62          
  63          #define ADDR_DIVISION_MENOR                      ADDRESS_SCALE_CONFIG_PAGE + 100        /* 2 bytes */
  64          #define ADDR_MULTIRANGO                                  ADDRESS_SCALE_CONFIG_PAGE + 102        /* 1 byte */
  65          
  66          #define ADDR_DIVISION_MENORMENOR  ADDRESS_SCALE_CONFIG_PAGE + 107       /* 2 bytes */
  67          
  68          #define ADDR_COUNTER_CALIBRATION  ADDRESS_QLTY_AND_CNTRS_PAGE + 29      /* 1 byte */
  69          #define ADDR_COUNTER_CONFIGURATION  ADDRESS_QLTY_AND_CNTRS_PAGE + 31    /* 1 byte */
  70          #define ADDR_COUNT_OVERLOAD                      ADDRESS_QLTY_AND_CNTRS_PAGE + 61  /* 2 bytes */
  71          #define ADDR_VALUE_OVERLOAD                      ADDRESS_QLTY_AND_CNTRS_PAGE + 63  /* 4 bytes */
  72          #define ADDR_ERRORBATT                                   ADDRESS_QLTY_AND_CNTRS_PAGE + 99  /* 1 byte */
  73          #define ADDR_VENTA_TOTAL                                 ADDRESS_QLTY_AND_CNTRS_PAGE + 103   /* 4 bytes */
  74          
  75          float fWeightScale = 0;                                                                 /* Contiene el valor del peso leido */
  76          float fWeightScaleBefore = 0;
  77          float fWeightLight = 0;
  78          struct Parameter stScaleParam;  /* Contiene los parametros de uso de la Bascula*/
  79          struct FlagScale srFlagScale;           /* Contiene las banderas del sistema */
  80          
  81          int iCounterZeroTracking = 0;
  82          
  83          extern int iCountFailRead;
  84          extern int iCountFailResponse;
  85          
  86          /* --- Prototype Function ----------------------------------------------------*/
  87          void vSaveParamScale(unsigned char cType_Parameter);
  88          void vCalibrate_Scale(void);
  89          void vWeight_Positive(void);
  90          void vWeight_Negative(void);
  91          unsigned char cProduct_Varios(void);
  92          //void vSend_Data_Serial(void);
  93          float fCuentasToPeso(float fCountADC);
  94          void vPrintZero(void);
  95          void vSend_Value(float fValue1, unsigned char uActive1, float fValue2, unsigned char uActive2, float fValu
             -e3, unsigned char uActive3);
  96          float fSleep_Run(void);
  97          
  98          /**
  99            ******************************************************************************
 100            * Objetivo: Asignar valores de parametros de la bascula.
 101            * Parametros entrada: Ninguno.
 102                  * Parametros Salida: Ninguno.
 103            * Prerequisitos: Modifica las variables globales de la estruct stScaleParam
 104            ******************************************************************************
 105            */
 106          void vReadParamScale(void){
 107   1              stScaleParam.fCapacityCali              = flash_read_float32(ADDR_CAPACITY_CALI);
 108   1              stScaleParam.fPointZeroCali             = flash_read_float32(ADDR_POINT_ZERO);
 109   1              stScaleParam.fFactorCalibrate = flash_read_float32(ADDR_FACTOR_CALIBRATE);
 110   1              stScaleParam.fValueTara                         = 0;
 111   1              
 112   1              stScaleParam.cMultirango        = flash_read_u8(ADDR_MULTIRANGO);
 113   1              stScaleParam.cLenguage                          = flash_read_u8(ADDR_LENGUAGE);
 114   1              stScaleParam.cUnits                                     = flash_read_u8(ADDR_UNITS);
 115   1              stScaleParam.cFormatoImpresion                          = flash_read_u8(ADDR_FORMATO_IMPRESION);
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 3   

 116   1              stScaleParam.iCapacity                          =       flash_read_u16(ADDR_CAPACITY);
 117   1              stScaleParam.iLoadPorcRefer     = flash_read_u16(ADDR_PORC_REF);
 118   1              stScaleParam.iDivisionMinima    = flash_read_u16(ADDR_DIVISION_MINIMA);
 119   1              stScaleParam.iDivisionMenor     = flash_read_u16(ADDR_DIVISION_MENOR);
 120   1              stScaleParam.iDivisionMenorMenor        = flash_read_u16(ADDR_DIVISION_MENORMENOR);
 121   1              stScaleParam.cPuntoDecimalTotal         = flash_read_u8(ADDR_DECIMAL_TOTAL);
 122   1              stScaleParam.cRedondeoCifraTotal        = flash_read_u8(ADDR_REDONDEO_TOTAL);
 123   1              stScaleParam.cBacklight         = flash_read_u8(ADDR_BACKLIGHT);
 124   1              
 125   1              if(stScaleParam.cRedondeoCifraTotal == 0){
 126   2                      stScaleParam.cValorRedondeoCifraTotal = 5;
 127   2              }else{
 128   2                      stScaleParam.cValorRedondeoCifraTotal = 1;
 129   2              }
 130   1              
 131   1              stScaleParam.cRedondeoCifraVentaTotal   = flash_read_u8(ADDR_REDONDEO_VENTA);
 132   1              
 133   1              if(stScaleParam.cRedondeoCifraVentaTotal == 0){
 134   2                      stScaleParam.cValorcRedondeoCifraVentaTotal = 5;
 135   2              }else{
 136   2                      stScaleParam.cValorcRedondeoCifraVentaTotal = 1;
 137   2              }
 138   1              
 139   1              stScaleParam.cPuntoDecimalPrecio                        = flash_read_u8(ADDR_DECIMAL_PRECIO);
 140   1              stScaleParam.cZeroTracking                                              = 0; //flash_read_u8(ADDR_ZERO_TRACKING);
 141   1              stScaleParam.cMsgUnload                                                         = flash_read_u8(ADDR_MSG_UNLOAD);
 142   1              stScaleParam.cTimeAutooff                                                       = flash_read_u8(ADDR_TIME_OFF);
 143   1              stScaleParam.cModeloBascula                                             = flash_read_u8(ADDR_MODELO);
 144   1                              
 145   1              stScaleParam.iCounter_Calibration       = flash_read_u16(ADDR_COUNTER_CALIBRATION);
 146   1              stScaleParam.iCounter_Configuration     = flash_read_u16(ADDR_COUNTER_CONFIGURATION);
 147   1              
 148   1              stScaleParam.cShowHighBat                                                       = flash_read_u8(ADDR_MSGBAT); 
 149   1              
 150   1              stScaleParam.iDebug                                                                     = flash_read_u16(ADDR_DEBUG);
 151   1      
 152   1              stScaleParam.cCountRange                                                        = flash_read_u8(ADDR_COUNT_RANGE);
 153   1              
 154   1              stScaleParam.cMoneda                                                                    = flash_read_u8(ADDR_MONEDA);
 155   1                      
 156   1              stScaleParam.iCountOverload                                             =       flash_read_u16(ADDR_COUNT_OVERLOAD);
 157   1              
 158   1              stScaleParam.fValueOverload                                             =       flash_read_float32(ADDR_VALUE_OVERLOAD);
 159   1              
 160   1              stScaleParam.cWeightDecimal                                     = flash_read_u8(ADDR_DECIMAL_WEIGHT);
 161   1              
 162   1              stScaleParam.cSaveBattery                                       = flash_read_u8(ADDR_SAVEBATT);
 163   1              
 164   1              srFlagScale.bShowErroBat                                                = flash_read_u8(ADDR_ERRORBATT);
 165   1              
 166   1              stScaleParam.fVenta_Total_Scale    = flash_read_float32(ADDR_VENTA_TOTAL);
 167   1      }
 168          
 169          /**
 170            ******************************************************************************
 171            * Objetivo: Guardar parametros en la E2PROM
 172            * Parametros entrada: Ninguno
 173                  * Parametros Salida: Ninguno
 174            ******************************************************************************
 175            */
 176          void vSaveParamScale(unsigned char cType_Parameter){
 177   1              /* Habilita la escritura/lectura en la EEPROM */
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 4   

 178   1              NRM_securty_a = 0xaa;
 179   1              NRM_securty_b = 0x55;
 180   1      
 181   1              switch(cType_Parameter){
 182   2      
 183   2                      case Parameter_Calibration:             
 184   2                              flash_write_u8(ADDR_SET_CALIBRATE, 1);
 185   2                              flash_write_float32(ADDR_CAPACITY_CALI, stScaleParam.fCapacityCali);
 186   2                              flash_write_float32(ADDR_POINT_ZERO, stScaleParam.fPointZeroCali);
 187   2                              flash_write_float32(ADDR_FACTOR_CALIBRATE, stScaleParam.fFactorCalibrate);
 188   2                              flash_write_u16(ADDR_COUNTER_CALIBRATION, stScaleParam.iCounter_Calibration);           
 189   2                              break;
 190   2                      
 191   2                      case Parameter_Count_Calibration:
 192   2                              flash_write_u16(ADDR_COUNTER_CALIBRATION, stScaleParam.iCounter_Calibration);           
 193   2                              break;
 194   2                              
 195   2                      case Parameter_Configuration:
 196   2                      
 197   2                              flash_write_u8(ADDR_LENGUAGE, stScaleParam.cLenguage);
 198   2                              flash_write_u8(ADDR_UNITS, stScaleParam.cUnits);                
 199   2                              flash_write_u16(ADDR_CAPACITY, stScaleParam.iCapacity);
 200   2                              flash_write_u16(ADDR_PORC_REF, stScaleParam.iLoadPorcRefer);
 201   2                              flash_write_u16(ADDR_DIVISION_MINIMA, stScaleParam.iDivisionMinima);    
 202   2                              flash_write_u16(ADDR_DIVISION_MENOR, stScaleParam.iDivisionMenor);
 203   2                              flash_write_u16(ADDR_DIVISION_MENORMENOR, stScaleParam.iDivisionMenorMenor);                    
 204   2                              flash_write_u8(ADDR_DECIMAL_TOTAL, stScaleParam.cPuntoDecimalTotal);
 205   2                              flash_write_u8(ADDR_REDONDEO_TOTAL, stScaleParam.cRedondeoCifraTotal);
 206   2                              flash_write_u8(ADDR_DECIMAL_PRECIO, stScaleParam.cPuntoDecimalPrecio);
 207   2                              flash_write_u8(ADDR_ZERO_TRACKING, stScaleParam.cZeroTracking);
 208   2                              flash_write_u8(ADDR_MSG_UNLOAD, stScaleParam.cMsgUnload);
 209   2                              flash_write_u8(ADDR_TIME_OFF, stScaleParam.cTimeAutooff);
 210   2                              flash_write_u8(ADDR_MODELO, stScaleParam.cModeloBascula);
 211   2                              flash_write_u8(ADDR_MSGBAT, stScaleParam.cShowHighBat);
 212   2                              flash_write_u16(ADDR_COUNTER_CONFIGURATION, stScaleParam.iCounter_Configuration);
 213   2                              flash_write_u8(ADDR_COUNT_RANGE, stScaleParam.cCountRange);
 214   2                              flash_write_u8(ADDR_MONEDA, stScaleParam.cMoneda);              
 215   2                              flash_write_u16(ADDR_COUNT_OVERLOAD, stScaleParam.iCountOverload);              
 216   2                              flash_write_float32(ADDR_VALUE_OVERLOAD, stScaleParam.fValueOverload);  
 217   2                              flash_write_u8(ADDR_DECIMAL_WEIGHT, stScaleParam.cWeightDecimal);       
 218   2                              flash_write_u8(ADDR_SAVEBATT, stScaleParam.cSaveBattery);                       
 219   2                              flash_write_u8(ADDR_ERRORBATT, srFlagScale.bShowErroBat);
 220   2                              flash_write_u8(ADDR_MULTIRANGO, stScaleParam.cMultirango);
 221   2                              flash_write_u8(ADDR_FORMATO_IMPRESION, stScaleParam.cFormatoImpresion);
 222   2                              
 223   2                              break;
 224   2              
 225   2                      case Parameter_Count_Configuration:
 226   2                              flash_write_u16(ADDR_COUNTER_CONFIGURATION, stScaleParam.iCounter_Configuration);
 227   2                              break;
 228   2                              
 229   2                      case Parameter_Point_Zero_Calibration:
 230   2                              flash_write_float32(ADDR_POINT_ZERO, stScaleParam.fPointZeroCali);                      
 231   2                              break;
 232   2                                      
 233   2                      case Parameter_Debug:
 234   2                              flash_write_u16(ADDR_DEBUG, stScaleParam.iDebug);
 235   2                              break;
 236   2                                      
 237   2                      case Parameter_Overload:
 238   2                              flash_write_u16(ADDR_COUNT_OVERLOAD, stScaleParam.iCountOverload);              
 239   2                              flash_write_float32(ADDR_VALUE_OVERLOAD, stScaleParam.fValueOverload);                                          
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 5   

 240   2                              break;
 241   2                              
 242   2                      case Parameter_Voltages:
 243   2                              flash_write_float32(ADDR_VOLT_BATT, stScaleParam.fVoltage_Batt);
 244   2                              flash_write_float32(ADDR_VOLT_ADAP, stScaleParam.fVoltage_Adap);
 245   2                              break;
 246   2                      
 247   2                      case Parameter_Temperature:
 248   2                              flash_write_float32(ADDR_TEMPERATURE, stScaleParam.fTemperature);
 249   2                              break;          
 250   2                              
 251   2                      case Parameter_Register:
 252   2                              flash_write_float32(ADDR_VENTA_TOTAL, stScaleParam.fVenta_Total_Scale);
 253   2                              break;
 254   2      
 255   2                      case Parameter_Backlight:
 256   2                              flash_write_u8(ADDR_BACKLIGHT, stScaleParam.cBacklight);
 257   2                              break;
 258   2              }
 259   1              
 260   1              /* Deshabilita la escritura en la EEPROM */
 261   1              NRM_securty_a = 0x00;
 262   1              NRM_securty_b = 0x00;
 263   1      }
 264          
 265          /**
 266            ******************************************************************************
 267            * Objetivo: Encontrar un valor estable durante un tiempo X.
 268            * Parametros entrada: 
 269                  *               cSetCountBack -> Tiempo de muestreo (conteo descendente)
 270                  *               cShowCount -> Hacer visible el conteo.
 271                  *               cRunStable -> Llenar el filtro con el primer dato leido.
 272                  * Parametros Salida: Ninguno.
 273                  * Nota: Si durante la cuenta regrsiva el valor no esta dentro del rango
 274                  *       asignado, el conteo se reinicia.
 275            ******************************************************************************
 276            */
 277          float fStablePoint(unsigned char cSetCountBack, unsigned char cShowCount, unsigned char cRunStable){    
 278   1      
 279   1              unsigned char cCountReading = 0;                /* Contador de lecturas */
 280   1              unsigned char cNumber_Count = 0;
 281   1              long int cCountBack = cSetCountBack;                    /* Contador de regresion */
 282   1              float fActualWeightAdc=0;                                               /* Alamacena el peso actual valores adc */
 283   1              float fWeightAdc = 0;                                                           /* Almacena el valor referencia */
 284   1              float fLimitRange =  (float)stScaleParam.cCountRange;
 285   1              int i=0;
 286   1              
 287   1              cNumber_Count = 0;
 288   1              
 289   1              if(cRunStable == 0){
 290   2                      cNumber_Count = 2;
 291   2              }
 292   1              
 293   1              fWeightAdc = fRead_Adc(cRunStable);//delay_ms(100);     
 294   1              fWeightAdc = fRead_Adc(cRunStable);//delay_ms(100);
 295   1              fWeightAdc = fRead_Adc(cRunStable);//delay_ms(100);
 296   1              fWeightAdc = fRead_Adc(cRunStable);//delay_ms(100);
 297   1              
 298   1              while(cCountBack > -1){
 299   2                      
 300   2          vActionKey();
 301   2                      
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 6   

 302   2                      /* Verifica si debe mostrar el contador en la LCD */
 303   2                      if(cShowCount == 1){
 304   3                              if(cCountBack == 0){
 305   4                                      LCD_GLASS_String("00000", LCD_PESO);
 306   4                                      LCD_GLASS_String("00000", LCD_PRECIO);
 307   4                                      LCD_GLASS_String("000000", LCD_TOTAL);
 308   4                              }else{
 309   4                                      LCD_GLASS_Float(cCountBack*11111, 0, LCD_PESO);
 310   4                                      LCD_GLASS_Float(cCountBack*11111, 0, LCD_PRECIO);
 311   4                                      LCD_GLASS_Float(cCountBack*111111, 0, LCD_TOTAL);
 312   4                              }
 313   3                      }
 314   2              
 315   2                      fActualWeightAdc = fRead_Adc(cRunStable);
 316   2                      //delay_ms(100);
 317   2                      
 318   2                      /* Verica que el ultimo valor leido este dentro del rango del valor 
 319   2                              referencia */
 320   2                      if(fActualWeightAdc >= (fWeightAdc - fLimitRange) && 
 321   2                              fActualWeightAdc <= (fWeightAdc + fLimitRange)){
 322   3                                      cCountReading++;
 323   3                                      
 324   3                                      /* Si al completar 3 lecturas dentro del rango se decrementa el 
 325   3                                              contador */
 326   3                                      if(cCountReading > cNumber_Count){
 327   4                                              cCountBack--;
 328   4                                              cCountReading = 0;
 329   4                                      }                                       
 330   3                      }else{
 331   3                              /* Si el dato no esta dentro del rango, se toma una nueva referencia
 332   3                                      y se reinicia la cuenta regresiva */
 333   3                              if(cShowCount == 1){
 334   4                                      LCD_GLASS_Clear();
 335   4                                      LCD_GLASS_String("   UN", LCD_PRECIO);
 336   4                                      LCD_GLASS_String("STABLE", LCD_TOTAL);
 337   4                                      for(cCountBack=0; cCountBack<20000; cCountBack++);
 338   4                                      for(cCountBack=0; cCountBack<20000; cCountBack++);
 339   4                              }
 340   3                              cCountReading = 0;
 341   3                              cCountBack = cSetCountBack;
 342   3                              fWeightAdc = fRead_Adc(cRunStable);
 343   3                              
 344   3                              if(cRunStable){
 345   4                                      srFlagScale.bFlagStable = 0;
 346   4                                      return (-100);
 347   4                              }
 348   3                      }
 349   2              }
 350   1              
 351   1              srFlagScale.bFlagStable = 1;
 352   1              return fWeightAdc;
 353   1      }
 354          
 355          /**
 356            ******************************************************************************
 357            * Objetivo: Calcular el numero de cuenta que se tomara como cero.
 358            * Parametros entrada: Ninguno.
 359                  * Parametros Salida: Ninguno.
 360            * Prerequisitos: Se usan las variables globales
 361                  *                       stScaleParam.cSetCalibrate, stScaleParam.fCapacityCali,  
 362                  *                       arDataDisplayLcd.
 363                  *       Modifica las variables globales:
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 7   

 364                  *                       stScaleParam.fPointZero, arDataDisplayLcd.
 365            ******************************************************************************
 366            */
 367          unsigned char cSetZeroPoint(void){      
 368   1      
 369   1      //////  unsigned char Value_Key_Press;
 370   1              float fWeightPlate = 0;         /* Calcula el peso del plato en numero de cuentas */
 371   1              float fPointZero = 0;
 372   1                      
 373   1              fPointZero = fStablePoint(0, 0, 0);
 374   1              
 375   1              if(srFlagScale.bScaleOn == 0){
 376   2                      return 2;                               
 377   2              }
 378   1      
 379   1              /*Se encuentra el peso actual del plato respecto al punto cero de calibracion */
 380   1              fWeightPlate = fPointZero - stScaleParam.fPointZeroCali;
 381   1              
 382   1              if(stScaleParam.cMsgUnload){
 383   2                      /* Verifica los rangos para los distintos avisos */
 384   2                      if(((fWeightPlate > (stScaleParam.fCapacityCali * 0.20)) && (fWeightPlate < (stScaleParam.fCapacityCali 
             -* 0.50))) ||
 385   2                                      (fWeightPlate < (-1)*(stScaleParam.fCapacityCali * 0.20))){
 386   3                              
 387   3                              /* Quita los simboloes de unidad de peso y Zero */
 388   3                              LCD_GLASS_Clear();
 389   3                              LCD_GLASS_String("  PLS", LCD_PESO);                            
 390   3                              LCD_GLASS_String("UNLOAD", LCD_TOTAL);  
 391   3                              
 392   3      ///////////                     //Auto_Off_On_5m;
 393   3                      
 394   3                              while(1){
 395   4                                      IWDG_KEY_REFRESH;
 396   4                                      if(srFlagScale.cWait_Time_Code || srFlagScale.bScaleOn == 0){
 397   5                                              return 2;                               
 398   5                                      }
 399   4                              }
 400   3                      }
 401   2              }
 402   1              
 403   1              if((fWeightPlate >= (stScaleParam.fCapacityCali * 0.50)) && fWeightPlate > 0){
 404   2                      
 405   2                      /* Quita los simboloes de unidad de peso y Zero */
 406   2                      LCD_GLASS_Clear();      
 407   2                      LCD_GLASS_String("HELP ", LCD_PRECIO);  
 408   2              
 409   2                      //Auto_Off_On_5m;
 410   2                      
 411   2                      while(1){
 412   3                              IWDG_KEY_REFRESH;
 413   3                              if(srFlagScale.cWait_Time_Code || srFlagScale.bScaleOn == 0){
 414   4                                      return 2;                               
 415   4                              }
 416   3                      }
 417   2                                      
 418   2              }else{
 419   2                      stScaleParam.fPointZero = fPointZero;
 420   2              }
 421   1              
 422   1              return 0;
 423   1      }
 424          
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 8   

 425          /**
 426            ******************************************************************************
 427            * Objetivo: Activar/Desactivar el uso de la Tara.
 428            * Parametros entrada: 
 429                  *               cActionTara -> Accion a ejecutar (ON) Activa la Tara, 
 430            *                                                                                                                                             (OFF) Desactiva la Tara.
 431                  * Parametros Salida: Retorna
 432                  *               (0) Para indicar que no se proceso la orden.
 433                  *               (1) Para indicar que se Desactivo o Activo la Tara.
 434            * Prerequisitos: Se usan las variables globales
 435                  *                       stScaleParam.fCapacityCali.
 436                  *       Modifica las variables globales:
 437                  *               stScaleParam.fPointZeroTara, stScaleParam.fPointZero.
 438            ******************************************************************************
 439            */
 440          void cOnOffModeTara(float fWeightTara){
 441   1              
 442   1              float fAdcCountTara = 0; 
 443   1              float fLimite_Inf = 0;
 444   1              float fLimite_Sup = 0;
 445   1              float fWeightZero = 0;
 446   1              float AuxTara = 0;
 447   1              
 448   1              fWeightZero = fStablePoint(1, 0, 1);
 449   1              
 450   1              if(srFlagScale.bFlagStable == 1){
 451   2              
 452   2                      if(fWeightTara > 0){
 453   3                              if(srFlagScale.bTara == 0){     
 454   4                                      
 455   4                                      if(stScaleParam.cUnits == UNIT_LB){
 456   5                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= stScaleParam.iCapacity){
 457   6                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 458   6                                                      srFlagScale.bTara = 1;
 459   6                                              }
 460   5                                      }else{
 461   5                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= 9.999){
 462   6                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 463   6                                                      srFlagScale.bTara = 1;
 464   6                                              }
 465   5                                      }
 466   4                              }else{
 467   4                                      if(stScaleParam.cUnits == UNIT_LB){
 468   5                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) <= stScaleParam.iCapacity){
 469   6                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 470   6                                              }
 471   5                                      }else{
 472   5                                              if(fCuentasToPeso(stScaleParam.fWeightScaleTara) < 9.999){
 473   6                                                      stScaleParam.fValueTara = stScaleParam.fWeightScaleTara;
 474   6                                              }
 475   5                                      }
 476   4                              }
 477   3                      }else if(fWeightTara < 0){
 478   3                              
 479   3                              if(srFlagScale.bTara){
 480   4                                      fWeightTara *= (-1);
 481   4                                      
 482   4                                      if(stScaleParam.cMultirango == 1){
 483   5                                              if(stScaleParam.fValueTara <= stScaleParam.fCapacityCali*0.2){
 484   6                                                              AuxTara = stScaleParam.fFactorCalibrate / stScaleParam.iDivisionMinima;
 485   6                                                              AuxTara *= stScaleParam.iDivisionMenor;
 486   6                                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*AuxTara);
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 9   

 487   6                                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*AuxTara);
 488   6                                                      }else{
 489   6                                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*stScaleParam.fFactorCalibrate);
 490   6                                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*stScaleParam.fFactorCalibrate);
 491   6                                                      }
 492   5                                      }else{
 493   5                                              fLimite_Inf = fCuentasToPeso(stScaleParam.fValueTara - 3*stScaleParam.fFactorCalibrate);
 494   5                                              fLimite_Sup = fCuentasToPeso(stScaleParam.fValueTara + 3*stScaleParam.fFactorCalibrate);
 495   5                                      }
 496   4                                              
 497   4                                      if((fWeightTara >= fLimite_Inf) && (fWeightTara <= fLimite_Sup)){
 498   5                                              LCD_GLASS_Symbols(SYMBOL_NET, 0);
 499   5                                              stScaleParam.fValueTara = 0;
 500   5                                              srFlagScale.bTara = 0;
 501   5                                              stScaleParam.fPointZero = stScaleParam.fWeightScaleCount;
 502   5                                              fFilter_Averaging(fWeightZero, 1);      /*Ingresa el dato al filtro */
 503   5                                      }
 504   4                              }
 505   3                      }
 506   2                      
 507   2              }
 508   1      }
 509          
 510          /**
 511            ******************************************************************************
 512            * Objetivo: Establecer el punto Zero
 513            * Parametros entrada: Ninguno
 514                  * Parametros Salida: Retorna
 515            ******************************************************************************
 516            */
 517          void vSetZero(void){
 518   1              float fWeightZero = 0;
 519   1              
 520   1              /* Verifica si el peso es estable para volver cero */
 521   1              fWeightZero = fStablePoint(1, 0, 1);
 522   1                      
 523   1              if(srFlagScale.bFlagStable == 1){               
 524   2                      stScaleParam.fPointZero = fWeightZero;
 525   2              }
 526   1      }
 527          
 528          /**
 529            ******************************************************************************
 530            * Objetivo: Establecer el punto Zero dinamico
 531            * Parametros entrada: Ninguno
 532                  * Parametros Salida: Ninguno
 533            ******************************************************************************
 534            */
 535          void vGetZeroTracking(float fActualWeightScale){
 536   1              float fValor_Limite = 0;
 537   1              
 538   1              
 539   1              if(stScaleParam.cMultirango == 1){
 540   2                      fValor_Limite = stScaleParam.fFactorCalibrate/stScaleParam.iDivisionMinima;
 541   2                      fValor_Limite *= stScaleParam.iDivisionMenorMenor;
 542   2              }else   
 543   1                      fValor_Limite = stScaleParam.fFactorCalibrate;
 544   1              
 545   1              fValor_Limite /= 2; 
 546   1              
 547   1              if(fValor_Limite < 0){
 548   2                      fValor_Limite *= (-1);
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 10  

 549   2              }
 550   1              
 551   1              if(fActualWeightScale > (stScaleParam.fPointZero - fValor_Limite) &&
 552   1                      fActualWeightScale < (stScaleParam.fPointZero + fValor_Limite)){
 553   2                      
 554   2                      iCounterZeroTracking++;
 555   2                      if(iCounterZeroTracking >=15){
 556   3                              stScaleParam.fPointZero = fActualWeightScale;
 557   3                      }
 558   2              }else{
 559   2                      iCounterZeroTracking = 0;
 560   2              }
 561   1      }
 562          
 563          /**
 564            ******************************************************************************
 565            * Objetivo: Ejecutar el proceso de calibracion de la bascula 
 566            * Parametros entrada:  
 567                  * Parametros Salida:
 568            * Prerequisitos: 
 569            ******************************************************************************
 570            */
 571          void vCalibrate_Scale(void){
 572   1                    float xdata fAux_Value = 0;
 573   1                    float xdata fAuxCountAdcInicial = 0;
 574   1                    float xdata fAuxCountAdcFinal = 0;
 575   1                    float xdata fAuxCountDif = 0;
 576   1                    
 577   1                    stScaleParam.iCounter_Calibration++;  /* Aumenta el contador de calibraciones */ 
 578   1                    //CCC  vSaveParamScale(Parameter_Calibration);                                              
             -                                                /*Almacena los parametros en la E2prom*/
 579   1                                  
 580   1                    LCD_GLASS_Clear();
 581   1      #if DISPLAY_20400047_EN > 0
 582   1        LCD_GLASS_String("PRESS", LCD_PESO);
 583   1                    LCD_GLASS_String("REF 0", LCD_TOTAL);
 584   1                    LCD_GLASS_String("C", LCD_PRECIO);
 585   1      #else     
                LCD_GLASS_String("PRESS", LCD_PRECIO);
                            LCD_GLASS_String("REF 0", LCD_PESO);
                            LCD_GLASS_String("C", LCD_TOTAL);
              #endif
 590   1      
 591   1              
 592   1                    /* Espera a que se oprima 'C' para continuar */
 593   1                    Key=0;while(Key!= KEY_C)key_scan();
 594   1                                
 595   1                                  
 596   1      
 597   1                    
 598   1      
 599   1                    /* Solicita la referencia de zero */
 600   1                    //////////CCC stScaleParam.fPointZeroCali = fStablePoint(5, 1, 0);
 601   1                    
 602   1      
 603   1                    fAuxCountAdcInicial = stScaleParam.fPointZeroCali;
 604   1                                delay_ms(2000);//borrar  //CCC  
 605   1      
 606   1                    LCD_GLASS_Clear();
 607   1      #if DISPLAY_20400047_EN > 0
 608   1                    LCD_GLASS_String("PRESS", LCD_PESO);
 609   1                    LCD_GLASS_String(" LOAD", LCD_TOTAL);
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 11  

 610   1                    LCD_GLASS_String("C   ", LCD_PRECIO);
 611   1      #else
                            LCD_GLASS_String("PRESS", LCD_PRECIO);
                            LCD_GLASS_String(" LOAD", LCD_PESO);
                            LCD_GLASS_String("C     ", LCD_TOTAL);
              #endif
 616   1      
 617   1       /* Espera a que se oprima 'C' para continuar */
 618   1                    Key=0;while(Key!= KEY_C)key_scan();
 619   1      
 620   1          stScaleParam.fCapacityCali = fStablePoint(5, 1, 0);
 621   1                   
 622   1                    
 623   1                    fAuxCountAdcFinal = stScaleParam.fCapacityCali;
 624   1                    
 625   1                    fAuxCountDif = (fAuxCountAdcFinal - fAuxCountAdcInicial);
 626   1                    fAuxCountDif    *= (100/stScaleParam.iLoadPorcRefer);
 627   1                    
 628   1                    stScaleParam.fCapacityCali -= stScaleParam.fPointZeroCali;
 629   1                    stScaleParam.fCapacityCali *= (100/stScaleParam.iLoadPorcRefer);
 630   1                    
 631   1                    stScaleParam.fFactorCalibrate = (float)(stScaleParam.fCapacityCali);
 632   1                    fAux_Value = (float)(stScaleParam.iCapacity);
 633   1                    fAux_Value *= pow(10,(int)stScaleParam.cWeightDecimal);
 634   1                    fAux_Value = (float)(fAux_Value)/(float)(stScaleParam.iDivisionMinima);
 635   1                    stScaleParam.fFactorCalibrate /= fAux_Value;
 636   1                    
 637   1                    if(stScaleParam.fCapacityCali < 0){
 638   2                                  stScaleParam.fCapacityCali *= (-1);
 639   2                    }
 640   1      
 641   1                    LCD_GLASS_Clear();     
 642   1      #if DISPLAY_20400047_EN > 0
 643   1                    LCD_GLASS_String("FACTO", LCD_PESO);
 644   1                                LCD_GLASS_String("R", LCD_TOTAL);
 645   1                                //LCD_GLASS_Float(stScaleParam.fFactorCalibrate, 2, LCD_TOTAL);
 646   1                    LCD_GLASS_Dot(2, LCD_TOTAL, 1);
 647   1                    LCD_GLASS_String("  END", LCD_PRECIO);          
 648   1      #else
                            LCD_GLASS_String("  END", LCD_PESO);
                                        LCD_GLASS_String("R", LCD_TOTAL);
                            //LCD_GLASS_Float(stScaleParam.fFactorCalibrate, 2, LCD_TOTAL);     
                            LCD_GLASS_Dot(2, LCD_TOTAL, 1);
                            LCD_GLASS_String("FACTO", LCD_PRECIO);
              #endif
 655   1      
 656   1      
 657   1      
 658   1      
 659   1      ////////////////////////////////////////////////////////////////////////////              
 660   1                    /*Almacena los parametros en la E2prom*/       
 661   1                    //CCC vSaveParamScale(Parameter_Calibration);                                        
 662   1                    
 663   1      ///////////CCCCC/////////////CCCCC/////////////CCCCC/////////////CCCCC/////////////CCCCC//              vS
             -et_Volts_System();    
 664   1                    //CCC    vSaveParamScale(Parameter_Voltages);
 665   1                    
 666   1      ///////////CCCCC//BORRAR DE LA ESTRUCTURA ///////////////////////////////////           stScaleParam.fTemp
             -erature = fGet_Temp_Amb_Micro();
 667   1                    //CCC    vSaveParamScale(Parameter_Temperature);
 668   1      
 669   1          vSound_Saved_Param();
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 12  

 670   1                    vSound_Saved_Param();
 671   1                    
 672   1                    strTimer.cFLag_TimerE_Start = 1;
 673   1                    strTimer.cFLag_TimerE_End = 0;
 674   1                    
 675   1                    while(!strTimer.cFLag_TimerE_End)key_scan();
 676   1                    
 677   1                    LCD_GLASS_Clear();
 678   1      }
 679          
 680          
 681          /**
 682            ******************************************************************************
 683            * Objetivo: Configurar valores por default.
 684            * Parametros entrada:  
 685                  * Parametros Salida:
 686            * Prerequisitos: 
 687            ******************************************************************************
 688            */
 689          void vPreConfiguration(unsigned char cPreConfiguration){
 690   1              
 691   1              enum    digi_key Value_Key_Press;
 692   1              unsigned char cIndex = 0;
 693   1              
 694   1              strTimer.cFLag_TimerD_Start = 1;
 695   1              
 696   1              LCD_GLASS_Clear();
 697   1              
 698   1              stScaleParam.cMultirango = 1;
 699   1              stScaleParam.cLenguage = ESPANOL;
 700   1              
 701   1              if(cPreConfiguration == PreConfig15KG){
 702   2                      stScaleParam.iCapacity = 15;
 703   2                      stScaleParam.iDivisionMinima = 5;
 704   2                      stScaleParam.iDivisionMenor = 2;
 705   2                      stScaleParam.iDivisionMenorMenor = 1;
 706   2                      stScaleParam.cWeightDecimal = 3;
 707   2                      stScaleParam.cUnits = UNIT_KG;
 708   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 709   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 710   2              }else if(cPreConfiguration == PreConfig20KG){
 711   2                      stScaleParam.iCapacity = 20;
 712   2                      stScaleParam.iDivisionMinima = 5;
 713   2                      stScaleParam.iDivisionMenor = 2;
 714   2                      stScaleParam.iDivisionMenorMenor = 1;
 715   2                      stScaleParam.cWeightDecimal = 3;
 716   2                      stScaleParam.cUnits = UNIT_KG;
 717   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 718   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 719   2              }else if(cPreConfiguration == PreConfig30KG){
 720   2                      stScaleParam.iCapacity = 30;
 721   2                      stScaleParam.iDivisionMinima = 10;
 722   2                      stScaleParam.iDivisionMenor = 5;
 723   2                      stScaleParam.iDivisionMenorMenor = 2;
 724   2                      stScaleParam.cWeightDecimal = 3;
 725   2                      stScaleParam.cUnits = UNIT_KG;
 726   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 727   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 728   2              }else if(cPreConfiguration == PreConfig31KG){
 729   2                      stScaleParam.iCapacity = 30;
 730   2                      stScaleParam.iDivisionMinima = 5;
 731   2                      stScaleParam.iDivisionMenor = 2;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 13  

 732   2                      stScaleParam.iDivisionMenorMenor = 1;
 733   2                      stScaleParam.cWeightDecimal = 3;
 734   2                      stScaleParam.cUnits = UNIT_KG;
 735   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 736   2                      stScaleParam.cMoneda = MONEDA_PESOS;            
 737   2              }else if(cPreConfiguration == PreConfig32KG){
 738   2                      stScaleParam.iCapacity = 30;
 739   2                      stScaleParam.iDivisionMinima = 2;
 740   2                      stScaleParam.iDivisionMenor = 2;
 741   2                      stScaleParam.iDivisionMenorMenor = 2;
 742   2                      stScaleParam.cMultirango = 0;
 743   2                      stScaleParam.cWeightDecimal = 3;
 744   2                      stScaleParam.cUnits = UNIT_KG;
 745   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 746   2                      stScaleParam.cMoneda = MONEDA_PESOS;            
 747   2              }else if(cPreConfiguration == PreConfig40KG){
 748   2                      stScaleParam.iCapacity = 40;
 749   2                      stScaleParam.iDivisionMinima = 10;
 750   2                      stScaleParam.iDivisionMenor = 5;
 751   2                      stScaleParam.iDivisionMenorMenor = 2;
 752   2                      stScaleParam.cWeightDecimal = 3;
 753   2                      stScaleParam.cUnits = UNIT_KG;
 754   2                      LCD_GLASS_Symbols(SYMBOL_KG, 1);
 755   2                      stScaleParam.cMoneda = MONEDA_PESOS;
 756   2              }else if(cPreConfiguration == PreConfig60LB){
 757   2                      stScaleParam.iCapacity = 60;
 758   2                      stScaleParam.iDivisionMinima = 2;
 759   2                      stScaleParam.cWeightDecimal = 2;
 760   2                      stScaleParam.cUnits = UNIT_LB;
 761   2                      stScaleParam.cLenguage = ENGLISH;
 762   2                      LCD_GLASS_Symbols(SYMBOL_LB, 1);
 763   2                      stScaleParam.cMoneda = MONEDA_DLLS;
 764   2                      stScaleParam.cMultirango = 0;
 765   2              }
 766   1              
 767   1              LCD_GLASS_Float(stScaleParam.iCapacity, stScaleParam.cWeightDecimal, LCD_PESO);
 768   1              
 769   1              stScaleParam.iLoadPorcRefer = 100;
 770   1              stScaleParam.cPuntoDecimalTotal = 2;
 771   1              stScaleParam.cRedondeoCifraTotal = 1;
 772   1              stScaleParam.cPuntoDecimalPrecio = 3;
 773   1              stScaleParam.cValorcRedondeoCifraVentaTotal = 0;
 774   1              stScaleParam.cZeroTracking = 1;
 775   1              stScaleParam.cMsgUnload = 1;
 776   1              stScaleParam.cTimeAutooff = 1;
 777   1              stScaleParam.cShowHighBat = 1;
 778   1              stScaleParam.cModeIncDiv = 0;
 779   1              stScaleParam.cCountRange = 5;
 780   1              stScaleParam.iCountOverload = 0;                
 781   1              stScaleParam.fValueOverload = 0;
 782   1              stScaleParam.cSaveBattery       = 0;
 783   1        stScaleParam.cFormatoImpresion = 2; 
 784   1              stScaleParam.cTypeBeeper = 0;
 785   1              
 786   1              stScaleParam.fVoltage_Batt = 0;
 787   1              stScaleParam.fVoltage_Adap = 0;
 788   1              
 789   1              stScaleParam.fCapacityCali = 0;
 790   1              stScaleParam.fPointZeroCali = 0;
 791   1              stScaleParam.fFactorCalibrate = 0;
 792   1              srFlagScale.bShowErroBat = 1;
 793   1              stScaleParam.fTemperature = 0;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 14  

 794   1              
 795   1              stScaleParam.fVenta_Total_Scale = 0;
 796   1              stScaleParam.iCounter_Calibration = 0;
 797   1              stScaleParam.iCounter_Configuration = 0;
 798   1      
 799   1              strTimer.cFLag_TimerE_Start = 1;
 800   1              
 801   1              Value_Key_Press = vActionKey();
 802   1              
 803   1              /* Espera a que se oprima la tecla 'MEM' o que pase el tiempo de 5 seg  */
 804   1              while((Value_Key_Press != KEY_MEM) && strTimer.cFLag_TimerE_End == 0){
 805   2                      IWDG_KEY_REFRESH;
 806   2                      
 807   2                      Value_Key_Press = vActionKey();
 808   2                      
 809   2                      if(srFlagScale.bScaleOn == 0){
 810   3                              return;
 811   3                      }else if(Value_Key_Press != KEY_NULL){
 812   3                              vBeep_Key();
 813   3                      }       
 814   2              }
 815   1              
 816   1              if(strTimer.cFLag_TimerE_End == 1){
 817   2                      LCD_GLASS_Clear();
 818   2                      LCD_GLASS_String("  OFF", LCD_PRECIO);
 819   2              
 820   2                      //Auto_Off_On_5m_Restart;
 821   2                      //Auto_Off_On_5m;
 822   2              
 823   2                      while(!srFlagScale.cWait_Time_Code){
 824   3                              IWDG_KEY_REFRESH;
 825   3                              vActionKey();
 826   3                              
 827   3                              if(srFlagScale.bScaleOn == 0){
 828   4                                      return;
 829   4                              }
 830   3                      }
 831   2                                      
 832   2                      srFlagScale.bScaleOn = 0;
 833   2                      return;
 834   2              }
 835   1              
 836   1              if(strTimer.cFLag_TimerE_End == 1){
 837   2                      /* Si se salio por tiempo no se configura la bascula */
 838   2                      LCD_GLASS_Clear();
 839   2              }else{
 840   2                      vSaveParamScale(Parameter_Temperature);
 841   2                      vSaveParamScale(Parameter_Voltages);
 842   2                      vSaveParamScale(Parameter_Configuration);
 843   2                      vSaveParamScale(Parameter_Calibration);
 844   2                      vSaveParamScale(Parameter_Register);
 845   2                      
 846   2                      LCD_GLASS_String("SAVED", LCD_PRECIO);
 847   2                      vSound_Saved_Param();
 848   2                      vSound_Saved_Param();
 849   2                      
 850   2                      strTimer.cFLag_TimerE_End = 0;
 851   2                      strTimer.cFLag_TimerE_Start = 1;
 852   2                      
 853   2                      Value_Key_Press = KEY_NULL;
 854   2                      
 855   2                      /* Espera a que se oprima la tecla 'MEM' o que pase el tiempo de 5 seg  */
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 15  

 856   2                      while((Value_Key_Press != KEY_MEM) && strTimer.cFLag_TimerE_End == 0){
 857   3                              IWDG_KEY_REFRESH;
 858   3                              Value_Key_Press = vActionKey();
 859   3                              
 860   3                              if(srFlagScale.bScaleOn == 0){
 861   4                                      return;
 862   4                              }
 863   3                      }
 864   2                      
 865   2                      if(Value_Key_Press == KEY_MEM){
 866   3                      ;
 867   3      //////////DESCOMENTAR////////////////////////////////////77///////////////////////                      vSpecial_Action(Funci
             -on_Especial);
 868   3                      }
 869   2              }
 870   1              
 871   1              LCD_GLASS_Clear();
 872   1              LCD_GLASS_String("  OFF", LCD_PRECIO);
 873   1              
 874   1              //Auto_Off_On_5m_Restart;
 875   1              //Auto_Off_On_5m;
 876   1              
 877   1              while(!srFlagScale.cWait_Time_Code){
 878   2                      IWDG_KEY_REFRESH;               
 879   2                      vActionKey();
 880   2                      
 881   2                      if(srFlagScale.bScaleOn == 0){
 882   3                              return;
 883   3                      }
 884   2              }
 885   1                                      
 886   1              srFlagScale.bScaleOn = 0;
 887   1              return;
 888   1      }
 889          
 890          
 891          /**
 892            ******************************************************************************
 893            * Objetivo: Calcular peso y registrar precio del producto 
 894            * Parametros entrada:
 895                  * Parametros Salida:
 896            * Prerequisitos: 
 897            ***
 898                  */
 899          unsigned char cRun_Scale(unsigned char bEnableKeys){
 900   1              
 901   1      //      enum    digi_key Value_Key_Press;
 902   1              
 903   1              /* Lee teclado y ejecuta las acciones correspondientes */
 904   1              if(bEnableKeys == 1){
 905   2                      vScan_Key();
 906   2              }
 907   1                      
 908   1              if(srFlagScale.cAuto_Off_Time == 1 && stScaleParam.cTimeAutooff == 1){
 909   2                      srFlagScale.bScaleOn = 0;
 910   2                      return 0;
 911   2              }
 912   1              
 913   1      ///////////////CCC//////////////////////7777777 vGestorBateria();
 914   1              
 915   1              if(srFlagScale.bMsgBatteryLow == 1){
 916   2                      return 0;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 16  

 917   2              }
 918   1      
 919   1              if(srFlagScale.bOverLoad ==0){
 920   2                      if(srFlagScale.bSourceVoltage ==  SOURCE_ADAPTER){
 921   3                              LCD_GLASS_Symbols(SYMBOL_Y, 1);
 922   3                      }else{
 923   3                              LCD_GLASS_Symbols(SYMBOL_Y, 0);
 924   3                      }
 925   2              }
 926   1                                      
 927   1              srFlagScale.bFlagWeightNeg = 0;                 /* Clarea indicador de peso negativo */
 928   1      
 929   1      ///////////7CCCCCC //CCC        //CCC vCalculate_Weight();
 930   1      
 931   1              if(srFlagScale.bErrorResponseAdc == 1 || srFlagScale.bErrorReadAdc == 1){               
 932   2                      LCD_GLASS_String("-----", LCD_PESO);
 933   2                      LCD_GLASS_String("    -", LCD_PRECIO);
 934   2                      LCD_GLASS_String("     -", LCD_TOTAL);
 935   2                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);               
 936   2                      return 0;
 937   2              }
 938   1              
 939   1                      if(srFlagScale.bErrorNoiseAdc == 1){            
 940   2                      LCD_GLASS_String("-----", LCD_PESO);
 941   2                      LCD_GLASS_String("  ---", LCD_PRECIO);
 942   2                      LCD_GLASS_String("   ---", LCD_TOTAL);
 943   2                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);               
 944   2                      return 0;
 945   2              }
 946   1              
 947   1              if(srFlagScale.bOverLoad ==0){
 948   2                      
 949   2                      if(srFlagScale.bActiveSaveBattery == 1 && stScaleParam.cZeroTracking == 1 && 
 950   2                              fWeightScale == 0 && stScaleParam.cSaveBattery == 1 &&
 951   2                                      srFlagScale.bSourceVoltage !=  SOURCE_ADAPTER && srFlagScale.bTara == 0){
 952   3                              fSleep_Run();
 953   3                              
 954   3                              //CCC vCalculate_Weight();
 955   3                              
 956   3                              if(srFlagScale.bScaleOn == 0){
 957   4                                      return 0;
 958   4                              }
 959   3                      }
 960   2                      
 961   2                      // Verifica si esta la opcion fijar precio para mostrar indicador
 962   2                      if(srFlagScale.bFlagFijarPRecio){
 963   3                              LCD_GLASS_Symbols(SYMBOL_X, 1);
 964   3                      }else{
 965   3                              LCD_GLASS_Symbols(SYMBOL_X, 0);
 966   3                      }
 967   2                      
 968   2                      // Verfica el tipo de unidades a mostrar
 969   2                      if(stScaleParam.cUnits == UNIT_KG){
 970   3                              LCD_GLASS_Symbols(SYMBOL_KG, 1);
 971   3                      }else if(stScaleParam.cUnits == UNIT_LB){
 972   3                              LCD_GLASS_Symbols(SYMBOL_LB, 1);
 973   3                      }
 974   2                      
 975   2                      if(fWeightScale > -0.0005 && fWeightScale < 0.0005){
 976   3                              LCD_GLASS_Symbols(SYMBOL_ZERO, 1);
 977   3                      }else{
 978   3                              LCD_GLASS_Symbols(SYMBOL_ZERO, 0);
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 17  

 979   3                              //Restart_Sleep_Time;
 980   3                      }
 981   2              }
 982   1                      
 983   1              srFlagScale.bFlagNeg = 0;       
 984   1              
 985   1              if(srFlagScale.bShowCountADC){
 986   2                      
 987   2                      vWeight_Positive();
 988   2                      
 989   2              }else{
 990   2                      // Verifica si el peso es negativo
 991   2                      if(fWeightScale < 0){
 992   3                              vWeight_Negative();                     
 993   3                      }else{                  
 994   3                              vWeight_Positive();                     
 995   3                      }
 996   2              }
 997   1              
 998   1                      if(srFlagScale.bTara){
 999   2                              if((fWeightLight >= stScaleParam.fValueTara+20*stScaleParam.fFactorCalibrate) && srFlagScale.bBateriaLo
             -w == 0){
1000   3                                      if(stScaleParam.cBacklight){OnBackLight;}
1001   3                                      strTimer.cFLag_TimerJ_Start = 1;
1002   3                                      srFlagScale.bBacklight_On = 1;
1003   3                              }else{
1004   3                                      if(srFlagScale.bSourceVoltage != SOURCE_ADAPTER && strTimer.cFLag_TimerJ_End == 1){
1005   4                                              OffBackLight;
1006   4                                              srFlagScale.bBacklight_On = 0;
1007   4                                      }
1008   3                              }
1009   2                              
1010   2                      }else{
1011   2                              if((fWeightLight >= stScaleParam.fPointZero+20*stScaleParam.fFactorCalibrate) && srFlagScale.bBateriaLo
             -w == 0){
1012   3                                              if(stScaleParam.cBacklight){OnBackLight;}
1013   3                                              strTimer.cFLag_TimerJ_Start = 1;
1014   3                                              srFlagScale.bBacklight_On = 1;
1015   3                                      }else{
1016   3                                              if(srFlagScale.bSourceVoltage != SOURCE_ADAPTER && strTimer.cFLag_TimerJ_End == 1){
1017   4                                                      OffBackLight;
1018   4                                                      srFlagScale.bBacklight_On = 0;
1019   4                                      }
1020   3                              }
1021   2                      } 
1022   1              
1023   1              return 0;
1024   1      }
1025          
1026          /**
1027            ******************************************************************************
1028            * Objetivo: Funcionamiento normal con peso mayor igual a cero 
1029            * Parametros entrada:
1030                  * Parametros Salida:
1031            * Prerequisitos: 
1032            ***
1033                  */
1034          void vWeight_Positive(void){
1035   1              
1036   1              float fWeightOverload = 0;
1037   1              
1038   1              float fOverloadUnit =  (float)stScaleParam.iCapacity + 
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 18  

1039   1                                              ((float)(stScaleParam.iDivisionMinima)/(float)(pow(10, (int)stScaleParam.cWeightDecimal)))*9;
1040   1              
1041   1      /////////////CCC/////////////CCC/////////////CCC/////////////CCC        fOverloadUnit = fRoundFloat(fOverloadUnit
             -, (int)stScaleParam.cWeightDecimal, stScaleParam.iDivisionMinima);
1042   1              
1043   1              fWeightOverload = stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial;
1044   1              
1045   1              /* Verifca que no exista la condicion de sobrepeso */
1046   1              if((fWeightOverload > stScaleParam.fWeightOverload || stScaleParam.fWeightScale > fOverloadUnit)  &&
1047   1                              srFlagScale.bTopeSobrePeso == 0){
1048   2                              
1049   2                      if(srFlagScale.bOverLoad == 0){
1050   3                              stScaleParam.iCountOverload++;          
1051   3                              vSaveParamScale(Parameter_Overload);
1052   3                      }
1053   2                      
1054   2                      srFlagScale.bOverLoad = 1;
1055   2                      
1056   2                      vGestorBateria();
1057   2                      
1058   2                      /* Cuando existe sobrepeso lo indica en la LCD*/
1059   2                      LCD_GLASS_Symbols(SYMBOL_ALL, 0);
1060   2                      LCD_GLASS_String("      ", LCD_TOTAL);
1061   2                      
1062   2                      if(stScaleParam.cLenguage == ESPANOL){
1063   3                              LCD_GLASS_String("SOBRE", LCD_PESO);
1064   3                              LCD_GLASS_String(" PESO", LCD_PRECIO);
1065   3                      }else{
1066   3                              LCD_GLASS_String("OVER ", LCD_PESO);
1067   3                              LCD_GLASS_String(" LOAD", LCD_PRECIO);
1068   3                      }
1069   2                      
1070   2                      strTimer.cFLag_TimerA_Start= 1;
1071   2                      strTimer.cFLag_TimerA_End = 0;
1072   2                      while(!strTimer.cFLag_TimerA_End){
1073   3                              IWDG_KEY_REFRESH;
1074   3                      }       
1075   2                      
1076   2                      if(stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial > stScaleParam.fValueOverload){
1077   3                              stScaleParam.fValueOverload = stScaleParam.fWeightScaleCount-stScaleParam.fPointZeroInitial;
1078   3                              vSaveParamScale(Parameter_Overload);
1079   3                      }
1080   2                      
1081   2                      //Restart_Sleep_Time;
1082   2                      
1083   2              }else{
1084   2                      srFlagScale.bOverLoad = 0;
1085   2                      
1086   2                      // Despliega el peso registrado
1087   2                      LCD_GLASS_Float(stScaleParam.fWeightScale, (int)stScaleParam.cWeightDecimal, LCD_PESO);
1088   2                                              
1089   2                      // Verifica si la opcion fijar precio no esta activada
1090   2                      if(!srFlagScale.bFlagFijarPRecio){
1091   3                              if(stScaleParam.fWeightScale == 0 && fWeightScaleBefore > 0){
1092   4                                      stScaleParam.fPrice_Unit = 0;
1093   4                                      stScaleParam.cNumberDecimalPrice = 0;
1094   4                                      srFlagScale.bDotDecimalPrice = 0;
1095   4                                      stScaleParam.cNumberDecimalPrice = 0;
1096   4                              }
1097   3                      }
1098   2                      
1099   2                      if(stScaleParam.fWeightScale != fWeightScaleBefore){
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 19  

1100   3                              //Auto_Off_On_15m;
1101   3                              //Restart_Sleep_Time;
1102   3                      }
1103   2                              
1104   2                      fWeightScaleBefore = stScaleParam.fWeightScale;
1105   2                      
1106   2                      // Muestra el precio x unidad del producto
1107   2                      if(stScaleParam.fWeightScale == 0 && srFlagScale.bFlagFijarPRecio == 0 && srFlagScale.bPrecioCero == 0){
1108   3                              srFlagScale.bPrecioCero = 1;
1109   3                      }
1110   2                      
1111   2                      if(stScaleParam.cPuntoDecimalPrecio < 3){
1112   3                              LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cPuntoDecimalPrecio, LCD_PRECIO);
1113   3                      }else{
1114   3                              LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cNumberDecimalPrice, LCD_PRECIO);
1115   3                      }
1116   2                      
1117   2                      stScaleParam.fTotal_Venta = stScaleParam.fPrice_Unit * stScaleParam.fWeightScale;
1118   2                                              
1119   2              /////////CCC/////////CCC/////////CCC/////////CCC/////////CCC stScaleParam.fTotal_Venta = fRoundFlo
             -at(stScaleParam.fTotal_Venta, 
1120   2                       /////////CCC/////////CCC/////////CCC/////////CCC//////  stScaleParam.cPuntoDecimalTotal, stScaleParam.c
             -ValorRedondeoCifraTotal);
1121   2                      
1122   2                      /*Verifica si el valor del total excede el limite a mostrar en la LCD*/
1123   2                      if(stScaleParam.fTotal_Venta > (999999 / (float)(pow(10,stScaleParam.cPuntoDecimalTotal)))){
1124   3                              LCD_GLASS_String("------", LCD_TOTAL);
1125   3                      }else{
1126   3                              if(stScaleParam.fTotal_Venta > 0){
1127   4                                      LCD_GLASS_Float(stScaleParam.fTotal_Venta, stScaleParam.cPuntoDecimalTotal, LCD_TOTAL);
1128   4                              }else{
1129   4                                      LCD_GLASS_Float(0, 0, LCD_TOTAL);
1130   4                              }
1131   3                      }
1132   2              }
1133   1      }
1134          
1135          /**
1136            ******************************************************************************
1137            * Objetivo: Bloqueo del sistema por peso negativo 
1138            * Parametros entrada:
1139                  * Parametros Salida:
1140            * Prerequisitos: 
1141            ***
1142                  */
1143          void vWeight_Negative(void){
1144   1              
1145   1              srFlagScale.bFlagNeg = 1;
1146   1              srFlagScale.bOverLoad = 0;
1147   1              
1148   1              /* En caso de un peso negativo verifica que no sea menor al peso tarado*/
1149   1              if((srFlagScale.bTara == 1) && ((-1)*stScaleParam.fWeightScale <= fCuentasToPeso(stScaleParam.fValueTara)
             -)){                
1150   2                      LCD_GLASS_Float(stScaleParam.fWeightScale, (int)stScaleParam.cWeightDecimal, LCD_PESO);
1151   2              }else{
1152   2                      LCD_GLASS_String("-----", LCD_PESO);
1153   2              }
1154   1              
1155   1              if(srFlagScale.bFlagFijarPRecio){
1156   2                      LCD_GLASS_String("------", LCD_TOTAL);
1157   2              }else{
1158   2                      stScaleParam.fPrice_Unit = 0;
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 20  

1159   2                      stScaleParam.cNumberDecimalPrice = 0;
1160   2                      stScaleParam.fTotal_Venta = 0;
1161   2                      LCD_GLASS_String("     0", LCD_TOTAL);
1162   2              }
1163   1                      
1164   1              if(stScaleParam.cPuntoDecimalPrecio < 3){
1165   2                      LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cPuntoDecimalPrecio, LCD_PRECIO);
1166   2              }else{
1167   2                      LCD_GLASS_Float(stScaleParam.fPrice_Unit, stScaleParam.cNumberDecimalPrice, LCD_PRECIO);
1168   2              }
1169   1              
1170   1              /* Elimina el indicador de cero al presentar peso negativo */
1171   1              LCD_GLASS_Symbols(SYMBOL_ZERO, 0);                      
1172   1      }
1173          
1174          /**
1175            ******************************************************************************
1176            * Objetivo: Calcular el peso.
1177            * Parametros entrada:
1178                  * Parametros Salida:
1179            * Prerequisitos: 
1180            ***
1181                  */
1182          
1183          void vCalculate_Weight (void){
1184   1      /***************
1185   1      Se toman 3 lecturas para garantizar el peso al realizar las sumas c/precio fijo, 
1186   1      si no hay precio fijo realiza solo una lectura de forma natural.
1187   1      ******************/     
1188   1              char i = 0, cCountPrecioFijo = 0;
1189   1      
1190   1              if(srFlagScale.bFlagFijarPRecio){       
1191   2                      cCountPrecioFijo = 3;                                           
1192   2              }
1193   1              else{
1194   2                      cCountPrecioFijo = 1;                   
1195   2              }
1196   1      
1197   1              for(i=0; i < cCountPrecioFijo; i++){
1198   2                      fWeightScale = fRead_Adc(1);                                    /* Solicita el peso actual */
1199   2              }
1200   1              
1201   1              if(srFlagScale.bErrorResponseAdc == 1 || srFlagScale.bErrorReadAdc == 1){
1202   2                      LCD_GLASS_String(" -E- ", LCD_PESO);
1203   2                      return;
1204   2              }
1205   1              
1206   1              // Si esta la funcion ZeroTracking la ejecuta
1207   1              if(stScaleParam.cZeroTracking == 1 && srFlagScale.bTara == 0){
1208   2                      vGetZeroTracking(fWeightScale);
1209   2              }
1210   1              
1211   1              stScaleParam.fWeightScaleCount = fWeightScale;
1212   1              
1213   1              fWeightLight = fWeightScale;
1214   1              
1215   1              // Calcula peso bruto (numero de cuentas ADC del peso)
1216   1              fWeightScale -= stScaleParam.fPointZero;        
1217   1              stScaleParam.fWeightScaleTara = fWeightScale;
1218   1                      
1219   1              if(srFlagScale.bShowCountADC == 1){
1220   2                      fWeightScale = fCuentasToPeso(stScaleParam.fWeightScaleCount);
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 21  

1221   2              }else{
1222   2                              /* Verifica si esta la opcion de tara activada para mostrar indicador NET */
1223   2                      if(srFlagScale.bTara == 1){
1224   3                              fWeightLight = fWeightScale; 
1225   3                              fWeightScale -= stScaleParam.fValueTara;                        
1226   3                              if(srFlagScale.bOverLoad ==0){
1227   4                                      LCD_GLASS_Symbols(SYMBOL_NET, 1);
1228   4                              }
1229   3                      }               
1230   2                      fWeightScale = fCuentasToPeso(fWeightScale);            
1231   2              }
1232   1              
1233   1              if(fWeightScale < 0 && srFlagScale.bShowCountADC == 0){
1234   2                      srFlagScale.bFlagWeightNeg = 1;
1235   2              }else if(fWeightScale == 0){
1236   2                      srFlagScale.bFlagWeightNeg = 0;
1237   2              }
1238   1              
1239   1              stScaleParam.fWeightScale = fWeightScale;
1240   1      }
1241          
1242          /**
1243            ******************************************************************************
1244            * Objetivo: Redondea numero flotante.
1245            * Parametros entrada: Ninguno
1246                  * Parametros Salida: Ninguno
1247            ******************************************************************************
1248            */
1249          float fCuentasToPeso(float fCountADC){
1250   1              
1251   1              float fAuxFactorC = 0;
1252   1              float fPesoFinal = 0; 
1253   1              float fPesoAux = 0;
1254   1              long iAuxPeso = 0;
1255   1              float arfFactorMult = 0;
1256   1              char cFlagNeg = 0;
1257   1              
1258   1              if(fCountADC < 0){
1259   2                      cFlagNeg = 1;
1260   2                      fCountADC *= (-1);
1261   2              }
1262   1              
1263   1              if(stScaleParam.cMultirango == 0){
1264   2                      arfFactorMult = (float)(stScaleParam.iDivisionMinima)/pow(10,(int)stScaleParam.cWeightDecimal);
1265   2                      fPesoAux = fCountADC/stScaleParam.fFactorCalibrate;     
1266   2              }else{
1267   2                      if (fCountADC <= stScaleParam.fCapacityCali*0.10){
1268   3                              fAuxFactorC = 0;
1269   3                              fAuxFactorC = (float)(stScaleParam.iDivisionMenorMenor)/(float)(stScaleParam.iDivisionMinima);
1270   3                              arfFactorMult = (float)(stScaleParam.iDivisionMenorMenor)/pow(10,(int)stScaleParam.cWeightDecimal);
1271   3                              fPesoAux = fCountADC/(stScaleParam.fFactorCalibrate*fAuxFactorC);                       
1272   3                      }               
1273   2                      else if (fCountADC <= stScaleParam.fCapacityCali*0.20){
1274   3                              fAuxFactorC = (float)(stScaleParam.iDivisionMenor)/(float)(stScaleParam.iDivisionMinima);
1275   3                              arfFactorMult = (float)(stScaleParam.iDivisionMenor)/pow(10,(int)stScaleParam.cWeightDecimal);
1276   3                              fPesoAux = fCountADC/(stScaleParam.fFactorCalibrate*fAuxFactorC);
1277   3                      }       
1278   2                      else{
1279   3                              arfFactorMult = (float)(stScaleParam.iDivisionMinima)/pow(10,(int)stScaleParam.cWeightDecimal);
1280   3                              fPesoAux = fCountADC/stScaleParam.fFactorCalibrate;
1281   3                      }
1282   2              }
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 22  

1283   1              
1284   1              iAuxPeso = (long)fPesoAux;      
1285   1              
1286   1              fPesoAux -= (float)iAuxPeso;
1287   1              iAuxPeso += (long)(fPesoAux*2);
1288   1              fPesoFinal = (float)iAuxPeso*arfFactorMult;
1289   1              
1290   1              if(cFlagNeg){
1291   2                      fPesoFinal *= (-1);
1292   2              }
1293   1              
1294   1              return fPesoFinal;
1295   1      }
1296          
1297          /**
1298            ******************************************************************************
1299            * Objective: To Reduce the power consumption of the load cell.
1300            ******************************************************************************
1301                  */
1302          float fSleep_Run(void){
1303   1              
1304   1              float fWeightScale = 0;
1305   1              float fValueReturn = 0;
1306   1              float fLimite = 0;
1307   1              int i = 0 ;     
1308   1              unsigned char cFlag_Continue = 1;       //Flag para 
1309   1              
1310   1              //Variable para rotar el mensaje
1311   1              unsigned char strMsgSaveBatt[16];
1312   1              unsigned char strSave[6] = {0,0,0,0,0,0};
1313   1              unsigned char strBatt[7] = {0,0,0,0,0,0,0};
1314   1              unsigned char cDataTemp = 0;
1315   1              unsigned char cDataTemp1 = 0;
1316   1              unsigned char bStatus_Battery = 0;
1317   1      
1318   1              
1319   1              strcpy(strMsgSaveBatt, "---------- ");
1320   1              
1321   1              fLimite = fCuentasToPeso(stScaleParam.fFactorCalibrate);
1322   1              
1323   1              Time_Sleep;     //Reinicia el contador para realizar lectura del ADC
1324   1              
1325   1              for(i=0; i<11; i++){
1326   2                      if(i<5){
1327   3                              strSave[i] = strMsgSaveBatt[i];
1328   3                      }else if(i<11){
1329   3                              strBatt[i-5] = strMsgSaveBatt[i];
1330   3                      }
1331   2              }
1332   1              
1333   1              OffBackLight;//GPIO_ResetBits(GPIOA, BACK_LIGHT);       //Off BackLight
1334   1                                      
1335   1              LCD_GLASS_Symbols(SYMBOL_ALL, 0);
1336   1              LCD_GLASS_String("-----", LCD_PRECIO);
1337   1              LCD_GLASS_String("------", LCD_TOTAL);
1338   1              LCD_GLASS_Float(0, 0, LCD_PESO);
1339   1              
1340   1              while(cFlag_Continue){
1341   2                      //Verifica por que salio del Wait
1342   2                      if(srFlagScale.bScaleOn == 0){ //Si se oprimio la tecla On
1343   3                              cFlag_Continue = 0;
1344   3                      }else if(strTimer.cFLag_TimerB_End){ //Si ya pasaron 3 segundos
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 23  

1345   3                              
1346   3                              fWeightScale = fRead_Adc(0);
1347   3                              
1348   3                              // Si esta la funcion ZeroTracking la ejecuta
1349   3                              if(stScaleParam.cZeroTracking == 1 && srFlagScale.bTara == 0){
1350   4                                      vGetZeroTracking(fWeightScale);
1351   4                              }
1352   3                              
1353   3                              stScaleParam.fWeightScaleCount = fWeightScale;
1354   3                              
1355   3                              // Calcula peso bruto (numero de cuentas ADC del peso)
1356   3                              fWeightScale -= stScaleParam.fPointZero;
1357   3                              fValueReturn = fWeightScale;
1358   3                              fWeightScale = fCuentasToPeso(fWeightScale);
1359   3                              
1360   3                              if(fWeightScale >= fLimite || fWeightScale < (-1)*(fLimite)){
1361   4                                      cFlag_Continue = 0;
1362   4                              }else if(vActionKey() != KEY_NULL){
1363   4                                      cFlag_Continue = 0;
1364   4                                      vBeep_Key();
1365   4                              }                               
1366   3                              
1367   3                              if(cFlag_Continue){                             
1368   4                                      
1369   4                                      //Verifica si ya esta conectado el elimnador para salir de bajo consumo
1370   4                                      bStatus_Battery = uGet_Status_Volt();
1371   4                                      
1372   4                                      if(bStatus_Battery != SOURCE_ADAPTER){ 
1373   5                                              vGestorBateria();
1374   5                                      }else{
1375   5                                              cFlag_Continue = 0;
1376   5                                      }
1377   4                                      
1378   4                                      if(srFlagScale.bMsgBatteryLow == 0){
1379   5                                              //Muestra animacion de lineas 
1380   5                                              
1381   5                                              cDataTemp = strMsgSaveBatt[0];
1382   5                                              
1383   5                                              for(i=0; i<14; i++){
1384   6                                                      strMsgSaveBatt[i] = strMsgSaveBatt[i+1];
1385   6                                              }
1386   5                                              
1387   5                                              strMsgSaveBatt[10] = cDataTemp;
1388   5                                              
1389   5                                              for(i=0; i<11; i++){
1390   6                                                      if(i<5){
1391   7                                                              strSave[i] = strMsgSaveBatt[i];
1392   7                                                      }else if(i<11){
1393   7                                                              strBatt[i-5] = strMsgSaveBatt[i];
1394   7                                                      }
1395   6                                              }
1396   5                                              
1397   5                                              LCD_GLASS_String("    0", LCD_PESO);
1398   5                                              LCD_GLASS_String(strSave, LCD_PRECIO);
1399   5                                              LCD_GLASS_String(strBatt, LCD_TOTAL);
1400   5                                      }
1401   4                                      
1402   4                                      Time_Sleep;
1403   4                              }
1404   3                      }else if(vActionKey() != KEY_NULL){
1405   3                              cFlag_Continue = 0;
1406   3                              vBeep_Key();
C51 COMPILER V7.50   DVR_SCALE                                                             09/22/2022 19:34:03 PAGE 24  

1407   3                      }
1408   2                      
1409   2                      if(srFlagScale.bScaleOn == 0){
1410   3                              cFlag_Continue = 0;
1411   3                      }
1412   2                      
1413   2                      if(srFlagScale.cAuto_Off_Time == 1 && stScaleParam.cTimeAutooff == 1){
1414   3                              srFlagScale.bScaleOn = 0;
1415   3                              cFlag_Continue = 0;
1416   3                      }
1417   2              }       
1418   1              
1419   1              if(srFlagScale.bBacklight_On){
1420   2                      if(stScaleParam.cBacklight){OnBackLight;}
1421   2              }
1422   1              
1423   1      ///////CCC///////CCC    CLK_PeripheralClockConfig(CLK_Peripheral_ADC1, ENABLE);
1424   1              //Restart_Sleep_Time;
1425   1              //Auto_Off_On_15m;
1426   1              
1427   1              return fValueReturn;
1428   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9210    ----
   CONSTANT SIZE    =    204    ----
   XDATA SIZE       =    197     168
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
