C51 COMPILER V7.50   MAIN                                                                  09/27/2022 17:18:45 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE customer\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) OBJECT(ma
                    -in.obj)

line level    source

   1          //#pragma code symbols debug oe
   2          //#define EXTERN
   3          #include <REG52.H>
   4          //#include <math.h>
   5          #include "./_solidic/head_file_version.h"
   6          #include "./_display/dvr_lcd_SDI1621.h"
   7          #include "./_weight/dvr_HX712.h"
   8          #include "./customer/keyboard.h"
   9          
  10          #include "./_scale/dvr_def.h"
  11          #include "./_scale/dvr_scale.h"
  12          #include <stdio.h>
  13          
  14          extern float fWeightScale;      
  15          
  16          unsigned int convertidorADC(void);
  17          void TestEEPROM(void);
  18          void init_pwm(void);
  19          void wdt_init(void);
  20          void gpio_init(void);
  21          void adc_init(void);
  22          void init_int_timer0(void);
  23          
  24          void main(void)
  25          {
  26   1      //char txt[20];float num = 1.3;//12.3;
  27   1        wdt_init();  /// watch dog ///
  28   1        gpio_init();  
  29   1        adc_init();  
  30   1        init_pwm();
  31   1        // Configuracion salida pin P0.1 prueba de togle pin interrup timer0. Salida
  32   1        // para toogle prueba   // P0M0 |= (1<<1);  // P0M1 &= ~(1<<1);
  33   1        init_int_timer0();    
  34   1        LCD_GLASS_Init(); 
  35   1        delay_ms(500);
  36   1          vReadParamScale();
*** WARNING C206 IN LINE 36 OF CUSTOMER\MAIN.C: 'vReadParamScale': missing function-prototype
  37   1      LCD_GLASS_Float(stScaleParam.iCapacity,2,LCD_TOTAL);
  38   1      delay_ms(3000);
  39   1              if(stScaleParam.iCapacity != 30)
  40   1              vPreConfiguration(PreConfig30KG);
  41   1              if(stScaleParam.fFactorCalibrate<1)
  42   1               vCalibrate_Scale();
*** WARNING C206 IN LINE 42 OF CUSTOMER\MAIN.C: 'vCalibrate_Scale': missing function-prototype
  43   1      //TestEEPROM();
  44   1      
  45   1      
  46   1      LCD_GLASS_Clear();
  47   1       while(1){  ; 
  48   2          key_scan();
  49   2      //      nFloatToStr(num,2,txt);
  50   2      //      
  51   2              vCalculate_Weight();
*** WARNING C206 IN LINE 51 OF CUSTOMER\MAIN.C: 'vCalculate_Weight': missing function-prototype
C51 COMPILER V7.50   MAIN                                                                  09/27/2022 17:18:45 PAGE 2   

  52   2              LCD_GLASS_Float(fWeightScale, 2,  LCD_PESO);
  53   2      //      sprintf(txt,"%d ",(int)(Key));
  54   2      //      LCD_GLASS_String(txt,LCD_PESO);
  55   2      
  56   2      //      sprintf(txt,"%d  ",(int)(KeyState));
  57   2      //      LCD_GLASS_String(txt,LCD_PRECIO);
  58   2      
  59   2              
  60   2              
  61   2         
  62   2              //peso=fRead_Adc(0);
  63   2      
  64   2      
  65   2              
  66   2          //delay_ms(5000);
  67   2      //      P0|= (1<<5);
  68   2      //      voltaje=convertidorADC()*(3.3/255);
  69   2       //     
  70   2      //      LCD_GLASS_Float(voltaje, 2, LCD_PESO);
  71   2      
  72   2      
  73   2          
  74   2        //iTemp_RA=123456789; 
  75   2              
  76   2      //      ReadHX712(&iTemp_RA); 
  77   2        //  sprintf(txt,"%ld   ",iTemp_RA);  LCD_GLASS_String(txt,LCD_TOTAL); 
  78   2      
  79   2       //delay_ms(3000); 
  80   2      //
  81   2      
  82   2      //peso = fStablePoint(5, 1, 0); //ok
  83   2      //LCD_GLASS_Float(peso,0,LCD_TOTAL);//ok
  84   2      }
  85   1      
  86   1      }
  87          
  88          void init_pwm(void){
  89   1      //apagar bl y beeper
  90   1              BL_DIS;
  91   1              BEEPER_DIS;
  92   1      
  93   1         //Configuracion salida BL
  94   1          P1M0 |= (1<<5);
  95   1          P1M1 &= ~(1<<5);
  96   1      
  97   1          PWMF_H  = 0x00;
  98   1              PWMF_L  = 0xA0;
  99   1              PWM0    = 0X01;//BEEPER correcto 0x6c
 100   1              PWM1    = 0X50;
 101   1              PWMCON  = 0x04; //PWM0-P1.4(LCD_LAMP)????(?PWM0=0xff?,?????)
 102   1      
 103   1              
 104   1      }
 105          
 106          void wdt_init(void){// watch dog ///
 107   1          EA = 0;
 108   1          WD_TA = 0x05;
 109   1              WD_TA = 0x0a;
 110   1              WDCON = 0x1f; /// 4s?,0.2s ///
 111   1          EA = 1;
 112   1              IWDG_KEY_REFRESH;
 113   1      }
C51 COMPILER V7.50   MAIN                                                                  09/27/2022 17:18:45 PAGE 3   

 114          
 115          void gpio_init(void)
 116          {
 117   1          P0 = 0x0C;//P0 = 0x04;
 118   1          P1 = 0x40;
 119   1          P2 = 0x11;
 120   1      
 121   1          P0M0 = 0xF0; //0b11111111;
 122   1          P0M1 = 0x00; //0b00000000;    
 123   1          P1M0 = 0xBF; //0b10111111;
 124   1          P1M1 = 0x00; //0b00000000;        
 125   1          P2M0 = 0xEE; //0b11101110;
 126   1          P2M1 = 0x00; //0b00000000;
 127   1      }
 128          
 129          void adc_init(void)
 130          {
 131   1          //Config lectura adc Only input
 132   1              P0M0 &= ~(1<<5);
 133   1              P0M1 |= (1<<5);
 134   1              //Salida en 1  para lectura adc
 135   1              P0|= (1<<5);
 136   1      }
 137          
 138          void init_int_timer0(void)
 139          {
 140   1              //Interrupcion timer0
 141   1              IE = 0x82;
 142   1              IP = 0x02;      
 143   1              //timer0
 144   1              TMOD = 0x00;
 145   1              TL0 = 0x00;
 146   1              TH0 = 0x7F;
 147   1              CKCON = 0x04;
 148   1      
 149   1          TCON |= (1<<4);//Start timer0
 150   1      }
 151          
 152          unsigned int convertidorADC(){
 153   1      
 154   1      unsigned int v=0;
 155   1      SARCON = 0x09;
 156   1              if(!(SARCON & 0x04))
 157   1              {
 158   2                      SARCON |= 0x04;
 159   2                      while(SARCON & 0x04)
 160   2                      {
 161   3                      }
 162   2              }
 163   1      v=SARDATA;
 164   1      SARCON &= 0xf7;
 165   1      return v;
 166   1      
 167   1      }
 168          /////////   Interrups timer0    ////////////////
 169          
 170          static void timer0(void) interrupt 1
 171          {               
 172   1              
 173   1                      /* 200mS*/
 174   1      /*      if(strTimer.cFLag_TimerA_Start){
 175   1                      strTimer.iTimerA = 200;//200;//700; //891
C51 COMPILER V7.50   MAIN                                                                  09/27/2022 17:18:45 PAGE 4   

 176   1                      //strTimer.cFLag_TimerA_Start = 0;
 177   1                      strTimer.cFLag_TimerA_On = 1;
 178   1                      strTimer.cFLag_TimerA_End = 0;
 179   1              }*/
 180   1      
 181   1              /* 5S*/
 182   1      /*      if(strTimer.cFLag_TimerE_Start){
 183   1                      strTimer.iTimerE = Number_Count_Sec * 4;
 184   1                      strTimer.cFLag_TimerE_Start = 0;
 185   1                      strTimer.cFLag_TimerE_On = 1;
 186   1                      strTimer.cFLag_TimerE_End = 0;
 187   1              }
 188   1      */
 189   1      
 190   1              /*Accion de desbordamiento del timer */
 191   1      /*      if(strTimer.cFLag_TimerA_On){
 192   1                      
 193   1      
 194   1                      if(strTimer.cFLag_TimerA_Start == 1){
 195   1                              strTimer.cFLag_TimerA_Start = 0;
 196   1                              BEEPER_EN;
 197   1                      }
 198   1                      if(strTimer.iTimerA > 0){
 199   1                              strTimer.iTimerA--;
 200   1                      }else{
 201   1                              strTimer.cFLag_TimerA_On = 0;
 202   1                              strTimer.cFLag_TimerA_End = 1;
 203   1                              BEEPER_DIS;
 204   1                              //GPIO_ResetBits(GPIOA, BEEPER);
 205   1                      }
 206   1              }*/
 207   1      
 208   1              if(strTimer.iTimerA>0&&strTimer.iTimerA<TimerAend)
 209   1              {
 210   2              if(strTimer.iTimerA==1)BEEPER_EN;
 211   2                
 212   2                  strTimer.iTimerA++;
 213   2                      if(strTimer.iTimerA==TimerAend)BEEPER_DIS;
 214   2              }
 215   1      
 216   1              /* timer usado en calibracion */
 217   1      /*      if(strTimer.cFLag_TimerE_On){
 218   1                      if(strTimer.iTimerE > 0){
 219   1                              strTimer.iTimerE--;
 220   1                      }else{
 221   1                              strTimer.cFLag_TimerE_On = 0;
 222   1                              strTimer.cFLag_TimerE_End = 1;
 223   1                      }
 224   1              }*/
 225   1              if(strTimer.iTimerE>0 && strTimer.iTimerE<TimerEend)
 226   1              strTimer.iTimerE++;
 227   1      
 228   1              //P0 ^= (1<<1);//P1 ^= (1<<5);
 229   1              TL0 = 0xCF;
 230   1              TH0 = 0xb5;
 231   1              TCON |= (1<<4);
 232   1      
 233   1      }
 234          
 235          
 236          void TestEEPROM(void)
 237          {
C51 COMPILER V7.50   MAIN                                                                  09/27/2022 17:18:45 PAGE 5   

 238   1              unsigned int addr=ADDRESS_PLU;
 239   1              float val;
 240   1              float i=0.12;
 241   1      
 242   1              unsigned int x=0;
 243   1       
 244   1              NRM_securty_a = 0xaa;
 245   1              NRM_securty_b = 0x55;
 246   1              
 247   1      
 248   1      
 249   1              while(i<15){    
 250   2              for(x=1;x<11;x++){
 251   3              flash_write_float32(addr+(x*4),i);
 252   3      
 253   3              val = flash_read_float32(addr+(x*4)-4);
 254   3              LCD_GLASS_Float(val, 2,  LCD_PESO);
 255   3      
 256   3              val = flash_read_float32(addr+(x*4));
 257   3              LCD_GLASS_Float(val, 2,  LCD_TOTAL);
 258   3      
 259   3              val = flash_read_float32(addr+(x*4)+4);
 260   3              LCD_GLASS_Float(val, 2,  LCD_PRECIO);
 261   3      
 262   3              i++;
 263   3              delay_ms(1000);
 264   3              }
 265   2      }
 266   1      
 267   1      NRM_securty_a = 0x00;
 268   1              NRM_securty_b = 0x00;
 269   1              LCD_GLASS_Clear();
 270   1      }
 271          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    828    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
