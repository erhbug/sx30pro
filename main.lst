C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:06:07 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE customer\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) OBJECT(ma
                    -in.obj)

line level    source

   1          //#pragma code symbols debug oe
   2          //#define EXTERN
   3          #include <REG52.H>
   4          //#include <math.h>
   5          #include "./_solidic/head_file_version.h"
   6          #include "./_display/dvr_lcd_SDI1621.h"
   7          #include "./_weight/dvr_HX712.h"
   8          #include "./customer/keyboard.h"
   9          
  10          #include "./_scale/dvr_def.h"
  11          #include "./_scale/dvr_scale.h"
  12          #include <stdio.h>
  13          
  14          
  15          
  16          unsigned int convertidorADC(void);
  17          void TestEEPROM(void);
  18          void init_pwm(void);
  19          void wdt_init(void);
  20          void gpio_init(void);
  21          void adc_init(void);
  22          void init_int_timer0(void);
  23          
  24          void main(void)
  25          {
  26   1      char txt[4];
  27   1      float peso;
  28   1      unsigned long iTemp_RA = 0;
  29   1      
  30   1        wdt_init();  /// watch dog ///
  31   1        gpio_init();
  32   1        adc_init();
  33   1        init_pwm();
  34   1        // Configuracion salida pin P0.1 prueba de togle pin interrup timer0. Salida
  35   1        // para toogle prueba
  36   1        // P0M0 |= (1<<1);
  37   1        // P0M1 &= ~(1<<1);
  38   1        init_int_timer0();
  39   1      
  40   1              LCD_GLASS_Init(); 
  41   1              LCD_GLASS_String("- - -",LCD_PESO);
  42   1              LCD_GLASS_String("-----",LCD_PRECIO); 
  43   1          LCD_GLASS_String("------", LCD_TOTAL);
  44   1              vSound_Saved_Param();
  45   1              // vSound_Saved_Param();
  46   1      vPreConfiguration(PreConfig30KG);
  47   1       vCalibrate_Scale();
*** WARNING C206 IN LINE 47 OF CUSTOMER\MAIN.C: 'vCalibrate_Scale': missing function-prototype
  48   1       //
  49   1      //TestEEPROM();
  50   1       while(1){  ; 
  51   2        //  key_scan();
  52   2      //      sprintf(txt,"%d ",(int)(Key));
  53   2      //      LCD_GLASS_String(txt,LCD_PESO);
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:06:07 PAGE 2   

  54   2      
  55   2      //      sprintf(txt,"%d  ",(int)(KeyState));
  56   2      //      LCD_GLASS_String(txt,LCD_PRECIO);
  57   2      
  58   2              
  59   2              
  60   2         
  61   2              //peso=fRead_Adc(0);
  62   2      
  63   2      
  64   2              
  65   2          //delay_ms(5000);
  66   2      //      P0|= (1<<5);
  67   2      //      voltaje=convertidorADC()*(3.3/255);
  68   2       //     LCD_GLASS_Float(peso, 2,  LCD_TOTAL);
  69   2      //      LCD_GLASS_Float(voltaje, 2, LCD_PESO);
  70   2      
  71   2      
  72   2          
  73   2        //iTemp_RA=123456789; 
  74   2              
  75   2      //      ReadHX712(&iTemp_RA); 
  76   2        //  sprintf(txt,"%ld   ",iTemp_RA);  LCD_GLASS_String(txt,LCD_TOTAL); 
  77   2      
  78   2       //delay_ms(3000); 
  79   2      //
  80   2      
  81   2      //peso = fStablePoint(5, 1, 0); //ok
  82   2      //LCD_GLASS_Float(peso,0,LCD_TOTAL);//ok
  83   2      }
  84   1      
  85   1      }
*** WARNING C280 IN LINE 26 OF CUSTOMER\MAIN.C: 'txt': unreferenced local variable
*** WARNING C280 IN LINE 27 OF CUSTOMER\MAIN.C: 'peso': unreferenced local variable
  86          
  87          void init_pwm(void){
  88   1      //apagar bl y beeper
  89   1              BL_DIS;
  90   1              BEEPER_DIS;
  91   1      
  92   1         //Configuracion salida BL
  93   1          P1M0 |= (1<<5);
  94   1          P1M1 &= ~(1<<5);
  95   1      
  96   1          PWMF_H  = 0x00;
  97   1              PWMF_L  = 0xA0;
  98   1              PWM0    = 0X6C;//BEEPER
  99   1              PWM1    = 0X50;
 100   1              PWMCON  = 0x04; //PWM0-P1.4(LCD_LAMP)????(?PWM0=0xff?,?????)
 101   1      
 102   1              
 103   1      }
 104          
 105          void wdt_init(void){// watch dog ///
 106   1          EA = 0;
 107   1          WD_TA = 0x05;
 108   1              WD_TA = 0x0a;
 109   1              WDCON = 0x1f; /// 4s?,0.2s ///
 110   1          EA = 1;
 111   1              IWDG_KEY_REFRESH;
 112   1      }
 113          
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:06:07 PAGE 3   

 114          void gpio_init(void)
 115          {
 116   1          P0 = 0x0C;//P0 = 0x04;
 117   1          P1 = 0x40;
 118   1          P2 = 0x11;
 119   1      
 120   1          P0M0 = 0xF0; //0b11111111;
 121   1          P0M1 = 0x00; //0b00000000;    
 122   1          P1M0 = 0xBF; //0b10111111;
 123   1          P1M1 = 0x00; //0b00000000;        
 124   1          P2M0 = 0xEE; //0b11101110;
 125   1          P2M1 = 0x00; //0b00000000;
 126   1      }
 127          
 128          void adc_init(void)
 129          {
 130   1          //Config lectura adc Only input
 131   1              P0M0 &= ~(1<<5);
 132   1              P0M1 |= (1<<5);
 133   1              //Salida en 1  para lectura adc
 134   1              P0|= (1<<5);
 135   1      }
 136          
 137          void init_int_timer0(void)
 138          {
 139   1              //Interrupcion timer0
 140   1              IE = 0x82;
 141   1              IP = 0x02;      
 142   1              //timer0
 143   1              TMOD = 0x00;
 144   1              TL0 = 0x00;
 145   1              TH0 = 0x7F;
 146   1              CKCON = 0x04;
 147   1      
 148   1          TCON |= (1<<4);//Start timer0
 149   1      }
 150          
 151          unsigned int convertidorADC(){
 152   1      
 153   1      unsigned int v=0;
 154   1      SARCON = 0x09;
 155   1              if(!(SARCON & 0x04))
 156   1              {
 157   2                      SARCON |= 0x04;
 158   2                      while(SARCON & 0x04)
 159   2                      {
 160   3                      }
 161   2              }
 162   1      v=SARDATA;
 163   1      SARCON &= 0xf7;
 164   1      return v;
 165   1      
 166   1      }
 167          /////////   Interrups timer0    ////////////////
 168          
 169          static void timer0(void) interrupt 1
 170          {               
 171   1              
 172   1                      /* 200mS*/
 173   1              if(strTimer.cFLag_TimerA_Start){
 174   2                      strTimer.iTimerA = 200;//200;//700; //891
 175   2                      //strTimer.cFLag_TimerA_Start = 0;
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:06:07 PAGE 4   

 176   2                      strTimer.cFLag_TimerA_On = 1;
 177   2                      strTimer.cFLag_TimerA_End = 0;
 178   2              }
 179   1      
 180   1              /* 5S*/
 181   1      /*      if(strTimer.cFLag_TimerE_Start){
 182   1                      strTimer.iTimerE = Number_Count_Sec * 4;
 183   1                      strTimer.cFLag_TimerE_Start = 0;
 184   1                      strTimer.cFLag_TimerE_On = 1;
 185   1                      strTimer.cFLag_TimerE_End = 0;
 186   1              }
 187   1      */
 188   1      
 189   1              /*Accion de desbordamiento del timer */
 190   1              if(strTimer.cFLag_TimerA_On){
 191   2                      
 192   2                      /*if(stScaleParam.cTypeBeeper == BEEPER_SMT){
 193   2                              GPIO_ToggleBits(GPIOA, BEEPER);
 194   2                      }else{
 195   2                              GPIO_SetBits(GPIOA, BEEPER);
 196   2                      }*/
 197   2                      if(strTimer.cFLag_TimerA_Start == 1){
 198   3                              strTimer.cFLag_TimerA_Start = 0;
 199   3                              BEEPER_EN;
 200   3                      }
 201   2                      if(strTimer.iTimerA > 0){
 202   3                              strTimer.iTimerA--;
 203   3                      }else{
 204   3                              strTimer.cFLag_TimerA_On = 0;
 205   3                              strTimer.cFLag_TimerA_End = 1;
 206   3                              BEEPER_DIS;
 207   3                              //GPIO_ResetBits(GPIOA, BEEPER);
 208   3                      }
 209   2              }
 210   1      
 211   1              /* timer usado en calibracion */
 212   1      /*      if(strTimer.cFLag_TimerE_On){
 213   1                      if(strTimer.iTimerE > 0){
 214   1                              strTimer.iTimerE--;
 215   1                      }else{
 216   1                              strTimer.cFLag_TimerE_On = 0;
 217   1                              strTimer.cFLag_TimerE_End = 1;
 218   1                      }
 219   1              }*/
 220   1              if(strTimer.iTimerE>0&&strTimer.iTimerE<TimerEend)
 221   1              strTimer.iTimerE++;
 222   1      
 223   1              //P0 ^= (1<<1);//P1 ^= (1<<5);
 224   1              TL0 = 0xCF;
 225   1              TH0 = 0xb5;
 226   1              TCON |= (1<<4);
 227   1      
 228   1      }
 229          
 230          
 231          void TestEEPROM(void)
 232          {
 233   1              unsigned int addr=ADDRESS_PLU;
 234   1              float val;
 235   1              float i=0.12;
 236   1      
 237   1              unsigned int x=0;
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:06:07 PAGE 5   

 238   1       
 239   1              NRM_securty_a = 0xaa;
 240   1              NRM_securty_b = 0x55;
 241   1              
 242   1      
 243   1      
 244   1              while(i<15){    
 245   2              for(x=1;x<11;x++){
 246   3              flash_write_float32(addr+(x*4),i);
 247   3      
 248   3              val = flash_read_float32(addr+(x*4)-4);
 249   3              LCD_GLASS_Float(val, 2,  LCD_PESO);
 250   3      
 251   3              val = flash_read_float32(addr+(x*4));
 252   3              LCD_GLASS_Float(val, 2,  LCD_TOTAL);
 253   3      
 254   3              val = flash_read_float32(addr+(x*4)+4);
 255   3              LCD_GLASS_Float(val, 2,  LCD_PRECIO);
 256   3      
 257   3              i++;
 258   3              delay_ms(1000);
 259   3              }
 260   2      }
 261   1      
 262   1      NRM_securty_a = 0x00;
 263   1              NRM_securty_b = 0x00;
 264   1              LCD_GLASS_Clear();
 265   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    782    ----
   CONSTANT SIZE    =     19    ----
   XDATA SIZE       =   ----      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
