C51 COMPILER V7.50   MAIN                                                                  09/22/2022 19:28:01 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE customer\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) OBJECT(ma
                    -in.obj)

line level    source

   1          //#pragma code symbols debug oe
   2          //#define EXTERN
   3          #include <REG52.H>
   4          //#include <math.h>
   5          #include "./_solidic/head_file_version.h"
   6          #include "./_display/dvr_lcd_SDI1621.h"
   7          #include "./_weight/dvr_HX712.h"
   8          #include "./customer/keyboard.h"
   9          
  10          #include "./_scale/dvr_def.h"
  11          #include "./_scale/dvr_scale.h"
  12          #include <stdio.h>
  13          
  14          
  15          
  16          unsigned int convertidorADC(void);
  17          void TestEEPROM(void);
  18          void init_pwm(void);
  19          void wdt_init(void);
  20          void gpio_init(void);
  21          void adc_init(void);
  22          void init_int_timer0(void);
  23          
  24          void main(void)
  25          {
  26   1      char txt[4];
  27   1      float peso;
  28   1      unsigned long iTemp_RA = 0;
  29   1      
  30   1        wdt_init();  /// watch dog ///
  31   1        gpio_init();
  32   1        adc_init();
  33   1        init_pwm();
  34   1        // Configuracion salida pin P0.1 prueba de togle pin interrup timer0. Salida
  35   1        // para toogle prueba
  36   1        // P0M0 |= (1<<1);
  37   1        // P0M1 &= ~(1<<1);
  38   1       // init_int_timer0();
  39   1      
  40   1              LCD_GLASS_Init(); 
  41   1              LCD_GLASS_String("- - -",LCD_PESO);
  42   1              LCD_GLASS_String("-----",LCD_PRECIO); 
  43   1          LCD_GLASS_String("------", LCD_TOTAL);
  44   1              // vSound_Saved_Param();
  45   1               delay_ms(1000);                
  46   1       LCD_GLASS_Clear();
  47   1       //vCalibrate_Scale();
  48   1      //TestEEPROM();
  49   1       while(1){   
  50   2        //  key_scan();
  51   2      //      sprintf(txt,"%d ",(int)(Key));
  52   2      //      LCD_GLASS_String(txt,LCD_PESO);
  53   2      
  54   2      //      sprintf(txt,"%d  ",(int)(KeyState));
C51 COMPILER V7.50   MAIN                                                                  09/22/2022 19:28:01 PAGE 2   

  55   2      //      LCD_GLASS_String(txt,LCD_PRECIO);
  56   2      
  57   2              
  58   2              
  59   2         
  60   2              //peso=fRead_Adc(0);
  61   2              peso = fStablePoint(5, 1, 0);
  62   2          LCD_GLASS_Float(peso,0,LCD_TOTAL); 
  63   2          //delay_ms(5000);
  64   2      //      P0|= (1<<5);
  65   2      //      voltaje=convertidorADC()*(3.3/255);
  66   2       //     LCD_GLASS_Float(peso, 2,  LCD_TOTAL);
  67   2      //      LCD_GLASS_Float(voltaje, 2, LCD_PESO);
  68   2      
  69   2      
  70   2          
  71   2        //iTemp_RA=123456789; 
  72   2              
  73   2      //      ReadHX712(&iTemp_RA); 
  74   2        //  sprintf(txt,"%ld   ",iTemp_RA);  LCD_GLASS_String(txt,LCD_TOTAL); 
  75   2      
  76   2       //delay_ms(3000); 
  77   2      //
  78   2      }
  79   1      
  80   1      }
*** WARNING C280 IN LINE 26 OF CUSTOMER\MAIN.C: 'txt': unreferenced local variable
  81          
  82          void init_pwm(void){
  83   1      //apagar bl y beeper
  84   1              BL_DIS;
  85   1              BEEPER_DIS;
  86   1      
  87   1         //Configuracion salida BL
  88   1          P1M0 |= (1<<5);
  89   1          P1M1 &= ~(1<<5);
  90   1      
  91   1          PWMF_H  = 0x00;
  92   1              PWMF_L  = 0xA0;
  93   1              PWM0    = 0X6C;//BEEPER
  94   1              PWM1    = 0X50;
  95   1              PWMCON  = 0x04; //PWM0-P1.4(LCD_LAMP)????(?PWM0=0xff?,?????)
  96   1      
  97   1              
  98   1      }
  99          
 100          void wdt_init(void){// watch dog ///
 101   1          EA = 0;
 102   1          WD_TA = 0x05;
 103   1              WD_TA = 0x0a;
 104   1              WDCON = 0x1f; /// 4s?,0.2s ///
 105   1          EA = 1;
 106   1              IWDG_KEY_REFRESH;
 107   1      }
 108          
 109          void gpio_init(void)
 110          {
 111   1          P0 = 0x0C;//P0 = 0x04;
 112   1          P1 = 0x40;
 113   1          P2 = 0x11;
 114   1      
 115   1          P0M0 = 0xF0; //0b11111111;
C51 COMPILER V7.50   MAIN                                                                  09/22/2022 19:28:01 PAGE 3   

 116   1          P0M1 = 0x00; //0b00000000;    
 117   1          P1M0 = 0xBF; //0b10111111;
 118   1          P1M1 = 0x00; //0b00000000;        
 119   1          P2M0 = 0xEE; //0b11101110;
 120   1          P2M1 = 0x00; //0b00000000;
 121   1      }
 122          
 123          void adc_init(void)
 124          {
 125   1          //Config lectura adc Only input
 126   1              P0M0 &= ~(1<<5);
 127   1              P0M1 |= (1<<5);
 128   1              //Salida en 1  para lectura adc
 129   1              P0|= (1<<5);
 130   1      }
 131          
 132          void init_int_timer0(void)
 133          {
 134   1              //Interrupcion timer0
 135   1              IE = 0x82;
 136   1              IP = 0x02;      
 137   1              //timer0
 138   1              TMOD = 0x00;
 139   1              TL0 = 0x00;
 140   1              TH0 = 0x7F;
 141   1              CKCON = 0x04;
 142   1      
 143   1          TCON |= (1<<4);//Start timer0
 144   1      }
 145          
 146          unsigned int convertidorADC(){
 147   1      
 148   1      unsigned int v=0;
 149   1      SARCON = 0x09;
 150   1              if(!(SARCON & 0x04))
 151   1              {
 152   2                      SARCON |= 0x04;
 153   2                      while(SARCON & 0x04)
 154   2                      {
 155   3                      }
 156   2              }
 157   1      v=SARDATA;
 158   1      SARCON &= 0xf7;
 159   1      return v;
 160   1      
 161   1      }
 162          /////////   Interrups timer0    ////////////////
 163          
 164          static void timer0(void) interrupt 1
 165          {               
 166   1              
 167   1                      /* 200mS*/
 168   1              if(strTimer.cFLag_TimerA_Start){
 169   2                      strTimer.iTimerA = 200;//200;//700; //891
 170   2                      //strTimer.cFLag_TimerA_Start = 0;
 171   2                      strTimer.cFLag_TimerA_On = 1;
 172   2                      strTimer.cFLag_TimerA_End = 0;
 173   2              }
 174   1      
 175   1              /* 5S*/
 176   1              if(strTimer.cFLag_TimerE_Start){
 177   2                      strTimer.iTimerE = Number_Count_Sec * 4;
C51 COMPILER V7.50   MAIN                                                                  09/22/2022 19:28:01 PAGE 4   

 178   2                      strTimer.cFLag_TimerE_Start = 0;
 179   2                      strTimer.cFLag_TimerE_On = 1;
 180   2                      strTimer.cFLag_TimerE_End = 0;
 181   2              }
 182   1      
 183   1      
 184   1              /*Accion de desbordamiento del timer */
 185   1              if(strTimer.cFLag_TimerA_On){
 186   2                      
 187   2                      /*if(stScaleParam.cTypeBeeper == BEEPER_SMT){
 188   2                              GPIO_ToggleBits(GPIOA, BEEPER);
 189   2                      }else{
 190   2                              GPIO_SetBits(GPIOA, BEEPER);
 191   2                      }*/
 192   2                      if(strTimer.cFLag_TimerA_Start == 1){
 193   3                              strTimer.cFLag_TimerA_Start = 0;
 194   3                              BEEPER_EN;
 195   3                      }
 196   2                      if(strTimer.iTimerA > 0){
 197   3                              strTimer.iTimerA--;
 198   3                      }else{
 199   3                              strTimer.cFLag_TimerA_On = 0;
 200   3                              strTimer.cFLag_TimerA_End = 1;
 201   3                              BEEPER_DIS;
 202   3                              //GPIO_ResetBits(GPIOA, BEEPER);
 203   3                      }
 204   2              }
 205   1      
 206   1              /* timer usado en calibracion */
 207   1              if(strTimer.cFLag_TimerE_On){
 208   2                      if(strTimer.iTimerE > 0){
 209   3                              strTimer.iTimerE--;
 210   3                      }else{
 211   3                              strTimer.cFLag_TimerE_On = 0;
 212   3                              strTimer.cFLag_TimerE_End = 1;
 213   3                      }
 214   2              }
 215   1      
 216   1              //P0 ^= (1<<1);//P1 ^= (1<<5);
 217   1              TL0 = 0xCF;
 218   1              TH0 = 0xb5;
 219   1              TCON |= (1<<4);
 220   1      
 221   1      }
 222          
 223          
 224          void TestEEPROM(void)
 225          {
 226   1              unsigned int addr=ADDRESS_PLU;
 227   1              float val;
 228   1              float i=0.12;
 229   1      
 230   1              unsigned int x=0;
 231   1       
 232   1              NRM_securty_a = 0xaa;
 233   1              NRM_securty_b = 0x55;
 234   1              
 235   1      
 236   1      
 237   1              while(i<15){    
 238   2              for(x=1;x<11;x++){
 239   3              flash_write_float32(addr+(x*4),i);
C51 COMPILER V7.50   MAIN                                                                  09/22/2022 19:28:01 PAGE 5   

 240   3      
 241   3              val = flash_read_float32(addr+(x*4)-4);
 242   3              LCD_GLASS_Float(val, 2,  LCD_PESO);
 243   3      
 244   3              val = flash_read_float32(addr+(x*4));
 245   3              LCD_GLASS_Float(val, 2,  LCD_TOTAL);
 246   3      
 247   3              val = flash_read_float32(addr+(x*4)+4);
 248   3              LCD_GLASS_Float(val, 2,  LCD_PRECIO);
 249   3      
 250   3              i++;
 251   3              delay_ms(1000);
 252   3              }
 253   2      }
 254   1      
 255   1      NRM_securty_a = 0x00;
 256   1              NRM_securty_b = 0x00;
 257   1              LCD_GLASS_Clear();
 258   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    841    ----
   CONSTANT SIZE    =     19    ----
   XDATA SIZE       =   ----      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
