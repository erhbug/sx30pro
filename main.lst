C51 COMPILER V7.50   MAIN                                                                  09/23/2022 13:44:56 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE customer\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) OBJECT(ma
                    -in.obj)

line level    source

   1          //#pragma code symbols debug oe
   2          //#define EXTERN
   3          #include <REG52.H>
   4          //#include <math.h>
   5          #include "./_solidic/head_file_version.h"
   6          #include "./_display/dvr_lcd_SDI1621.h"
   7          #include "./_weight/dvr_HX712.h"
   8          #include "./customer/keyboard.h"
   9          
  10          #include "./_scale/dvr_def.h"
  11          #include "./_scale/dvr_scale.h"
  12          #include <stdio.h>
  13          
  14          
  15          
  16          unsigned int convertidorADC(void);
  17          void TestEEPROM(void);
  18          void init_pwm(void);
  19          void wdt_init(void);
  20          void gpio_init(void);
  21          void adc_init(void);
  22          void init_int_timer0(void);
  23          
  24          void main(void)
  25          {
  26   1      //char txt[4];
  27   1      
  28   1        wdt_init();  /// watch dog ///
  29   1        gpio_init();
  30   1        adc_init();
  31   1        init_pwm();
  32   1        // Configuracion salida pin P0.1 prueba de togle pin interrup timer0. Salida
  33   1        // para toogle prueba
  34   1        // P0M0 |= (1<<1);
  35   1        // P0M1 &= ~(1<<1);
  36   1        init_int_timer0();
  37   1      
  38   1              LCD_GLASS_Init(); 
  39   1              vBeep_Key();
  40   1          LCD_GLASS_All_On();
  41   1              delay_ms(1000);
  42   1              LCD_GLASS_Clear();
  43   1              LCD_GLASS_String("-----",LCD_PRECIO); 
  44   1              LCD_GLASS_String("-----", LCD_PESO);
  45   1          LCD_GLASS_String("------", LCD_TOTAL);
  46   1              delay_ms(1000);
  47   1      //      LCD_GLASS_Float(1234.5,2,LCD_TOTAL);
  48   1      //      vSound_Saved_Param();
  49   1              // vSound_Saved_Param();
  50   1          vPreConfiguration(PreConfig30KG);
  51   1      // fStablePoint(5, 1, 0);
  52   1       vCalibrate_Scale();
*** WARNING C206 IN LINE 52 OF CUSTOMER\MAIN.C: 'vCalibrate_Scale': missing function-prototype
  53   1       
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 13:44:56 PAGE 2   

  54   1      TestEEPROM();
  55   1       while(1){  ; 
  56   2          key_scan();
  57   2      //      sprintf(txt,"%d ",(int)(Key));
  58   2      //      LCD_GLASS_String(txt,LCD_PESO);
  59   2      
  60   2      //      sprintf(txt,"%d  ",(int)(KeyState));
  61   2      //      LCD_GLASS_String(txt,LCD_PRECIO);
  62   2      
  63   2              
  64   2              
  65   2         
  66   2              //peso=fRead_Adc(0);
  67   2      
  68   2      
  69   2              
  70   2          //delay_ms(5000);
  71   2      //      P0|= (1<<5);
  72   2      //      voltaje=convertidorADC()*(3.3/255);
  73   2       //     LCD_GLASS_Float(peso, 2,  LCD_TOTAL);
  74   2      //      LCD_GLASS_Float(voltaje, 2, LCD_PESO);
  75   2      
  76   2      
  77   2          
  78   2        //iTemp_RA=123456789; 
  79   2              
  80   2      //      ReadHX712(&iTemp_RA); 
  81   2        //  sprintf(txt,"%ld   ",iTemp_RA);  LCD_GLASS_String(txt,LCD_TOTAL); 
  82   2      
  83   2       //delay_ms(3000); 
  84   2      //
  85   2      
  86   2      //peso = fStablePoint(5, 1, 0); //ok
  87   2      //LCD_GLASS_Float(peso,0,LCD_TOTAL);//ok
  88   2      }
  89   1      
  90   1      }
  91          
  92          void init_pwm(void){
  93   1      //apagar bl y beeper
  94   1              BL_DIS;
  95   1              BEEPER_DIS;
  96   1      
  97   1         //Configuracion salida BL
  98   1          P1M0 |= (1<<5);
  99   1          P1M1 &= ~(1<<5);
 100   1      
 101   1          PWMF_H  = 0x00;
 102   1              PWMF_L  = 0xA0;
 103   1              PWM0    = 0X6C;//BEEPER
 104   1              PWM1    = 0X50;
 105   1              PWMCON  = 0x04; //PWM0-P1.4(LCD_LAMP)????(?PWM0=0xff?,?????)
 106   1      
 107   1              
 108   1      }
 109          
 110          void wdt_init(void){// watch dog ///
 111   1          EA = 0;
 112   1          WD_TA = 0x05;
 113   1              WD_TA = 0x0a;
 114   1              WDCON = 0x1f; /// 4s?,0.2s ///
 115   1          EA = 1;
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 13:44:56 PAGE 3   

 116   1              IWDG_KEY_REFRESH;
 117   1      }
 118          
 119          void gpio_init(void)
 120          {
 121   1          P0 = 0x0C;//P0 = 0x04;
 122   1          P1 = 0x40;
 123   1          P2 = 0x11;
 124   1      
 125   1          P0M0 = 0xF0; //0b11111111;
 126   1          P0M1 = 0x00; //0b00000000;    
 127   1          P1M0 = 0xBF; //0b10111111;
 128   1          P1M1 = 0x00; //0b00000000;        
 129   1          P2M0 = 0xEE; //0b11101110;
 130   1          P2M1 = 0x00; //0b00000000;
 131   1      }
 132          
 133          void adc_init(void)
 134          {
 135   1          //Config lectura adc Only input
 136   1              P0M0 &= ~(1<<5);
 137   1              P0M1 |= (1<<5);
 138   1              //Salida en 1  para lectura adc
 139   1              P0|= (1<<5);
 140   1      }
 141          
 142          void init_int_timer0(void)
 143          {
 144   1              //Interrupcion timer0
 145   1              IE = 0x82;
 146   1              IP = 0x02;      
 147   1              //timer0
 148   1              TMOD = 0x00;
 149   1              TL0 = 0x00;
 150   1              TH0 = 0x7F;
 151   1              CKCON = 0x04;
 152   1      
 153   1          TCON |= (1<<4);//Start timer0
 154   1      }
 155          
 156          unsigned int convertidorADC(){
 157   1      
 158   1      unsigned int v=0;
 159   1      SARCON = 0x09;
 160   1              if(!(SARCON & 0x04))
 161   1              {
 162   2                      SARCON |= 0x04;
 163   2                      while(SARCON & 0x04)
 164   2                      {
 165   3                      }
 166   2              }
 167   1      v=SARDATA;
 168   1      SARCON &= 0xf7;
 169   1      return v;
 170   1      
 171   1      }
 172          /////////   Interrups timer0    ////////////////
 173          
 174          static void timer0(void) interrupt 1
 175          {               
 176   1              
 177   1                      /* 200mS*/
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 13:44:56 PAGE 4   

 178   1      /*      if(strTimer.cFLag_TimerA_Start){
 179   1                      strTimer.iTimerA = 200;//200;//700; //891
 180   1                      //strTimer.cFLag_TimerA_Start = 0;
 181   1                      strTimer.cFLag_TimerA_On = 1;
 182   1                      strTimer.cFLag_TimerA_End = 0;
 183   1              }*/
 184   1      
 185   1              /* 5S*/
 186   1      /*      if(strTimer.cFLag_TimerE_Start){
 187   1                      strTimer.iTimerE = Number_Count_Sec * 4;
 188   1                      strTimer.cFLag_TimerE_Start = 0;
 189   1                      strTimer.cFLag_TimerE_On = 1;
 190   1                      strTimer.cFLag_TimerE_End = 0;
 191   1              }
 192   1      */
 193   1      
 194   1              /*Accion de desbordamiento del timer */
 195   1      /*      if(strTimer.cFLag_TimerA_On){
 196   1                      
 197   1      
 198   1                      if(strTimer.cFLag_TimerA_Start == 1){
 199   1                              strTimer.cFLag_TimerA_Start = 0;
 200   1                              BEEPER_EN;
 201   1                      }
 202   1                      if(strTimer.iTimerA > 0){
 203   1                              strTimer.iTimerA--;
 204   1                      }else{
 205   1                              strTimer.cFLag_TimerA_On = 0;
 206   1                              strTimer.cFLag_TimerA_End = 1;
 207   1                              BEEPER_DIS;
 208   1                              //GPIO_ResetBits(GPIOA, BEEPER);
 209   1                      }
 210   1              }*/
 211   1      
 212   1              if(strTimer.iTimerA>0&&strTimer.iTimerA<TimerAend)
 213   1              {
 214   2              if(strTimer.iTimerA==1)BEEPER_EN;
 215   2                
 216   2                  strTimer.iTimerA++;
 217   2                      if(strTimer.iTimerA==TimerAend)BEEPER_DIS;
 218   2              }
 219   1      
 220   1              /* timer usado en calibracion */
 221   1      /*      if(strTimer.cFLag_TimerE_On){
 222   1                      if(strTimer.iTimerE > 0){
 223   1                              strTimer.iTimerE--;
 224   1                      }else{
 225   1                              strTimer.cFLag_TimerE_On = 0;
 226   1                              strTimer.cFLag_TimerE_End = 1;
 227   1                      }
 228   1              }*/
 229   1              if(strTimer.iTimerE>0 && strTimer.iTimerE<TimerEend)
 230   1              strTimer.iTimerE++;
 231   1      
 232   1              //P0 ^= (1<<1);//P1 ^= (1<<5);
 233   1              TL0 = 0xCF;
 234   1              TH0 = 0xb5;
 235   1              TCON |= (1<<4);
 236   1      
 237   1      }
 238          
 239          
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 13:44:56 PAGE 5   

 240          void TestEEPROM(void)
 241          {
 242   1              unsigned int addr=ADDRESS_PLU;
 243   1              float val;
 244   1              float i=0.12;
 245   1      
 246   1              unsigned int x=0;
 247   1       
 248   1              NRM_securty_a = 0xaa;
 249   1              NRM_securty_b = 0x55;
 250   1              
 251   1      
 252   1      
 253   1              while(i<15){    
 254   2              for(x=1;x<11;x++){
 255   3              flash_write_float32(addr+(x*4),i);
 256   3      
 257   3              val = flash_read_float32(addr+(x*4)-4);
 258   3              LCD_GLASS_Float(val, 2,  LCD_PESO);
 259   3      
 260   3              val = flash_read_float32(addr+(x*4));
 261   3              LCD_GLASS_Float(val, 2,  LCD_TOTAL);
 262   3      
 263   3              val = flash_read_float32(addr+(x*4)+4);
 264   3              LCD_GLASS_Float(val, 2,  LCD_PRECIO);
 265   3      
 266   3              i++;
 267   3              delay_ms(1000);
 268   3              }
 269   2      }
 270   1      
 271   1      NRM_securty_a = 0x00;
 272   1              NRM_securty_b = 0x00;
 273   1              LCD_GLASS_Clear();
 274   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    776    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
