C51 COMPILER V7.50   MAIN                                                                  09/15/2022 11:23:52 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE customer\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) OBJECT(ma
                    -in.obj)

line level    source

   1          //#pragma code symbols debug oe
   2          //#define EXTERN
   3          #include <REG52.H>
   4          //#include <math.h>
   5          #include "./_solidic/head_file_version.h"
   6          #include "./_display/dvr_lcd_SDI1621.h"
*** WARNING C245 IN LINE 40 OF C:\KEIL\C51\INC\STDIO.H: unknown #pragma, line ignored
*** WARNING C245 IN LINE 52 OF C:\KEIL\C51\INC\STRING.H: unknown #pragma, line ignored
   7          #include "./_weight/dvr_HX712.h"
   8          
   9          unsigned char Key;
  10          unsigned char lecturaADC[4]= {0};
  11          static unsigned char cont = 0;
  12          
  13          #define     BL_EN       P1 |= 0x20
  14          #define     BL_DIS      P1 &= 0xDF
  15          
  16          #define     BEEPER_EN   P1 |= 0x10
  17          #define     BEEPER_DIS  P1 &= 0xEF
  18          
  19          unsigned int convertidorADC(void);
  20          
  21          void init_pwm(void){
  22   1          PWMF_H  = 0x00;
  23   1              PWMF_L  = 0x20;
  24   1              PWM0    = 05;
  25   1              PWM1    = 03;
  26   1              PWMCON  = 0x04; //PWM0-P1.4(LCD_LAMP)????(?PWM0=0xff?,?????)
  27   1      }
  28          
  29          void TestEEPROM(void)
  30          {
  31   1              unsigned int addr=ADDRESS_PLU;
  32   1              float val;
  33   1              unsigned char txt[10]={0};
  34   1              float i=0.12;
  35   1      
  36   1              unsigned int x=0;
  37   1       
  38   1              NRM_securty_a = 0xaa;
  39   1              NRM_securty_b = 0x55;
  40   1              
  41   1              flash_write_float32(addr,0.00);
  42   1              flash_write_float32(addr+11,0.00);
  43   1      
  44   1              while(1){       
  45   2              for(x=1;x<11;x++){
  46   3              flash_write_float32(addr+(x*4),i);
  47   3      
  48   3              val = flash_read_float32(addr+(x*4)-4);
  49   3              sprintf(txt,"%f",val);  LCD_GLASS_String(txt,LCD_PESO); 
  50   3      
  51   3              val = flash_read_float32(addr+(x*4));
  52   3              sprintf(txt,"%f",val);  LCD_GLASS_String(txt,LCD_TOTAL);        
C51 COMPILER V7.50   MAIN                                                                  09/15/2022 11:23:52 PAGE 2   

  53   3      
  54   3              val = flash_read_float32(addr+(x*4)+4);
  55   3              sprintf(txt,"%f",val);  LCD_GLASS_String(txt,LCD_PRECIO); 
  56   3      
  57   3              i++;
  58   3              delay_ms(1000);
  59   3              }
  60   2      }
  61   1      
  62   1      NRM_securty_a = 0x00;
  63   1              NRM_securty_b = 0x00;
  64   1      }
  65          
  66          void main(void)
  67          {char txt[5]={0};
  68   1       float peso=0, voltaje=0;
  69   1              //int a = 0, b = 0;
  70   1          P0M0 = 0xF0; //0b11111111;
  71   1          P0M1 = 0x00; //0b00000000;    
  72   1          P1M0 = 0xBF; //0b10111111;
  73   1          P1M1 = 0x00; //0b00000000;        
  74   1          P2M0 = 0xEE; //0b11101110;
  75   1          P2M1 = 0x00; //0b00000000;
  76   1              //Config lectura adc
  77   1              P0M0 &= ~(1<<5);
  78   1              P0M1 |= (1<<5);
  79   1              //Configuracion salida BL
  80   1          P1M0 |= (1<<5);
  81   1          P1M1 &= ~(1<<5);
  82   1              //Configuracion salida BL
  83   1          P0M0 |= (1<<1);
  84   1          P0M1 &= ~(1<<1);
  85   1      /*bit KEY_K0 = P0^2;    
  86   1      sbit KEY_K1 = P2^4;     
  87   1      sbit KEY_K2 = P2^0;     
  88   1      sbit KEY_K3 = P1^6;             */
  89   1      
  90   1      /*      P1M0 = 0xff;
  91   1              P1M1 = 0x00;
  92   1              P2M0 = 0xff;
  93   1              P2M1 = 0x00;*/
  94   1      
  95   1          P0 = 0x0C;//P0 = 0x04;
  96   1          P1 = 0x40;
  97   1          P2 = 0x11;
  98   1              //Salida en 1  para lectura adc
  99   1              P0|= (1<<5);
 100   1              
 101   1              //Interrupcion timer0
 102   1              IE = 0x82;
 103   1              IP = 0x02;
 104   1              
 105   1              //timer0
 106   1              TMOD = 0x00;
 107   1              TL0 = 0x00;
 108   1              TH0 = 0x7F;
 109   1              CKCON = 0x04;
 110   1      
 111   1      /*      P2 = 0x00;
 112   1              P1 = 0x00;*/
 113   1      
 114   1              iLCD_GLASS_Init();
C51 COMPILER V7.50   MAIN                                                                  09/15/2022 11:23:52 PAGE 3   

 115   1                              delay_ms(500);
 116   1              LCD_GLASS_String("TORR",LCD_PESO);
 117   1                      delay_ms(500);
 118   1              LCD_GLASS_String("EY",LCD_PRECIO);
 119   1                              delay_ms(500);    
 120   1       
 121   1              init_pwm();
 122   1              BL_DIS;
 123   1              BEEPER_EN;
 124   1              
 125   1      
 126   1      /*      while(1)
 127   1              {
 128   1              KEY_D0=1;
 129   1      KEY_D1=1;
 130   1      KEY_D2=1;
 131   1      KEY_D3=1;
 132   1      KEY_D4=1;
 133   1      delay_ms(100);
 134   1      
 135   1      KEY_D0=0;
 136   1      KEY_D1=0;
 137   1      KEY_D2=0;
 138   1      KEY_D3=0;
 139   1      KEY_D4=0;
 140   1      delay_ms(100);
 141   1      
 142   1              }*/
 143   1       TCON |= (1<<4);
 144   1       iLCD_GLASS_Clear();
 145   1       while(1){   
 146   2       /*key_scan();
 147   2              sprintf(txt,"%d  ",(int)(Key));
 148   2              LCD_GLASS_String(txt,LCD_TOTAL)*/
 149   2      
 150   2              //sprintf(txt,"%d  ",(int)(KeyState));
 151   2              //LCD_GLASS_String(txt,LCD_PRECIO);
 152   2      
 153   2      TestEEPROM();   
 154   2              delay_ms(50);
 155   2         
 156   2              //peso=fRead_Adc(0);
 157   2              sprintf(txt,"%f   ",peso);  LCD_GLASS_String(txt,LCD_PESO); 
 158   2      
 159   2              P0|= (1<<5);
 160   2              voltaje=convertidorADC()*(3.3/255);
 161   2      //      LCD_GLASS_Float(peso, 2,  LCD_TOTAL);
 162   2      //      LCD_GLASS_Float(voltaje, 2, LCD_PESO);
 163   2      
 164   2      }
 165   1      
 166   1      }
 167          
 168          unsigned int convertidorADC(){
 169   1      
 170   1      unsigned int v=0;
 171   1      SARCON = 0x09;
 172   1              if(!(SARCON & 0x04))
 173   1              {
 174   2                      SARCON |= 0x04;
 175   2                      while(SARCON & 0x04)
 176   2                      {
C51 COMPILER V7.50   MAIN                                                                  09/15/2022 11:23:52 PAGE 4   

 177   3                      }
 178   2              }
 179   1      v=SARDATA;
 180   1      SARCON &= 0xf7;
 181   1      return v;
 182   1      
 183   1      }
 184          
 185          static void timer0(void) interrupt 1
 186          {               
 187   1              //static unsigned char cont = 0;
 188   1              //IE = 0;        // 禁止中断
 189   1              //P1 &= ~(1<<5);
 190   1              /*if(cont==40){
 191   1                      P1 |= (1<<5);
 192   1                      cont = 0;
 193   1                      }*/
 194   1              P0 ^= (1<<1);//P1 ^= (1<<5);
 195   1              TL0 = 0xCF;
 196   1              TH0 = 0xAF;
 197   1              /*if(cont){
 198   1                      cont = 0;
 199   1                      P1 &= ~(1<<5);
 200   1              }else{
 201   1                      cont = 1;
 202   1                      P1 |= (1<<5);
 203   1                      }*/
 204   1              //TCON |= (1<<4);
 205   1              //IE = 0x02;  // 打开中断
 206   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    844    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =      6      35
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
