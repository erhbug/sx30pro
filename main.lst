C51 COMPILER V7.50   MAIN                                                                  09/22/2022 15:03:35 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE customer\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) OBJECT(ma
                    -in.obj)

line level    source

   1          //#pragma code symbols debug oe
   2          //#define EXTERN
   3          #include <REG52.H>
   4          //#include <math.h>
   5          #include "./_solidic/head_file_version.h"
   6          #include "./_display/dvr_lcd_SDI1621.h"
   7          #include "./_weight/dvr_HX712.h"
   8          #include "./customer/keyboard.h"
   9          
  10          #include "./_scale/dvr_def.h"
  11          #include "./_scale/dvr_scale.h"
  12          #include <stdio.h>
  13          
  14          
  15          
  16          unsigned int convertidorADC(void);
  17          void TestEEPROM(void);
  18          void init_pwm(void);
  19          void wdt_init(void);
  20          void gpio_init(void);
  21          void adc_init(void);
  22          void init_int_timer0(void);
  23          
  24          void main(void)
  25          {
  26   1      char txt[5];
  27   1      float peso;
  28   1        wdt_init();  /// watch dog ///
  29   1        gpio_init();
  30   1        adc_init();
  31   1        init_pwm();
  32   1        // Configuracion salida pin P0.1 prueba de togle pin interrup timer0. Salida
  33   1        // para toogle prueba
  34   1        // P0M0 |= (1<<1);
  35   1        // P0M1 &= ~(1<<1);
  36   1        init_int_timer0();
  37   1      
  38   1              LCD_GLASS_Init(); 
  39   1              LCD_GLASS_String("- - -",LCD_PESO);
  40   1              LCD_GLASS_String("-----",LCD_PRECIO); 
  41   1          LCD_GLASS_String("------", LCD_TOTAL);
  42   1              // vSound_Saved_Param();
  43   1               delay_ms(1000);                
  44   1       LCD_GLASS_Clear();
  45   1      // vCalibrate_Scale();
  46   1       while(1){   
  47   2          key_scan();
  48   2              sprintf(txt,"%d  ",(int)(Key));
  49   2              LCD_GLASS_String(txt,LCD_TOTAL);
  50   2      
  51   2      //      sprintf(txt,"%d  ",(int)(KeyState));
  52   2      //      LCD_GLASS_String(txt,LCD_PRECIO);
  53   2      
  54   2              
C51 COMPILER V7.50   MAIN                                                                  09/22/2022 15:03:35 PAGE 2   

  55   2      //      delay_ms(50);
  56   2         
  57   2              peso=fRead_Adc(0);
  58   2      //      sprintf(txt,"%f   ",peso);  LCD_GLASS_String(txt,LCD_PESO); 
  59   2      
  60   2              P0|= (1<<5);
  61   2      //      voltaje=convertidorADC()*(3.3/255);
  62   2      //      LCD_GLASS_Float(peso, 2,  LCD_TOTAL);
  63   2      //      LCD_GLASS_Float(voltaje, 2, LCD_PESO);
  64   2      //TestEEPROM();
  65   2      }
  66   1      
  67   1      }
  68          
  69          void init_pwm(void){
  70   1      //apagar bl y beeper
  71   1              BL_DIS;
  72   1              BEEPER_DIS;
  73   1      
  74   1         //Configuracion salida BL
  75   1          P1M0 |= (1<<5);
  76   1          P1M1 &= ~(1<<5);
  77   1      
  78   1          PWMF_H  = 0x00;
  79   1              PWMF_L  = 0xA0;
  80   1              PWM0    = 0X6C;//BEEPER
  81   1              PWM1    = 0X50;
  82   1              PWMCON  = 0x04; //PWM0-P1.4(LCD_LAMP)????(?PWM0=0xff?,?????)
  83   1      
  84   1              
  85   1      }
  86          
  87          void wdt_init(void){// watch dog ///
  88   1          EA = 0;
  89   1          WD_TA = 0x05;
  90   1              WD_TA = 0x0a;
  91   1              WDCON = 0x1f; /// 4s?,0.2s ///
  92   1          EA = 1;
  93   1              IWDG_KEY_REFRESH;
  94   1      }
  95          
  96          void gpio_init(void)
  97          {
  98   1          P0 = 0x0C;//P0 = 0x04;
  99   1          P1 = 0x40;
 100   1          P2 = 0x11;
 101   1      
 102   1          P0M0 = 0xF0; //0b11111111;
 103   1          P0M1 = 0x00; //0b00000000;    
 104   1          P1M0 = 0xBF; //0b10111111;
 105   1          P1M1 = 0x00; //0b00000000;        
 106   1          P2M0 = 0xEE; //0b11101110;
 107   1          P2M1 = 0x00; //0b00000000;
 108   1      }
 109          
 110          void adc_init(void)
 111          {
 112   1          //Config lectura adc Only input
 113   1              P0M0 &= ~(1<<5);
 114   1              P0M1 |= (1<<5);
 115   1              //Salida en 1  para lectura adc
 116   1              P0|= (1<<5);
C51 COMPILER V7.50   MAIN                                                                  09/22/2022 15:03:35 PAGE 3   

 117   1      }
 118          
 119          void init_int_timer0(void)
 120          {
 121   1              //Interrupcion timer0
 122   1              IE = 0x82;
 123   1              IP = 0x02;      
 124   1              //timer0
 125   1              TMOD = 0x00;
 126   1              TL0 = 0x00;
 127   1              TH0 = 0x7F;
 128   1              CKCON = 0x04;
 129   1      
 130   1          TCON |= (1<<4);//Start timer0
 131   1      }
 132          
 133          unsigned int convertidorADC(){
 134   1      
 135   1      unsigned int v=0;
 136   1      SARCON = 0x09;
 137   1              if(!(SARCON & 0x04))
 138   1              {
 139   2                      SARCON |= 0x04;
 140   2                      while(SARCON & 0x04)
 141   2                      {
 142   3                      }
 143   2              }
 144   1      v=SARDATA;
 145   1      SARCON &= 0xf7;
 146   1      return v;
 147   1      
 148   1      }
 149          /////////   Interrups timer0    ////////////////
 150          
 151          static void timer0(void) interrupt 1
 152          {               
 153   1              
 154   1                      /* 200mS*/
 155   1              if(strTimer.cFLag_TimerA_Start){
 156   2                      strTimer.iTimerA = 200;//200;//700; //891
 157   2                      //strTimer.cFLag_TimerA_Start = 0;
 158   2                      strTimer.cFLag_TimerA_On = 1;
 159   2                      strTimer.cFLag_TimerA_End = 0;
 160   2              }
 161   1      
 162   1              /* 5S*/
 163   1              if(strTimer.cFLag_TimerE_Start){
 164   2                      strTimer.iTimerE = Number_Count_Sec * 4;
 165   2                      strTimer.cFLag_TimerE_Start = 0;
 166   2                      strTimer.cFLag_TimerE_On = 1;
 167   2                      strTimer.cFLag_TimerE_End = 0;
 168   2              }
 169   1      
 170   1      
 171   1              /*Accion de desbordamiento del timer */
 172   1              if(strTimer.cFLag_TimerA_On){
 173   2                      
 174   2                      /*if(stScaleParam.cTypeBeeper == BEEPER_SMT){
 175   2                              GPIO_ToggleBits(GPIOA, BEEPER);
 176   2                      }else{
 177   2                              GPIO_SetBits(GPIOA, BEEPER);
 178   2                      }*/
C51 COMPILER V7.50   MAIN                                                                  09/22/2022 15:03:35 PAGE 4   

 179   2                      if(strTimer.cFLag_TimerA_Start == 1){
 180   3                              strTimer.cFLag_TimerA_Start = 0;
 181   3                              BEEPER_EN;
 182   3                      }
 183   2                      if(strTimer.iTimerA > 0){
 184   3                              strTimer.iTimerA--;
 185   3                      }else{
 186   3                              strTimer.cFLag_TimerA_On = 0;
 187   3                              strTimer.cFLag_TimerA_End = 1;
 188   3                              BEEPER_DIS;
 189   3                              //GPIO_ResetBits(GPIOA, BEEPER);
 190   3                      }
 191   2              }
 192   1      
 193   1              /* timer usado en calibracion */
 194   1              if(strTimer.cFLag_TimerE_On){
 195   2                      if(strTimer.iTimerE > 0){
 196   3                              strTimer.iTimerE--;
 197   3                      }else{
 198   3                              strTimer.cFLag_TimerE_On = 0;
 199   3                              strTimer.cFLag_TimerE_End = 1;
 200   3                      }
 201   2              }
 202   1      
 203   1              //P0 ^= (1<<1);//P1 ^= (1<<5);
 204   1              TL0 = 0xCF;
 205   1              TH0 = 0xb5;
 206   1              TCON |= (1<<4);
 207   1      
 208   1      }
 209          
 210          
 211          void TestEEPROM(void)
 212          {
 213   1              unsigned int addr=ADDRESS_PLU;
 214   1              float val;
 215   1              unsigned char txt[10]={0};
 216   1              float i=0.12;
 217   1      
 218   1              unsigned int x=0;
 219   1       
 220   1              NRM_securty_a = 0xaa;
 221   1              NRM_securty_b = 0x55;
 222   1              
 223   1              flash_write_float32(addr,0.00);
 224   1              flash_write_float32(addr+11,0.00);
 225   1      
 226   1              while(1){       
 227   2              for(x=1;x<11;x++){
 228   3              flash_write_float32(addr+(x*4),i);
 229   3      
 230   3              val = flash_read_float32(addr+(x*4)-4);
 231   3              sprintf(txt,"%f",val);  LCD_GLASS_String(txt,LCD_PESO); 
 232   3      
 233   3              val = flash_read_float32(addr+(x*4));
 234   3              sprintf(txt,"%f",val);  LCD_GLASS_String(txt,LCD_TOTAL);        
 235   3      
 236   3              val = flash_read_float32(addr+(x*4)+4);
 237   3              sprintf(txt,"%f",val);  LCD_GLASS_String(txt,LCD_PRECIO); 
 238   3      
 239   3              i++;
 240   3              delay_ms(1000);
C51 COMPILER V7.50   MAIN                                                                  09/22/2022 15:03:35 PAGE 5   

 241   3              }
 242   2      }
 243   1      
 244   1      NRM_securty_a = 0x00;
 245   1              NRM_securty_b = 0x00;
 246   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    974    ----
   CONSTANT SIZE    =     37    ----
   XDATA SIZE       =   ----      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
