C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:10:06 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE customer\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) OBJECT(ma
                    -in.obj)

line level    source

   1          //#pragma code symbols debug oe
   2          //#define EXTERN
   3          #include <REG52.H>
   4          //#include <math.h>
   5          #include "./_solidic/head_file_version.h"
   6          #include "./_display/dvr_lcd_SDI1621.h"
   7          #include "./_weight/dvr_HX712.h"
   8          #include "./customer/keyboard.h"
   9          
  10          #include "./_scale/dvr_def.h"
  11          #include "./_scale/dvr_scale.h"
  12          #include <stdio.h>
  13          
  14          
  15          
  16          unsigned int convertidorADC(void);
  17          void TestEEPROM(void);
  18          void init_pwm(void);
  19          void wdt_init(void);
  20          void gpio_init(void);
  21          void adc_init(void);
  22          void init_int_timer0(void);
  23          
  24          void main(void)
  25          {
  26   1      //char txt[4];
  27   1      
  28   1        wdt_init();  /// watch dog ///
  29   1        gpio_init();
  30   1        adc_init();
  31   1        init_pwm();
  32   1        // Configuracion salida pin P0.1 prueba de togle pin interrup timer0. Salida
  33   1        // para toogle prueba
  34   1        // P0M0 |= (1<<1);
  35   1        // P0M1 &= ~(1<<1);
  36   1        init_int_timer0();
  37   1      
  38   1              LCD_GLASS_Init(); 
  39   1              LCD_GLASS_String("- - -",LCD_PESO);
  40   1              LCD_GLASS_String("-----",LCD_PRECIO); 
  41   1          LCD_GLASS_String("------", LCD_TOTAL);
  42   1      //      vSound_Saved_Param();
  43   1              // vSound_Saved_Param();
  44   1      //vPreConfiguration(PreConfig30KG);
  45   1       vCalibrate_Scale();
*** WARNING C206 IN LINE 45 OF CUSTOMER\MAIN.C: 'vCalibrate_Scale': missing function-prototype
  46   1       //
  47   1      //TestEEPROM();
  48   1       while(1){  ; 
  49   2          key_scan();
  50   2      //      sprintf(txt,"%d ",(int)(Key));
  51   2      //      LCD_GLASS_String(txt,LCD_PESO);
  52   2      
  53   2      //      sprintf(txt,"%d  ",(int)(KeyState));
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:10:06 PAGE 2   

  54   2      //      LCD_GLASS_String(txt,LCD_PRECIO);
  55   2      
  56   2              
  57   2              
  58   2         
  59   2              //peso=fRead_Adc(0);
  60   2      
  61   2      
  62   2              
  63   2          //delay_ms(5000);
  64   2      //      P0|= (1<<5);
  65   2      //      voltaje=convertidorADC()*(3.3/255);
  66   2       //     LCD_GLASS_Float(peso, 2,  LCD_TOTAL);
  67   2      //      LCD_GLASS_Float(voltaje, 2, LCD_PESO);
  68   2      
  69   2      
  70   2          
  71   2        //iTemp_RA=123456789; 
  72   2              
  73   2      //      ReadHX712(&iTemp_RA); 
  74   2        //  sprintf(txt,"%ld   ",iTemp_RA);  LCD_GLASS_String(txt,LCD_TOTAL); 
  75   2      
  76   2       //delay_ms(3000); 
  77   2      //
  78   2      
  79   2      //peso = fStablePoint(5, 1, 0); //ok
  80   2      //LCD_GLASS_Float(peso,0,LCD_TOTAL);//ok
  81   2      }
  82   1      
  83   1      }
  84          
  85          void init_pwm(void){
  86   1      //apagar bl y beeper
  87   1              BL_DIS;
  88   1              BEEPER_DIS;
  89   1      
  90   1         //Configuracion salida BL
  91   1          P1M0 |= (1<<5);
  92   1          P1M1 &= ~(1<<5);
  93   1      
  94   1          PWMF_H  = 0x00;
  95   1              PWMF_L  = 0xA0;
  96   1              PWM0    = 0X6C;//BEEPER
  97   1              PWM1    = 0X50;
  98   1              PWMCON  = 0x04; //PWM0-P1.4(LCD_LAMP)????(?PWM0=0xff?,?????)
  99   1      
 100   1              
 101   1      }
 102          
 103          void wdt_init(void){// watch dog ///
 104   1          EA = 0;
 105   1          WD_TA = 0x05;
 106   1              WD_TA = 0x0a;
 107   1              WDCON = 0x1f; /// 4s?,0.2s ///
 108   1          EA = 1;
 109   1              IWDG_KEY_REFRESH;
 110   1      }
 111          
 112          void gpio_init(void)
 113          {
 114   1          P0 = 0x0C;//P0 = 0x04;
 115   1          P1 = 0x40;
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:10:06 PAGE 3   

 116   1          P2 = 0x11;
 117   1      
 118   1          P0M0 = 0xF0; //0b11111111;
 119   1          P0M1 = 0x00; //0b00000000;    
 120   1          P1M0 = 0xBF; //0b10111111;
 121   1          P1M1 = 0x00; //0b00000000;        
 122   1          P2M0 = 0xEE; //0b11101110;
 123   1          P2M1 = 0x00; //0b00000000;
 124   1      }
 125          
 126          void adc_init(void)
 127          {
 128   1          //Config lectura adc Only input
 129   1              P0M0 &= ~(1<<5);
 130   1              P0M1 |= (1<<5);
 131   1              //Salida en 1  para lectura adc
 132   1              P0|= (1<<5);
 133   1      }
 134          
 135          void init_int_timer0(void)
 136          {
 137   1              //Interrupcion timer0
 138   1              IE = 0x82;
 139   1              IP = 0x02;      
 140   1              //timer0
 141   1              TMOD = 0x00;
 142   1              TL0 = 0x00;
 143   1              TH0 = 0x7F;
 144   1              CKCON = 0x04;
 145   1      
 146   1          TCON |= (1<<4);//Start timer0
 147   1      }
 148          
 149          unsigned int convertidorADC(){
 150   1      
 151   1      unsigned int v=0;
 152   1      SARCON = 0x09;
 153   1              if(!(SARCON & 0x04))
 154   1              {
 155   2                      SARCON |= 0x04;
 156   2                      while(SARCON & 0x04)
 157   2                      {
 158   3                      }
 159   2              }
 160   1      v=SARDATA;
 161   1      SARCON &= 0xf7;
 162   1      return v;
 163   1      
 164   1      }
 165          /////////   Interrups timer0    ////////////////
 166          
 167          static void timer0(void) interrupt 1
 168          {               
 169   1              
 170   1                      /* 200mS*/
 171   1              if(strTimer.cFLag_TimerA_Start){
 172   2                      strTimer.iTimerA = 200;//200;//700; //891
 173   2                      //strTimer.cFLag_TimerA_Start = 0;
 174   2                      strTimer.cFLag_TimerA_On = 1;
 175   2                      strTimer.cFLag_TimerA_End = 0;
 176   2              }
 177   1      
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:10:06 PAGE 4   

 178   1              /* 5S*/
 179   1      /*      if(strTimer.cFLag_TimerE_Start){
 180   1                      strTimer.iTimerE = Number_Count_Sec * 4;
 181   1                      strTimer.cFLag_TimerE_Start = 0;
 182   1                      strTimer.cFLag_TimerE_On = 1;
 183   1                      strTimer.cFLag_TimerE_End = 0;
 184   1              }
 185   1      */
 186   1      
 187   1              /*Accion de desbordamiento del timer */
 188   1              if(strTimer.cFLag_TimerA_On){
 189   2                      
 190   2                      /*if(stScaleParam.cTypeBeeper == BEEPER_SMT){
 191   2                              GPIO_ToggleBits(GPIOA, BEEPER);
 192   2                      }else{
 193   2                              GPIO_SetBits(GPIOA, BEEPER);
 194   2                      }*/
 195   2                      if(strTimer.cFLag_TimerA_Start == 1){
 196   3                              strTimer.cFLag_TimerA_Start = 0;
 197   3                              BEEPER_EN;
 198   3                      }
 199   2                      if(strTimer.iTimerA > 0){
 200   3                              strTimer.iTimerA--;
 201   3                      }else{
 202   3                              strTimer.cFLag_TimerA_On = 0;
 203   3                              strTimer.cFLag_TimerA_End = 1;
 204   3                              BEEPER_DIS;
 205   3                              //GPIO_ResetBits(GPIOA, BEEPER);
 206   3                      }
 207   2              }
 208   1      
 209   1              /* timer usado en calibracion */
 210   1      /*      if(strTimer.cFLag_TimerE_On){
 211   1                      if(strTimer.iTimerE > 0){
 212   1                              strTimer.iTimerE--;
 213   1                      }else{
 214   1                              strTimer.cFLag_TimerE_On = 0;
 215   1                              strTimer.cFLag_TimerE_End = 1;
 216   1                      }
 217   1              }*/
 218   1              if(strTimer.iTimerE>0&&strTimer.iTimerE<TimerEend)
 219   1              strTimer.iTimerE++;
 220   1      
 221   1              //P0 ^= (1<<1);//P1 ^= (1<<5);
 222   1              TL0 = 0xCF;
 223   1              TH0 = 0xb5;
 224   1              TCON |= (1<<4);
 225   1      
 226   1      }
 227          
 228          
 229          void TestEEPROM(void)
 230          {
 231   1              unsigned int addr=ADDRESS_PLU;
 232   1              float val;
 233   1              float i=0.12;
 234   1      
 235   1              unsigned int x=0;
 236   1       
 237   1              NRM_securty_a = 0xaa;
 238   1              NRM_securty_b = 0x55;
 239   1              
C51 COMPILER V7.50   MAIN                                                                  09/23/2022 10:10:06 PAGE 5   

 240   1      
 241   1      
 242   1              while(i<15){    
 243   2              for(x=1;x<11;x++){
 244   3              flash_write_float32(addr+(x*4),i);
 245   3      
 246   3              val = flash_read_float32(addr+(x*4)-4);
 247   3              LCD_GLASS_Float(val, 2,  LCD_PESO);
 248   3      
 249   3              val = flash_read_float32(addr+(x*4));
 250   3              LCD_GLASS_Float(val, 2,  LCD_TOTAL);
 251   3      
 252   3              val = flash_read_float32(addr+(x*4)+4);
 253   3              LCD_GLASS_Float(val, 2,  LCD_PRECIO);
 254   3      
 255   3              i++;
 256   3              delay_ms(1000);
 257   3              }
 258   2      }
 259   1      
 260   1      NRM_securty_a = 0x00;
 261   1              NRM_securty_b = 0x00;
 262   1              LCD_GLASS_Clear();
 263   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    767    ----
   CONSTANT SIZE    =     19    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
